{
  "servicePath": "",
  "version_module": true,
  "revision": "20250910",
  "description": "Project Constellation aims at determining, verifying and maintaining the phone numbers of the Android devices so that Google services can use them for different applications, such as near-tier graphs. Google Phone Device Verification API is the internal API to the Constellation GMS core module which enables this project. (go/constellation-overview)",
  "baseUrl": "https://phonedeviceverification-pa.googleapis.com/",
  "rootUrl": "https://phonedeviceverification-pa.googleapis.com/",
  "ownerName": "Google",
  "discoveryVersion": "v1",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "protocol": "rest",
  "title": "Phone Device Verification API",
  "canonicalName": "Phone Device Verification",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "name": "phonedeviceverification_pa",
  "documentationLink": "http://go/constellation-overview",
  "basePath": "",
  "fullyEncodeReservedExpansion": true,
  "version": "v1",
  "kind": "discovery#restDescription",
  "resources": {
    "v1": {
      "methods": {
        "getConsent": {
          "id": "phonedeviceverification_pa.getConsent",
          "path": "v1:getConsent",
          "flatPath": "v1:getConsent",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "GetConsentRequest"
          },
          "response": {
            "$ref": "GetConsentResponse"
          },
          "description": "Checks if the constellation client can initiate the verification or not. If device has consent, the client can send all information about SIMs and Gaias. If some Gaias have consent, the client can only send information about those Gaias, and receive those verifications."
        },
        "setConsent": {
          "id": "phonedeviceverification_pa.setConsent",
          "path": "v1:setConsent",
          "flatPath": "v1:setConsent",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "SetConsentRequest"
          },
          "response": {
            "$ref": "SetConsentResponse"
          },
          "description": "Stores device level consent that allows Google to periodically verify the device's phone number."
        },
        "sync": {
          "id": "phonedeviceverification_pa.sync",
          "path": "v1:sync",
          "flatPath": "v1:sync",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "SyncRequest"
          },
          "response": {
            "$ref": "SyncResponse"
          },
          "description": "Client tells the server about its current state. The server can initiate verifications at this time or refresh their states. If the new states of some verifications are pending, then client will call Proceed for just those verifications. This is called - - When the client is a new client coming online for the first time. It has checked the consent using GetConsent. - When the client detected an event that would put its last verification state(s) in question or introduces new unknown verifications (e.g. IMSI change, or SIM added). - Periodically based on server returned next_sync_time in last Sync call."
        },
        "proceed": {
          "id": "phonedeviceverification_pa.proceed",
          "path": "v1:proceed",
          "flatPath": "v1:proceed",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "ProceedRequest"
          },
          "response": {
            "$ref": "ProceedResponse"
          },
          "description": "When client's current verification state is pending, it calls this method to complete the verification. The response is a new verification state which can be: Verified (on success), None (on failure), or Pending (on retriable errors). The difference between this and Refresh is that current state is pending in this case, while it's verified (or expired) in the case of Refresh."
        },
        "getMessageOverrides": {
          "id": "phonedeviceverification_pa.getMessageOverrides",
          "path": "v1:getMessageOverrides",
          "flatPath": "v1:getMessageOverrides",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "GetMessageOverridesRequest"
          },
          "response": {
            "$ref": "GetMessageOverridesResponse"
          },
          "description": "Client calls this method when the user navigates to the settings page. It uses the response sent here to display all the strings on the page, this can allow us to change the language whenever necessary."
        },
        "getVerifiedPhoneNumbers": {
          "id": "phonedeviceverification_pa.getVerifiedPhoneNumbers",
          "path": "v1:getVerifiedPhoneNumbers",
          "flatPath": "v1:getVerifiedPhoneNumbers",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "GetVerifiedPhoneNumbersRequest"
          },
          "response": {
            "$ref": "GetVerifiedPhoneNumbersResponse"
          },
          "description": "Get all the verified phone numbers on the device."
        }
      }
    },
    "messages": {
      "methods": {
        "send": {
          "id": "phonedeviceverification_pa.messages.send",
          "path": "v1/messages:send",
          "flatPath": "v1/messages:send",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "SendMessageRequest"
          },
          "response": {
            "$ref": "SendMessageResponse"
          },
          "description": "Sends a C11n OTT message."
        },
        "receive": {
          "id": "phonedeviceverification_pa.messages.receive",
          "path": "v1/messages:receive",
          "flatPath": "v1/messages:receive",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "ReceiveMessageRequest"
          },
          "response": {
            "$ref": "ReceiveMessageResponse"
          },
          "description": "Retrieve a C11n OTT message. If the message has already been revoked, this returns a NOT_FOUND error."
        },
        "revoke": {
          "id": "phonedeviceverification_pa.messages.revoke",
          "path": "v1/messages:revoke",
          "flatPath": "v1/messages:revoke",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "RevokeMessageRequest"
          },
          "response": {
            "$ref": "RevokeMessageResponse"
          },
          "description": "Revokes a previously sent message. If the message has already been acknowledged by the receiving device, this returns a NOT_FOUND error."
        },
        "ack": {
          "id": "phonedeviceverification_pa.messages.ack",
          "path": "v1/messages:ack",
          "flatPath": "v1/messages:ack",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "AckMessageRequest"
          },
          "response": {
            "$ref": "AckMessageResponse"
          },
          "description": "Acknowledge that a message has been received successfully. If the message has already been revoked, this returns a NOT_FOUND error."
        },
        "getcapability": {
          "id": "phonedeviceverification_pa.messages.getcapability",
          "path": "v1/messages:getcapability",
          "flatPath": "v1/messages:getcapability",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "GetMessageCapabilityRequest"
          },
          "response": {
            "$ref": "MessageCapability"
          },
          "description": "Check if Constellation has the capability to deliver OTT messages to a phone number."
        }
      }
    }
  },
  "batchPath": "batch",
  "schemas": {
    "GetConsentRequest": {
      "id": "GetConsentRequest",
      "description": "GetConsentRequest is the request to get consent",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "RequestHeader"
        },
        "deviceId": {
          "description": "The device id. (DEPRECATED, ignored by service)",
          "$ref": "DeviceID"
        },
        "gaiaIds": {
          "description": "All the gaia ids on the device. (DEPRECATED, ignored by service)",
          "type": "array",
          "items": {
            "$ref": "GaiaID"
          }
        },
        "apiParams": {
          "description": "Parameters passed by API callers",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        },
        "structuredApiParams": {
          "description": "Specified API params",
          "$ref": "StructuredAPIParams"
        },
        "asterismClient": {
          "description": "(Required) Added in v26, Required in v \u003e= 26. Assumed CONSTELLATION for v \u003c 26. The client for which the consent is being fetched",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "It is not being used to hold a consent value"
          ],
          "enum": [
            "UNKNOWN_CLIENT",
            "CONSTELLATION",
            "RCS",
            "ONE_TIME_VERIFICATION"
          ]
        },
        "includeAsterismConsents": {
          "description": "Whether to include or not the list of asterism consents in the response. Originally a workaround for UPI; no longer respected by the server.",
          "deprecated": true,
          "type": "boolean"
        },
        "imei": {
          "description": "IMEI of the device. MEID if the phone type is CDMA.",
          "type": "string"
        },
        "includeDevicePermissionInfo": {
          "description": "Whether to include or not the permission mode info in the response. go/device-settings-server-dd",
          "type": "boolean"
        }
      }
    },
    "RequestHeader": {
      "id": "RequestHeader",
      "description": "RequestHeader is the header for each client request.",
      "type": "object",
      "properties": {
        "clientInfo": {
          "description": "Client info (Required)",
          "$ref": "ClientInfo"
        },
        "clientAuth": {
          "description": "Client auth contains client signature signed by the client's private key. This should be left blank until the client has been told via ClientInfoUpdate that their public key has been added to storage. If the client wants to change their stored public key, this should be signed with their previous private key.",
          "$ref": "ClientAuth"
        },
        "sessionId": {
          "description": "UUID used for a logging trace for a client session. (Required)",
          "type": "string"
        },
        "trigger": {
          "description": "Used for better quota control on the server, based information like is this a user visible call, or is this call gives us critical change to the server to know about, etc. Mostly ignored. Only used to know which requests to prioritize when the systems are overloaded. (Required)",
          "$ref": "RequestTrigger"
        }
      }
    },
    "ClientInfo": {
      "id": "ClientInfo",
      "description": "Client info Next ID: 22",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "Device id of the client. (Required)",
          "$ref": "DeviceID"
        },
        "deviceSignals": {
          "description": "Device signals for this client. (Required for Sync and Proceed calls before client starts signing.)",
          "$ref": "DeviceSignals"
        },
        "clientPublicKey": {
          "description": "Client public key. Used for client authentication in future. (Required)",
          "type": "string",
          "format": "byte"
        },
        "locale": {
          "description": "User's locale. Used for translating message templates, etc. (Required)",
          "type": "string"
        },
        "countryInfo": {
          "description": "Fields to derive client's country.",
          "$ref": "CountryInfo"
        },
        "gmscoreVersionNumber": {
          "description": "User's GMScore version number. (Required)",
          "type": "integer",
          "format": "int32"
        },
        "gmscoreVersion": {
          "description": "User's human readable (and more granular) GMScore version. (Required)",
          "type": "string"
        },
        "hasReadPrivilegedPhoneStatePermission": {
          "description": "If the GMS core has the READ_PRIVILEGED_PHONE_STATE permission. This helps us determine Carrier ID.",
          "type": "boolean"
        },
        "androidSdkVersion": {
          "description": "User's Android SDK version. (Required)",
          "type": "integer",
          "format": "int32"
        },
        "model": {
          "description": "The model of the device making this request",
          "type": "string"
        },
        "manufacturer": {
          "description": "The manufacturer of the device making this request",
          "type": "string"
        },
        "deviceFingerprint": {
          "description": "The fingerprint of the device making this request Obtained from https://developer.android.com/reference/android/os/Build#FINGERPRINT",
          "type": "string"
        },
        "challengePreference": {
          "description": "Client's preferences of challenge methods. (Moved into Verification)",
          "deprecated": true,
          "$ref": "ChallengePreference"
        },
        "experiments": {
          "description": "The experiments that client is running.",
          "type": "array",
          "items": {
            "$ref": "Experiment"
          }
        },
        "userProfileType": {
          "description": "The type of user profile the client runs on (regular user or work profile).",
          "type": "string",
          "enumDescriptions": [
            "Default type.",
            "Set if it is a regular user profile on the device.",
            "Set if it is a managed (work) profile on the device."
          ],
          "enum": [
            "UNKNOWN_PROFILE_TYPE",
            "REGULAR_USER",
            "MANAGED_PROFILE"
          ]
        },
        "gaiaIds": {
          "description": "Gaia ids seen on the device, used for the client state. (Required when Gaias are signed in on the device.)",
          "type": "array",
          "items": {
            "$ref": "GaiaID"
          }
        },
        "gaiaInfo": {
          "description": "Gaia info collected from the device.",
          "$ref": "GaiaInfo"
        },
        "connectivityInfos": {
          "description": "Connectivity info of the device",
          "type": "array",
          "items": {
            "$ref": "ConnectivityInfo"
          }
        },
        "partialSimInfo": {
          "description": "Partial sim information for all the sims on the device",
          "type": "array",
          "items": {
            "$ref": "PartialSimInfo"
          }
        },
        "deviceType": {
          "description": "The device type.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "DEVICE_TYPE_UNKNOWN",
            "DEVICE_TYPE_PHONE",
            "DEVICE_TYPE_PHONE_GO",
            "DEVICE_TYPE_TV",
            "DEVICE_TYPE_WEARABLE",
            "DEVICE_TYPE_AUTOMOTIVE",
            "DEVICE_TYPE_BATTLESTAR",
            "DEVICE_TYPE_CHROME_OS",
            "DEVICE_TYPE_XR"
          ]
        },
        "isStandaloneDevice": {
          "description": "Tells if wearable devices operate independently. Not applicable to non-wearables like phones.",
          "type": "boolean"
        }
      }
    },
    "DeviceID": {
      "id": "DeviceID",
      "description": "Device ID",
      "type": "object",
      "properties": {
        "iidToken": {
          "description": "GCM IID token for Android devices. (We can move this under oneof later, if we ever use another type of device id.) (Required)",
          "type": "string"
        },
        "deviceAndroidId": {
          "description": "The Android ID of the primary user profile of the device.",
          "type": "string",
          "format": "int64"
        },
        "deviceUserId": {
          "description": "Device serial number for the multiple user feature. Also known as Multiuser-serial. device_user_id is used to identify different user profiles on a single device. (Required when device_id is set)",
          "type": "string",
          "format": "int64"
        },
        "userAndroidId": {
          "description": "Android ID of the user profile, if the user profile had a checkin.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "DeviceSignals": {
      "id": "DeviceSignals",
      "description": "DeviceSignals in ClientInfo",
      "type": "object",
      "properties": {
        "droidguardResult": {
          "description": "DroidGuard result from the client. (Required)",
          "type": "string"
        },
        "droidguardToken": {
          "description": "DroidGuard token from the client.",
          "type": "string"
        }
      }
    },
    "CountryInfo": {
      "id": "CountryInfo",
      "description": "CountryInfo of the SIM.",
      "type": "object",
      "properties": {
        "simCountries": {
          "description": "SIM countries for all SIMs. Got from TelephonyManager.getSimCountryIso().",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkCountries": {
          "description": "Network countries for all SIMs. Got from TelephonyManager.getNetworkCountryIso()",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ChallengePreference": {
      "id": "ChallengePreference",
      "description": "Client Challenge Preference",
      "type": "object",
      "properties": {
        "capabilities": {
          "description": "Types of the challenges allowed. Set when client wants to override the default capabilies derived from the Client information, e.g. gmscore version.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "UNKNOWN is treated as nil method.",
              "Challenge by MO SMS. (go/mobile-originated)",
              "Challenge by MT SMS. (go/mobile-terminated)",
              "Challenge by carrier id (GTAF).",
              "Imsi lookup performed through GTAF",
              "Challenge issued to do a RegisteredSMS Verification.",
              "Challenge by FlashCall (go/c11n-design-flash-call-auth).",
              "Challenge by TS.43 (go/c11n-ts43-design)"
            ],
            "enum": [
              "UNKNOWN",
              "MO_SMS",
              "MT_SMS",
              "CARRIER_ID",
              "IMSI_LOOKUP",
              "REGISTERED_SMS",
              "FLASH_CALL",
              "TS43"
            ]
          }
        },
        "mtPreference": {
          "description": "Preferences for MT challenge.",
          "$ref": "MTChallengePreference"
        },
        "moPreference": {
          "description": "Preferences for MO challenge",
          "$ref": "MOChallengePreference"
        },
        "flashCallPreference": {
          "description": "Preferences for FLASH_CALL challenge",
          "$ref": "FlashCallChallengePreference"
        }
      }
    },
    "MTChallengePreference": {
      "id": "MTChallengePreference",
      "description": "MT Challenge Preference",
      "type": "object",
      "properties": {
        "localizedMessageTemplate": {
          "description": "Token that can be used in the MT SMS to keep it silent. Will be passed on Android O+ when silent MT is allowed.",
          "type": "string"
        },
        "preferredCarrierInfo": {
          "description": "Preferred carrier info from the policy.",
          "$ref": "PreferredCarrierInfo"
        },
        "dataSmsInfo": {
          "description": "If it's set to non-zero then binary SMS challenge will be used, and SMS ports defined in the policy will be overwritten. Setting the field to 0 is no-op.",
          "$ref": "DataSMSInfo"
        }
      }
    },
    "PreferredCarrierInfo": {
      "id": "PreferredCarrierInfo",
      "type": "object",
      "properties": {
        "name": {
          "description": "The carrier to associate this request with to record in streamz/log/db. (The name must exist in googledata/wireless/mobilegw/config/mobile_carrier_config)",
          "type": "string"
        },
        "lookupByImsi": {
          "description": "Get the carrier name by IMSI and telephony_info inside Verify request. If name field is non-empty, this field is ignored. If IMSI's carrier can't be used for MT (the regions don't match, for example), MT SMS challenge is disallowed.",
          "type": "boolean"
        },
        "enforceCarrierResolutionOverride": {
          "description": "By default MGW MTbox queries MDict service to figure out the carrier associated with the target phone number to determine routing. If this field is set, Phone Verifier passes the carrier to MTbox to bypass MDict lookup. The carrier name to be passed to MTbox is determined by: 1. name field if it's not empty 2. carrier name retrieved based on IMSI when lookup_by_imsi is set.",
          "type": "boolean"
        }
      }
    },
    "DataSMSInfo": {
      "id": "DataSMSInfo",
      "description": "Info required to send data SMS.",
      "type": "object",
      "properties": {
        "port": {
          "description": "The port to use for silent/data SMS. (Required)",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MOChallengePreference": {
      "id": "MOChallengePreference",
      "description": "MO Challenge Preference",
      "type": "object",
      "properties": {
        "dataSmsInfo": {
          "description": "If set, the data SMS info is applied to MO SMS challenge.",
          "$ref": "DataSMSInfo"
        }
      }
    },
    "FlashCallChallengePreference": {
      "id": "FlashCallChallengePreference",
      "description": "Flash Call Challenge Preference",
      "type": "object",
      "properties": {
        "phoneRange": {
          "description": "PhoneRange that will be used to call the user's phone number, it will be chosen by constellation server. And the verifier will use a random number in it to trigger a call from. If not provided then the server won't trigger any phone call to the user.",
          "$ref": "PhoneRange"
        }
      }
    },
    "PhoneRange": {
      "id": "PhoneRange",
      "description": "PhoneRange defines a block of continuous phone numbers to be used on FlashCall verification the phone numbers go from country_code+prefix+lower_bound to country_code+prefix+upper_bound",
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "Country code of the caller of the flash call Example: 1",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix of the caller phone number Example: 541301",
          "type": "string"
        },
        "upperBound": {
          "description": "Upper bound of the pool of phone numbers that the client has to expect a call from this upper bound is inclusive and has to be strictly \u003e= lower_bound Example: 0170",
          "type": "string"
        },
        "lowerBound": {
          "description": "Lower bound of the pool of phone numbers that the client has to expect a call from this lower bound is inclusive and has to be strictly \u003c= upper_bound Example: 0160",
          "type": "string"
        }
      }
    },
    "Experiment": {
      "id": "Experiment",
      "description": "Experiment in ClientInfo",
      "type": "object",
      "properties": {
        "id": {
          "description": "Experiment id. Defined at: media/webrtc/server/constellation/experiments.go",
          "type": "string"
        },
        "value": {
          "description": "Experiment value.",
          "type": "string"
        }
      }
    },
    "GaiaID": {
      "id": "GaiaID",
      "description": "Gaia ID",
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "OAuth access token of the Gaia user. (We can move this under oneof later, if we ever use another type of gaia id.) (Required)",
          "type": "string"
        }
      }
    },
    "GaiaInfo": {
      "id": "GaiaInfo",
      "description": "Gaia information and signals collected on the device",
      "type": "object",
      "properties": {
        "gaiaSignals": {
          "description": "A list of Gaia signals collected on the device, including newly signed in and signed out Gaias and existing Gaias on the device",
          "type": "array",
          "items": {
            "$ref": "GaiaSignal"
          }
        }
      }
    },
    "GaiaSignal": {
      "id": "GaiaSignal",
      "description": "Gaia signal with account change details on the device",
      "type": "object",
      "properties": {
        "obfuscatedGaiaId": {
          "description": "Obfuscated Gaia id (Required)",
          "type": "string"
        },
        "gaiaAccountSignalType": {
          "description": "Type of the gaia account signal (Optional)",
          "type": "string",
          "enumDescriptions": [
            "Gaia account signal type unspecified",
            "Account is active and authenticated",
            "Account is still on the device but user needs to re-authenticate",
            "Recently removed gaia account"
          ],
          "enum": [
            "UNSPECIFIED",
            "AUTHENTICATED",
            "UNAUTHENTICATED",
            "REMOVED_WITH_GMS_AUTH_BROADCAST"
          ]
        },
        "gaiaAccountAddedTimestamp": {
          "description": "The timestamp when the gaia account was added to the device or first seen by the device",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ConnectivityInfo": {
      "id": "ConnectivityInfo",
      "description": "Connectivity information for the device",
      "type": "object",
      "properties": {
        "type": {
          "description": "Connection type.",
          "type": "string",
          "enumDescriptions": [
            "Default type",
            "Wifi connection",
            "Cellular data connection"
          ],
          "enum": [
            "UNKNOWN_TYPE",
            "TYPE_WIFI",
            "TYPE_MOBILE"
          ]
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Default state",
            "Connecting",
            "Connected",
            "Disconnecting",
            "Disconnected",
            "Suspended"
          ],
          "enum": [
            "UNKNOWN_STATE",
            "CONNECTING",
            "CONNECTED",
            "DISCONNECTING",
            "DISCONNECTED",
            "SUSPENDED"
          ]
        },
        "availability": {
          "type": "string",
          "enumDescriptions": [
            "Default availability",
            "Connection available",
            "Connection not available"
          ],
          "enum": [
            "UNKNOWN_AVAILABILITY",
            "AVAILABLE",
            "NOT_AVAILABLE"
          ]
        }
      }
    },
    "PartialSimInfo": {
      "id": "PartialSimInfo",
      "type": "object",
      "properties": {
        "simOperator": {
          "description": "Numeric name (MCC+MNC) of the sim operator. Returned by TelephonyManager.getSimOperator()",
          "type": "string"
        },
        "imsiHash": {
          "description": "Hex string of the SHA-256 hash of the IMSI",
          "type": "string"
        }
      }
    },
    "ClientAuth": {
      "id": "ClientAuth",
      "description": "Client's authentication",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "Device identity of the client. (Required)",
          "$ref": "DeviceID"
        },
        "clientSign": {
          "description": "ECDSA signature of a SHA256 hash of \"device_id.iid_token:sign_timestamp.seconds:sign_timestamp.nanos\" made by the private key associated with the public key that was sent to the server in last successful update. (Required)",
          "type": "string",
          "format": "byte"
        },
        "signTimestamp": {
          "description": "Client Timestamp used in the sign, to prevent against reply attacks. [In future: If this client time is older than 30 minutes or already used in other request, we will set new server time retry_with_timestamp in error details which can be used in a followup request.] (Required)",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "RequestTrigger": {
      "id": "RequestTrigger",
      "description": "RequestTrigger triggers which requests to prioritize when the systems are overloaded.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Indicates which trigger type in the request.",
          "type": "string",
          "enumDescriptions": [
            "Default type.",
            "Triggered by periodic consent checker.",
            "Triggered by periodic refresh/sync.",
            "Triggered due to sim change mismatch.",
            "Triggered due to Gaia change on the device.",
            "Triggered from the User visited settings (c11n consent only).",
            "Triggered from the internal debug settings.",
            "Client side Trigger API called (c11n consent only).",
            "Either sim or gaia change detected on reboot.",
            "Triggered by the server using a GCM push.",
            "Retry due to a previous failure.",
            "Triggered due to client side consent API call.",
            "Triggered from the PNVR settings."
          ],
          "enum": [
            "UNKNOWN",
            "PERIODIC_CONSENT_CHECK",
            "PERIODIC_REFRESH",
            "SIM_STATE_CHANGED",
            "GAIA_CHANGE_EVENT",
            "USER_SETTINGS",
            "DEBUG_SETTINGS",
            "TRIGGER_API_CALL",
            "REBOOT_CHECKER",
            "SERVER_TRIGGER",
            "FAILURE_RETRY",
            "CONSENT_API_TRIGGER",
            "PNVR_DEVICE_SETTINGS"
          ]
        }
      }
    },
    "Param": {
      "id": "Param",
      "description": "Param for the API.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the API param.",
          "type": "string"
        },
        "value": {
          "description": "Value of the API param.",
          "type": "string"
        }
      }
    },
    "StructuredAPIParams": {
      "id": "StructuredAPIParams",
      "description": "Group of named API params, each of which is used in a subset of the existing APIs",
      "type": "object",
      "properties": {
        "policyId": {
          "description": "Used to identify the policy related with a sync, proceed or getConsent request",
          "type": "string"
        },
        "maxVerificationAgeHours": {
          "description": "Used in verifyPhoneNumber API. A number indicating how old a verification could be, to be considered valid. This number is one of the aspects to consider in the server to decide whether to issue a challenge or not.",
          "type": "string",
          "format": "int64"
        },
        "idTokenRequest": {
          "description": "Used in verifyPhoneNumber API. Optional, only required for IdToken generation.",
          "$ref": "IDTokenRequest"
        },
        "callingPackage": {
          "description": "Name of the app package that corresponds to the API caller. This value is not an input parameter, is internally set.",
          "type": "string"
        },
        "imsiRequests": {
          "description": "IMSIs and phone number hints for numbers to be verified.",
          "type": "array",
          "items": {
            "$ref": "IMSIRequest"
          }
        }
      }
    },
    "IDTokenRequest": {
      "id": "IDTokenRequest",
      "description": "For IdToken generation",
      "type": "object",
      "properties": {
        "certificateHash": {
          "description": "A first-party or third-party Android app needs to be first registered in cloud console and then use the certificate SHA-1 hash. This field is expected to be a Base64 encoded string, e.g. “IUW99pi4cVA5vQ6D8gab7UNawhw=”",
          "type": "string"
        },
        "tokenNonce": {
          "description": "This allows security against replay attacks, as the server generated nonce would be different for different clients",
          "type": "string"
        }
      }
    },
    "IMSIRequest": {
      "id": "IMSIRequest",
      "description": "For verifying specific IMSIs",
      "type": "object",
      "properties": {
        "imsi": {
          "description": "IMSIs of the specific SIMs to be verified or IMSIs related to the Phone number hints provided",
          "type": "string"
        },
        "phoneNumberHint": {
          "description": "Phone number hints received from the calling app to enable sending MT",
          "type": "string"
        }
      }
    },
    "GetConsentResponse": {
      "id": "GetConsentResponse",
      "description": "GetConsentResponse is the response to get consent",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "ResponseHeader"
        },
        "deviceConsent": {
          "description": "Device level consent to do sim associated verification. (Required)",
          "$ref": "DeviceConsent"
        },
        "appSpecificConsents": {
          "description": "All app specific consents for this device Deprecated",
          "deprecated": true,
          "type": "array",
          "items": {
            "$ref": "AppSpecificConsent"
          }
        },
        "gaiaReachabilityConsents": {
          "description": "Gaia level consents requested. The server may not fill this at all if the device level consent is already present. (DEPCRECATED, never populated)",
          "type": "array",
          "items": {
            "$ref": "GaiaReachabilityConsent"
          }
        },
        "nextSyncTime": {
          "description": "Server given timestamp after which to sync (Optional)",
          "$ref": "ServerTimestamp"
        },
        "clientBehavior": {
          "description": "Client behavior for syncs",
          "$ref": "ClientBehavior"
        },
        "asterismClient": {
          "description": "Assumed CONSTELLATION when not present The client for which the consent is being provided",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "It is not being used to hold a consent value"
          ],
          "enum": [
            "UNKNOWN_CLIENT",
            "CONSTELLATION",
            "RCS",
            "ONE_TIME_VERIFICATION"
          ]
        },
        "asterismConsents": {
          "description": "List of asterism consumers with its consent value",
          "type": "array",
          "items": {
            "$ref": "AsterismConsent"
          }
        },
        "droidguardTokenResponse": {
          "description": "droidguard response",
          "$ref": "DroidGuardTokenResponse"
        },
        "devicePermissionInfo": {
          "description": "permission data for device settings screen",
          "$ref": "DevicePermissionInfo"
        }
      }
    },
    "ResponseHeader": {
      "id": "ResponseHeader",
      "description": "ResponseHeader is the header for response to client.",
      "type": "object",
      "properties": {
        "clientInfoUpdate": {
          "description": "Indicates whether the given client info was acknowledged by the server.",
          "$ref": "ClientInfoUpdate"
        },
        "sessionId": {
          "description": "UUID used for logging given by the client returned back in the response. (Required)",
          "type": "string"
        },
        "serverBuildLabel": {
          "description": "server_build_label describes the version of the server binary.",
          "type": "string"
        }
      }
    },
    "ClientInfoUpdate": {
      "id": "ClientInfoUpdate",
      "description": "ClientInfoUpdate updates the ClientInfo",
      "type": "object",
      "properties": {
        "publicKeyStatus": {
          "description": "Indicates whether the public key in the request was acknowledged by the server.",
          "type": "string",
          "enumDescriptions": [
            "No updates were written",
            "The public key in the request was written to storage"
          ],
          "enum": [
            "NO_STATUS",
            "CLIENT_KEY_UPDATED"
          ]
        }
      }
    },
    "DeviceConsent": {
      "id": "DeviceConsent",
      "description": "Device consent",
      "type": "object",
      "properties": {
        "consent": {
          "description": "A device level consent for this device. (Required)",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "Consent was given.",
            "Consent was not given or revoked.",
            "The user's decision has expired."
          ],
          "enum": [
            "UNKNOWN",
            "CONSENTED",
            "NO_CONSENT",
            "EXPIRED"
          ]
        },
        "costSetting": {
          "description": "Cost setting for the Consent. (Required)",
          "type": "string",
          "enumDescriptions": [
            "Set to NONE when consent is NO_CONSENT or EXPIRED.",
            "Used for CONSENTED. Gives Google an ability to reverify",
            "the phone without checking with Google. Used for CONSENTED. Google should check with the user"
          ],
          "enum": [
            "NONE",
            "AUTOMATIC",
            "MANUAL"
          ]
        }
      }
    },
    "AppSpecificConsent": {
      "id": "AppSpecificConsent",
      "type": "object",
      "properties": {
        "consent": {
          "description": "An app specific consent for this device. (Required)",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "Consent was given.",
            "Consent was not given or revoked.",
            "The user's decision has expired."
          ],
          "enum": [
            "UNKNOWN",
            "CONSENTED",
            "NO_CONSENT",
            "EXPIRED"
          ]
        },
        "app": {
          "description": "The app name for this consent This should stay unused on the client since adding new values will require client updates",
          "type": "string",
          "enumDescriptions": [
            "Default value",
            "RCS"
          ],
          "enum": [
            "UNKNOWN_APP",
            "RCS"
          ]
        }
      }
    },
    "GaiaReachabilityConsent": {
      "id": "GaiaReachabilityConsent",
      "description": "Gaia reachability consent",
      "type": "object",
      "properties": {
        "gaiaId": {
          "description": "Gaia id for this consent. (Required)",
          "$ref": "GaiaID"
        },
        "reachabilityConsent": {
          "description": "True if this Gaia user gave reachability consent to Google. (Required)",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "Consent was given.",
            "Consent was not given or revoked.",
            "The user's decision has expired."
          ],
          "enum": [
            "UNKNOWN",
            "CONSENTED",
            "NO_CONSENT",
            "EXPIRED"
          ]
        }
      }
    },
    "ServerTimestamp": {
      "id": "ServerTimestamp",
      "description": "LINT.IfChange ServerTimestamp has server time with when it was written. This helps clients take the difference in their clocks into account, before using it.",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Timestamp for an event, the server is referring (e.g. expiry time).",
          "type": "string",
          "format": "google-datetime"
        },
        "now": {
          "description": "Timestamp when the server writes this proto.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ClientBehavior": {
      "id": "ClientBehavior",
      "type": "object",
      "properties": {
        "currentConsent": {
          "description": "Consent for the current call",
          "$ref": "DeviceConsent"
        },
        "checkersState": {
          "description": "Whether the client should keep the checkers active or not",
          "type": "string",
          "enumDescriptions": [
            "",
            "Disable all checkers.",
            "Enable all checkers."
          ],
          "enum": [
            "UNKNOWN_STATE",
            "CHECKERS_INACTIVE",
            "CHECKERS_ACTIVE"
          ]
        }
      }
    },
    "AsterismConsent": {
      "id": "AsterismConsent",
      "type": "object",
      "properties": {
        "consumer": {
          "description": "The consumer which owns the consent, such as “RCS”, “Constellation” “One-time verification”",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "It is not being used to hold a consent value"
          ],
          "enum": [
            "UNKNOWN_CLIENT",
            "CONSTELLATION",
            "RCS",
            "ONE_TIME_VERIFICATION"
          ]
        },
        "consent": {
          "description": "The value of the consent for the consumer",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "Consent was given.",
            "Consent was not given or revoked.",
            "The user's decision has expired."
          ],
          "enum": [
            "UNKNOWN",
            "CONSENTED",
            "NO_CONSENT",
            "EXPIRED"
          ]
        },
        "consentVersion": {
          "description": "The consent version. Only available for RCS",
          "type": "string",
          "enumDescriptions": [
            "Not specified.",
            "RCS consent",
            "RCS Default-On on app open.",
            "RCS Default-On out of box.",
            "Manual RCS Unfreeze consent in SM.",
            "RCS Default-On with legal FYI in settings."
          ],
          "enum": [
            "UNSPECIFIED",
            "RCS_CONSENT",
            "RCS_DEFAULT_ON_LEGAL_FYI",
            "RCS_DEFAULT_ON_OUT_OF_BOX",
            "RCS_SAMSUNG_UNFREEZE",
            "RCS_DEFAULT_ON_LEGAL_FYI_IN_SETTINGS"
          ]
        },
        "areAllRcsUsersUnmonitored": {
          "description": "If all imsis on the device are unmonitored. Only relevant for RCS",
          "type": "boolean"
        }
      }
    },
    "DroidGuardTokenResponse": {
      "id": "DroidGuardTokenResponse",
      "description": "server encrypted droidguard response",
      "type": "object",
      "properties": {
        "droidguardToken": {
          "description": "Droidguard token",
          "type": "string"
        },
        "droidguardTokenTtl": {
          "description": "Droidguard token ttl",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "DevicePermissionInfo": {
      "id": "DevicePermissionInfo",
      "description": "Device permission info for device settings screen",
      "type": "object",
      "properties": {
        "permissionState": {
          "description": "Permission state for the device",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "Permission granted.",
            "Permission denied."
          ],
          "enum": [
            "UNSPECIFIED",
            "GRANTED",
            "DENIED"
          ]
        },
        "permissionMode": {
          "description": "Permission mode for the device",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "The device doesn't have PNVR permission record, with or without legacy PNV permission record",
            "The device has PNVR permission record, either enabled or disabled",
            "The device is disallowed for DPNV and PNVR permissions"
          ],
          "enum": [
            "UNSPECIFIED",
            "LEGACY_DPNV",
            "PNVR",
            "NOT_ALLOWED"
          ]
        }
      }
    },
    "SetConsentRequest": {
      "id": "SetConsentRequest",
      "description": "SetConsentRequest is the request to set consent",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "RequestHeader"
        },
        "deviceConsent": {
          "description": "One of the following would be set. (Optional) one of the consent messages should be set. See the TODO below (b/294101685)",
          "$ref": "DeviceConsent"
        },
        "onDemandConsent": {
          "description": "(Optional) one of the consent messages should be set Used to set consent via OnDemandConsent flow.",
          "$ref": "OnDemandConsent"
        },
        "deviceVerificationConsent": {
          "description": "PNV Device Verification Consent.",
          "$ref": "DeviceVerificationConsent"
        },
        "consentVersion": {
          "description": "(Optional) for device_consent when asterism_client is RCS",
          "type": "string",
          "enumDescriptions": [
            "Not specified.",
            "RCS consent",
            "RCS Default-On on app open.",
            "RCS Default-On out of box.",
            "Manual RCS Unfreeze consent in SM.",
            "RCS Default-On with legal FYI in settings."
          ],
          "enum": [
            "UNSPECIFIED",
            "RCS_CONSENT",
            "RCS_DEFAULT_ON_LEGAL_FYI",
            "RCS_DEFAULT_ON_OUT_OF_BOX",
            "RCS_SAMSUNG_UNFREEZE",
            "RCS_DEFAULT_ON_LEGAL_FYI_IN_SETTINGS"
          ]
        },
        "asterismClient": {
          "description": "(Required) Added in v23, Required in v \u003e= 23. Assumed CONSTELLATION for v \u003c 23. The client for which the consent is being set",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "It is not being used to hold a consent value"
          ],
          "enum": [
            "UNKNOWN_CLIENT",
            "CONSTELLATION",
            "RCS",
            "ONE_TIME_VERIFICATION"
          ]
        },
        "auditToken": {
          "description": "(Optional) Audit token that points to the record of consent moment in ARI",
          "type": "string",
          "format": "byte"
        },
        "apiParams": {
          "description": "Parameters passed by API callers",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        }
      }
    },
    "OnDemandConsent": {
      "id": "OnDemandConsent",
      "description": "On-demand consent, used by ODCv2 to set consent",
      "type": "object",
      "properties": {
        "consent": {
          "description": "Value of the consent",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "Consent was given.",
            "Consent was not given or revoked.",
            "The user's decision has expired."
          ],
          "enum": [
            "UNKNOWN",
            "CONSENTED",
            "NO_CONSENT",
            "EXPIRED"
          ]
        },
        "gaiaId": {
          "description": "Gaia used to set the consent",
          "$ref": "GaiaID"
        },
        "consentVariant": {
          "description": "Variant id of the consent",
          "type": "string"
        },
        "trigger": {
          "description": "Trigger for the consent flow",
          "type": "string"
        }
      }
    },
    "DeviceVerificationConsent": {
      "id": "DeviceVerificationConsent",
      "description": "Device-level phone number verification consent",
      "type": "object",
      "properties": {
        "consentValue": {
          "description": "A device level phone number verification consent for this device",
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "Consent was given.",
            "Consent was not given or revoked.",
            "The user's decision has expired."
          ],
          "enum": [
            "UNKNOWN",
            "CONSENTED",
            "NO_CONSENT",
            "EXPIRED"
          ]
        },
        "consentSource": {
          "description": "Source for the consent request (i.e. where the request is made from)",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "PVaaS Web",
            "Messages Profiles"
          ],
          "enum": [
            "SOURCE_UNSPECIFIED",
            "ANDROID_DEVICE_SETTINGS",
            "GAIA_USERNAME_RECOVERY",
            "AOB_SETUP_WIZARD",
            "MINUTEMAID_JS_BRIDGE",
            "GAIA_WEB_JS_BRIDGE",
            "AM_PROFILES"
          ]
        },
        "consentVersion": {
          "description": "Version of the PNV consent.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Basic PNV consent",
            "PNV consent with both messages and calls",
            "PNV consent with international SMS and calls",
            "PNV consent with reachability and international SMS and calls"
          ],
          "enum": [
            "UNKNOWN",
            "PHONE_VERIFICATION_DEFAULT",
            "PHONE_VERIFICATION_MESSAGES_CALLS_V1",
            "PHONE_VERIFICATION_INTL_SMS_CALLS",
            "PHONE_VERIFICATION_REACHABILITY_INTL_SMS_CALLS"
          ]
        }
      }
    },
    "SetConsentResponse": {
      "id": "SetConsentResponse",
      "description": "SetContentResponse is the response to set consent",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "ResponseHeader"
        }
      }
    },
    "SyncRequest": {
      "id": "SyncRequest",
      "description": "SyncRequest is the request to sync",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "RequestHeader"
        },
        "verifications": {
          "description": "The current client state of verifications. - If this is new client calling the server for the first time, it should have NONE verifications for each SIM and Gaia on device. - If this is after a client detected event, it should have all server returned verifications that are *unaffected* by client change and NONE verifications for newly seen IMSI/Gaia (but none of the removed IMSI or Gaias). - If this is a periodic sync, it should have all server returned verifications, but updated with any client side changes that didn't warrant an immediate sync (e.g. IMSI should be the currently seen IMSI).",
          "type": "array",
          "items": {
            "$ref": "Verification"
          }
        },
        "verificationTokens": {
          "description": "Verification tokens used in the backup and restore flow for verifying a new device that was phone number verified in the past http://goto.google.com/c11n-br-acquisition",
          "type": "array",
          "items": {
            "$ref": "VerificationToken"
          }
        }
      }
    },
    "Verification": {
      "id": "Verification",
      "description": "Verification",
      "type": "object",
      "properties": {
        "association": {
          "description": "To which entity, this verification is associated. (Required)",
          "$ref": "VerificationAssociation"
        },
        "state": {
          "description": "Verification state",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN is treated as nil state",
            "no state.",
            "pending_verification_info should be set.",
            "verification_info should be set."
          ],
          "enum": [
            "UNKNOWN",
            "NONE",
            "PENDING",
            "VERIFIED"
          ]
        },
        "telephonyInfo": {
          "description": "Telephony information of the SIM that is being verified. This is transient data, only filled from client-\u003eserver calls. The server will never fill this field. Client should fill it fresh when it sends this. EXCEPTION: server will send back the exact telephony info given in the request for any verifications returned with state PENDING, until the client starts caching the telephony info. Used by the server to determine verification and reverification policies. (Required for SIM verifications in *client requests*).",
          "$ref": "TelephonyInfo"
        },
        "verificationInfo": {
          "description": "Verification information of a verified user Populated by the server when state = VERIFIED",
          "$ref": "VerificationInfo"
        },
        "pendingVerificationInfo": {
          "description": "Verification information when a challenge is given Populated by the server when state = PENDING",
          "$ref": "PendingVerificationInfo"
        },
        "unverifiedInfo": {
          "description": "Verification information when the user is unverified Populated by the server when state = NONE",
          "$ref": "UnverifiedInfo"
        },
        "apiParams": {
          "description": "Additional API params set in the request and response for each verification. We use free-form key-values than a proto, to make the client agnostic to the actual params.",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        },
        "structuredApiParams": {
          "description": "Specified API params",
          "$ref": "StructuredAPIParams"
        },
        "challengePreference": {
          "description": "Client's preferences of challenge methods.",
          "$ref": "ChallengePreference"
        }
      }
    },
    "VerificationAssociation": {
      "id": "VerificationAssociation",
      "description": "To which entity, the verification is associated.",
      "type": "object",
      "properties": {
        "sim": {
          "description": "When the verification is associated with SIM. i.e. Constellation performed verification",
          "$ref": "SIMAssociation"
        },
        "gaia": {
          "description": "When the verification is associated with the Gaia. i.e. Focus verification. Note: We decided to not use this for now. Logged in Gaias are part of the client info.",
          "$ref": "GaiaAssociation"
        }
      }
    },
    "SIMAssociation": {
      "id": "SIMAssociation",
      "description": "For SIM associated verification",
      "type": "object",
      "properties": {
        "simInfo": {
          "description": "SIM with which the verification is associated. (Required)",
          "$ref": "SIMInfo"
        },
        "simSlot": {
          "description": "Zero based number that identifies the SIM slot where the associated SIM card is inserted",
          "$ref": "SIMSlot"
        },
        "gaiaIds": {
          "description": "Gaia ids seen on the device, used for getting hints and bookkeeping.",
          "type": "array",
          "items": {
            "$ref": "GaiaID"
          }
        }
      }
    },
    "SIMInfo": {
      "id": "SIMInfo",
      "description": "SIM info",
      "type": "object",
      "properties": {
        "imsi": {
          "description": "IMSI of the SIM. If the server maps multiple IMSIs to the same phone number on the same device, we could set them to the same SIMInfo proto, making it one verification. (Required at least one)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simReadableNumber": {
          "description": "Number read from the SIM.",
          "type": "string"
        },
        "iccid": {
          "description": "the Iccid of the sim",
          "type": "string"
        },
        "telephonyPhoneNumber": {
          "description": "Numbers obtained from SubscriptionManager.getPhoneNumber for each of the available sources.",
          "type": "array",
          "items": {
            "$ref": "TelephonyPhoneNumber"
          }
        }
      }
    },
    "TelephonyPhoneNumber": {
      "id": "TelephonyPhoneNumber",
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "source": {
          "description": "LINT.ThenChange( //depot/google3/media/webrtc/server/constellation/analytics/server_enums.proto, //depot/google3/media/webrtc/server/constellation/common/convert.go )",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_PHONE_NUMBER_SOURCE",
            "CARRIER",
            "IUCC",
            "IMS"
          ]
        }
      }
    },
    "SIMSlot": {
      "id": "SIMSlot",
      "type": "object",
      "properties": {
        "index": {
          "description": "Index of the SIM slot. Note this is just the sub_id on pre-Q devices.",
          "type": "integer",
          "format": "int32"
        },
        "subId": {
          "description": "Subscription ID corresponding to the SIM slot.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GaiaAssociation": {
      "id": "GaiaAssociation",
      "description": "For Gaia associated verification",
      "type": "object",
      "properties": {
        "gaiaId": {
          "description": "(Required) Gaia id with which the verification is associated.",
          "$ref": "GaiaID"
        }
      }
    },
    "TelephonyInfo": {
      "id": "TelephonyInfo",
      "description": "The telephony information of the client which is used to choose a right challenge for this client based on policies. Next ID: 27",
      "type": "object",
      "properties": {
        "simState": {
          "description": "Sim state of the device.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_SIM_STATE",
            "SIM_NOT_READY",
            "SIM_READY"
          ]
        },
        "phoneType": {
          "description": "type of the phone.",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN_PHONE_TYPE is treated as nil phone type.",
            "GSM phone.",
            "CDMA phone.",
            "SIP phone."
          ],
          "enum": [
            "UNKNOWN_PHONE_TYPE",
            "GSM",
            "CDMA",
            "SIP"
          ]
        },
        "groupIdLevel1": {
          "description": "Group Identifier Level1 for a GSM phone. TelephonyManager.getGroupIdLevel1()",
          "type": "string"
        },
        "simOperator": {
          "description": "SIM Operator information. (Required)",
          "$ref": "MobileOperatorInfo"
        },
        "networkOperator": {
          "description": "Current Network Operator information.",
          "$ref": "MobileOperatorInfo"
        },
        "networkRoaming": {
          "description": "Is user on Network Roaming? TelephonyManager.isNetworkRoaming()",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN_ROAMING is treated as nil roaming.",
            "No roaming.",
            "Has roaming."
          ],
          "enum": [
            "UNKNOWN_ROAMING",
            "NOT_ROAMING",
            "ROAMING"
          ]
        },
        "dataRoaming": {
          "description": "Is user on Data Roaming? NetworkInfo.isRoaming() This could be false, even when network_roaming is true, e.g. Fi",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN_ROAMING is treated as nil roaming.",
            "No roaming.",
            "Has roaming."
          ],
          "enum": [
            "UNKNOWN_ROAMING",
            "NOT_ROAMING",
            "ROAMING"
          ]
        },
        "smsCapability": {
          "description": "SMS capability of the device/sim",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN_SMS_CAPABILITY is treated as nil sms capability.",
            "SMS incapable device.",
            "App lacks permissions to send/receive SMS.",
            "User Profile lacks permissions to send/receive SMS.",
            "SMS capable client."
          ],
          "enum": [
            "UNKNOWN_SMS_CAPABILITY",
            "SMS_INCAPABLE",
            "APP_SMS_RESTRICTED",
            "USER_SMS_RESTRICTED",
            "SMS_CAPABLE"
          ]
        },
        "carrierIdCapability": {
          "description": "CarrierID capability of the device/sim",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN_CARRIER_ID_CAPABILITY is treated as no capability.",
            "Carrier ID incapable device/sim.",
            "Carrier ID capable device/sim."
          ],
          "enum": [
            "UNKNOWN_CARRIER_ID_CAPABILITY",
            "CARRIER_ID_INCAPABLE",
            "CARRIER_ID_CAPABLE"
          ]
        },
        "premiumSmsPermission": {
          "type": "string",
          "enumDescriptions": [
            "Unknwown.",
            "SMS to a shortcode, will show Premium SMS prompt for this client.",
            "GMSCore has permissions to send \"Premium SMS\". No prompt will be"
          ],
          "enum": [
            "UNKNOWN_PREMIUM_SMS_PERMISSION",
            "PREMIUM_SMS_PROMPT_REQUIRED",
            "PREMIUM_SMS_PERMISSION_GRANTED"
          ]
        },
        "subscriptionCount": {
          "description": "Number of active sims on the device. SubscriptionManager.getActiveSubscriptionInfoCount() Client will set 0, when unknown (due to API unavailability).",
          "type": "integer",
          "format": "int32"
        },
        "subscriptionCountMax": {
          "description": "Number of sim slots on the device. SubscriptionManager.getActiveSubscriptionInfoCountMax() Client will set 0, when unknown (due to API unavailability).",
          "type": "integer",
          "format": "int32"
        },
        "simIndex": {
          "description": "The index of the active sim for the associated verification. Client does not need to set this. CFE sets this before passing this message along to Verifier as part of the VerifyRequest Deprecated: this is for a very old bug: b/64725733.",
          "deprecated": true,
          "type": "integer",
          "format": "uint32"
        },
        "isEmbeddedSim": {
          "description": "True if the SIM is an eSIM. Client will set to false when API unavailable.",
          "type": "boolean"
        },
        "imei": {
          "description": "IMEI of the device. MEID if the phone type is CDMA.",
          "type": "string"
        },
        "serviceState": {
          "description": "Service state of the sim",
          "type": "string",
          "enumDescriptions": [
            "State unknown",
            "Phone has full function either in home or roaming network",
            "Phone is not registered on any operator",
            "Phone is registered but locked for emergency use",
            "Radio telephony is powered off"
          ],
          "enum": [
            "UNKNOWN_STATE",
            "STATE_IN_SERVICE",
            "STATE_OUT_OF_SERVICE",
            "STATE_EMERGENCY_ONLY",
            "STATE_POWER_OFF"
          ]
        },
        "gtafVerificationMethod": {
          "description": "Verification method used for the request This field is used for clients signaling requested verification method to server",
          "type": "string",
          "enumDescriptions": [
            "Method not set by client",
            "Using carrier id ts43 eap-aka verification",
            "Legacy server to server carrier id flow",
            "Using carrier ID TS.43 for UPI"
          ],
          "enum": [
            "METHOD_UNKNOWN",
            "METHOD_CARRIER_ID_TS43",
            "METHOD_CARRIER_ID_LEGACY",
            "METHOD_CARRIER_ID_TS43_UPI"
          ]
        },
        "carrierIdChallengePreference": {
          "description": "Carrier ID Challenge preference passed to GTAF through phone verifier.",
          "$ref": "CarrierIDChallengePreference"
        },
        "cellularNetworkEvents": {
          "description": "Cellular network events.",
          "type": "array",
          "items": {
            "$ref": "CellularNetworkEvent"
          }
        },
        "callEvents": {
          "description": "Events for incoming/outgoing calls",
          "type": "array",
          "items": {
            "$ref": "CallEvent"
          }
        },
        "smsEvents": {
          "description": "Events for incoming outgoing smses",
          "type": "array",
          "items": {
            "$ref": "SMSEvent"
          }
        },
        "serviceStateEvents": {
          "description": "Service registration state events.",
          "type": "array",
          "items": {
            "$ref": "ServiceStateEvent"
          }
        },
        "simCarrierId": {
          "description": "Android Telephony's Carrier ID: https://developer.android.com/reference/android/telephony/TelephonyManager#getSimCarrierId()",
          "type": "string",
          "format": "int64"
        },
        "skipDeviceRoamingChecks": {
          "description": "Skip Device roaming checks b/406852685.",
          "type": "boolean"
        }
      }
    },
    "MobileOperatorInfo": {
      "id": "MobileOperatorInfo",
      "description": "Information about a mobile operator.",
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "Country of the network. ISO country code. TelephonyManager.getNetworkCountryIso() for network operator and TelephonyManager.getSimCountryIso() for sim operator.",
          "type": "string"
        },
        "operator": {
          "description": "Numeric name (MCC+MNC) of the network operator. TelephonyManager.getNetworkOperator() for network operator and TelephonyManager.getSimOperator() for sim operator.",
          "type": "string"
        },
        "operatorName": {
          "description": "Alphabetic name of the network operator. TelephonyManager.getNetworkOperatorName() for network operator and TelephonyManager.getSimOperatorName() for sim operator.",
          "type": "string"
        },
        "nilSinceMicros": {
          "description": "Time in micros since when these values have been nil. (Deprecated after v18)",
          "type": "integer",
          "format": "uint32"
        },
        "nilSinceUsec": {
          "description": "Time in micros since when these values have been nil.",
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "CarrierIDChallengePreference": {
      "id": "CarrierIDChallengePreference",
      "description": "CarrierID Challenge Preference",
      "type": "object",
      "properties": {
        "integrator": {
          "description": "Integrator used for Carrier ID request",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "INTEGRATOR_UNSPECIFIED",
            "TATA_GT1",
            "TATA_GT2"
          ]
        },
        "gtafVerificationMethod": {
          "description": "Verification method used for the request This field is used for clients signaling requested verification method to server",
          "type": "string",
          "enumDescriptions": [
            "Method not set by client",
            "Using carrier id ts43 eap-aka verification",
            "Legacy server to server carrier id flow",
            "Using carrier ID TS.43 for UPI"
          ],
          "enum": [
            "METHOD_UNKNOWN",
            "METHOD_CARRIER_ID_TS43",
            "METHOD_CARRIER_ID_LEGACY",
            "METHOD_CARRIER_ID_TS43_UPI"
          ]
        }
      }
    },
    "CellularNetworkEvent": {
      "id": "CellularNetworkEvent",
      "description": "Event when a cellular data network was detected.",
      "type": "object",
      "properties": {
        "eventTimestamp": {
          "description": "When the event was recorded.",
          "type": "string",
          "format": "google-datetime"
        },
        "mobileDataEnabled": {
          "description": "Whether \"mobile data\" is enabled in device's settings.",
          "type": "boolean"
        },
        "airplaneModeEnabled": {
          "description": "Whether \"airplane mode\" is enabled in device's settings.",
          "type": "boolean"
        },
        "mobileDataAlwaysOnEnabled": {
          "description": "Whether \"mobile data always on\" is enabled in device's settings.",
          "type": "boolean"
        },
        "connectedToWifi": {
          "description": "Whether the device was connected to WiFi when this event happened.",
          "type": "boolean"
        },
        "dataNetworks": {
          "description": "Cellular networks available.",
          "type": "array",
          "items": {
            "$ref": "CellularNetwork"
          }
        }
      }
    },
    "CellularNetwork": {
      "id": "CellularNetwork",
      "description": "Information collected from device about a cellular network.",
      "type": "object",
      "properties": {
        "networkCapabilities": {
          "description": "All network capabilities. https://developer.android.com/reference/android/net/NetworkCapabilities.html#hasCapability(int)",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "canReachGoogle": {
          "description": "If the network has internet capability, whether we can successfully reach Google servers through it.",
          "type": "boolean"
        }
      }
    },
    "CallEvent": {
      "id": "CallEvent",
      "type": "object",
      "properties": {
        "eventTimestamp": {
          "description": "When the event was recorded rounded down to the multiple of n hours before the call is made n is defined by a flag",
          "type": "string",
          "format": "google-datetime"
        },
        "eventDirection": {
          "description": "The direction of the Call",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_DIRECTION",
            "INCOMING",
            "OUTGOING",
            "MISSED"
          ]
        },
        "numberType": {
          "description": "Short code or Long number",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_TYPE",
            "LONG_NUMBER",
            "SHORT_CODE"
          ]
        }
      }
    },
    "SMSEvent": {
      "id": "SMSEvent",
      "type": "object",
      "properties": {
        "eventTimestamp": {
          "description": "When the event was recorded rounded down to the multiple of n hours before the call is made n is defined by a flag",
          "type": "string",
          "format": "google-datetime"
        },
        "eventDirection": {
          "description": "The direction of the SMS",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_DIRECTION",
            "INCOMING",
            "OUTGOING",
            "MISSED"
          ]
        },
        "numberType": {
          "description": "Short code or Long number",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_TYPE",
            "LONG_NUMBER",
            "SHORT_CODE"
          ]
        }
      }
    },
    "ServiceStateEvent": {
      "id": "ServiceStateEvent",
      "description": "The SIM's service registration state.",
      "type": "object",
      "properties": {
        "eventTimestamp": {
          "description": "When the event was recorded.",
          "type": "string",
          "format": "google-datetime"
        },
        "mobileDataEnabled": {
          "description": "Whether mobile data is enabled in device’s settings.",
          "type": "boolean"
        },
        "airplaneModeEnabled": {
          "description": "Whether airplane mode is enabled in device’s settings.",
          "type": "boolean"
        },
        "voiceRegistrationState": {
          "description": "Voice registration state.",
          "type": "integer",
          "format": "int32"
        },
        "dataRegistrationState": {
          "description": "Data registration state.",
          "type": "integer",
          "format": "int32"
        },
        "voiceNetworkType": {
          "description": "Voice network type.",
          "type": "integer",
          "format": "int32"
        },
        "dataNetworkType": {
          "description": "Data network type.",
          "type": "integer",
          "format": "int32"
        },
        "signalStrength": {
          "description": "If registration state is OUT_OF_SERVICE, the signal strength level detected at the time of the event.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VerificationInfo": {
      "id": "VerificationInfo",
      "description": "Verification information",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "description": "Phone number that was verified. (Required)",
          "type": "string"
        },
        "verificationTime": {
          "description": "Time when verification was done. (Required)",
          "type": "string",
          "format": "google-datetime"
        },
        "asterismClient": {
          "description": "Asterism client for this verification",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "It is not being used to hold a consent value"
          ],
          "enum": [
            "UNKNOWN_CLIENT",
            "CONSTELLATION",
            "RCS",
            "ONE_TIME_VERIFICATION"
          ]
        },
        "verificationToken": {
          "description": "Verification token used in the backup and restore flow for verifying a new device that was phone number verified in the past http://goto.google.com/c11n-br-acquisition",
          "deprecated": true,
          "$ref": "VerificationToken"
        },
        "challengeMethod": {
          "description": "Challenge method used to complete the verification.",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN is treated as nil method.",
            "Challenge by MO SMS. (go/mobile-originated)",
            "Challenge by MT SMS. (go/mobile-terminated)",
            "Challenge by carrier id (GTAF).",
            "Imsi lookup performed through GTAF",
            "Challenge issued to do a RegisteredSMS Verification.",
            "Challenge by FlashCall (go/c11n-design-flash-call-auth).",
            "Challenge by TS.43 (go/c11n-ts43-design)"
          ],
          "enum": [
            "UNKNOWN",
            "MO_SMS",
            "MT_SMS",
            "CARRIER_ID",
            "IMSI_LOOKUP",
            "REGISTERED_SMS",
            "FLASH_CALL",
            "TS43"
          ]
        }
      }
    },
    "VerificationToken": {
      "id": "VerificationToken",
      "description": "server encrypted verification record",
      "type": "object",
      "properties": {
        "token": {
          "description": "encrypted token containing ",
          "type": "string",
          "format": "byte"
        },
        "expirationTime": {
          "description": "time till which the token is valid",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "PendingVerificationInfo": {
      "id": "PendingVerificationInfo",
      "description": "Pending verification information",
      "type": "object",
      "properties": {
        "challenge": {
          "description": "Challenge given to the client, that can help with proceeding this verification towards completion. (Required)",
          "$ref": "Challenge"
        },
        "asterismClient": {
          "description": "Asterism client for this pending verification",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "It is not being used to hold a consent value"
          ],
          "enum": [
            "UNKNOWN_CLIENT",
            "CONSTELLATION",
            "RCS",
            "ONE_TIME_VERIFICATION"
          ]
        },
        "billingClient": {
          "description": "Billing client for this pending verification passed along to proceed.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Used for API calls from UPI used for RCS provisioning, set in UPI policy. go/rcs-upi-mvp",
            "Gaia username recovery with pre-registered phone.",
            "Gaia username recovery with pre-registered phone using International MO when eligible.",
            "",
            "",
            "Gaia Device verification flows - IPP, IAP etc.",
            "Gaia Device verification flows with INT MO when eligible.",
            "UPI Carrier TOS",
            "UPI International MO",
            "Firebase EPNV"
          ],
          "enum": [
            "UNKNOWN_CLIENT",
            "CONSTELLATION",
            "CONSTELLATION_ACQUISITION",
            "CONSTELLATION_REVERIFICATION",
            "CONSTELLATION_INTERNATIONAL_MO",
            "RCS",
            "RCS_MO",
            "RCS_HB_MO",
            "RCS_JIBE",
            "RCS_OTP_PROBER",
            "ONE_TIME_VERIFICATION_VERIFIER_SIGNUP_RECOVERY",
            "ONE_TIME_VERIFICATION_ABRA_USERNAME_RECOVERY",
            "ONE_TIME_VERIFICATION_INTERNATIONAL_MO",
            "RCS_PROVISIONING_UPI",
            "GAIA_USERNAME_RECOVERY",
            "GAIA_USERNAME_RECOVERY_INT_MO",
            "MEET",
            "UPI_FREE_SMS",
            "GAIA_DEVICE_VERIFICATION",
            "GAIA_DEVICE_VERIFICATION_INT_MO",
            "UPI_CARRIER_TOS",
            "UPI_INTL_MO",
            "FIREBASE_PNV"
          ]
        },
        "mtHintNumber": {
          "description": "Hint phone number for MT verification",
          "type": "string"
        }
      }
    },
    "Challenge": {
      "id": "Challenge",
      "description": "Client Challenge",
      "type": "object",
      "properties": {
        "challengeId": {
          "description": "ID of the pending verification (or challenge) given by the server. This is used to refer to the pending verification in process. (Required)",
          "$ref": "ChallengeID"
        },
        "type": {
          "description": "Type of the challenge. (Required)",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN is treated as nil method.",
            "Challenge by MO SMS. (go/mobile-originated)",
            "Challenge by MT SMS. (go/mobile-terminated)",
            "Challenge by carrier id (GTAF).",
            "Imsi lookup performed through GTAF",
            "Challenge issued to do a RegisteredSMS Verification.",
            "Challenge by FlashCall (go/c11n-design-flash-call-auth).",
            "Challenge by TS.43 (go/c11n-ts43-design)"
          ],
          "enum": [
            "UNKNOWN",
            "MO_SMS",
            "MT_SMS",
            "CARRIER_ID",
            "IMSI_LOOKUP",
            "REGISTERED_SMS",
            "FLASH_CALL",
            "TS43"
          ]
        },
        "mtChallenge": {
          "description": "Challenge by MT SMS",
          "$ref": "MTChallenge"
        },
        "moChallenge": {
          "description": "Challenge by MO SMS",
          "$ref": "MOChallenge"
        },
        "carrierIdChallenge": {
          "description": "Challenge by carrier id",
          "$ref": "CarrierIDChallenge"
        },
        "registeredSmsChallenge": {
          "description": "Challenge by registered SMS.",
          "$ref": "RegisteredSMSChallenge"
        },
        "flashCallChallenge": {
          "description": "Challenge by flash call",
          "$ref": "FlashCallChallenge"
        },
        "ts43Challenge": {
          "description": "Challenge by TS.43",
          "$ref": "Ts43Challenge"
        },
        "expiryTime": {
          "description": "Time till when this challenge can be responded. After this time, the client can't proceed to complete the verification, or it needs to start over. (Required)",
          "$ref": "ServerTimestamp"
        },
        "groupId": {
          "description": "Group Id will be used by parallel execution to group challenges, one of the challenges in group need to be successful for the entire group to be considered successful.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ChallengeID": {
      "id": "ChallengeID",
      "description": "Challenge ID",
      "type": "object",
      "properties": {
        "id": {
          "description": "(Required)",
          "type": "string"
        }
      }
    },
    "MTChallenge": {
      "id": "MTChallenge",
      "description": "MT Challenge",
      "type": "object",
      "properties": {
        "messageSubstring": {
          "description": "If set, client will only read SMS that has this string as substring, and send only those SMS as challenge response.",
          "type": "string"
        }
      }
    },
    "MOChallenge": {
      "id": "MOChallenge",
      "description": "MO Challenge",
      "type": "object",
      "properties": {
        "proxyNumber": {
          "description": "The proxy phone number where the client will send an SMS. (Required)",
          "type": "string"
        },
        "sms": {
          "description": "The message that the client is expected to send to the proxy number. (Required)",
          "type": "string"
        },
        "dataSmsInfo": {
          "description": "Info required to send data SMS. If not provided the client will send visible/text SMS.",
          "$ref": "DataSMSInfo"
        },
        "pollingIntervals": {
          "description": "The sleep intervals for the MO challenge set by the server.",
          "type": "string"
        }
      }
    },
    "CarrierIDChallenge": {
      "id": "CarrierIDChallenge",
      "description": "Carrier ID Challenge used for SS7 traffic.",
      "type": "object",
      "properties": {
        "isimRequest": {
          "description": "ISIM Request for the Carrier ID module on the client. http://www.arib.or.jp/IMT-2000/V740Dec09/5_Appendix/Rel5/31/31103-5d1.pdf (Required)",
          "type": "string"
        },
        "authType": {
          "description": "Determines whether 2G or 3G authentication should be used.",
          "type": "integer",
          "format": "int32"
        },
        "appType": {
          "description": "The app_type to be used for the ICC authentication.",
          "type": "integer",
          "format": "int32"
        },
        "challengeType": {
          "deprecated": true,
          "type": "string",
          "enumDescriptions": [
            "",
            "Client only solution with no Google to carrier server communication. Design: go/ts43-jio-hld-v2."
          ],
          "enum": [
            "CHALLENGE_METHOD_UNSPECIFIED",
            "TS43_CLIENT"
          ]
        },
        "ts43ClientChallenge": {
          "deprecated": true,
          "$ref": "TS43ClientChallenge"
        }
      }
    },
    "TS43ClientChallenge": {
      "id": "TS43ClientChallenge",
      "description": "CarrierID TS43 Client Challenge",
      "type": "object",
      "properties": {
        "entitlementUrl": {
          "description": "Server URL, android telephony entitlment library connects to perform TS.43 phone number verification.",
          "type": "string"
        },
        "macSignature": {
          "description": "MAC signature of Google, to help carrier validate the integrity of request origination.",
          "deprecated": true,
          "type": "string"
        },
        "googleDigitalSignature": {
          "description": "Digital signature of Google, to help carrier validate the integrity of request origination.",
          "deprecated": true,
          "type": "string"
        },
        "serviceEntitlementRequest": {
          "description": "Request to perform EAP-AKA and TS.43 phone number verification by C11n android client to entitlment library.",
          "$ref": "ServiceEntitlementRequest"
        },
        "odsaOperation": {
          "description": "Request to perform TS.43 Odsa operations like GetPhoneNumber.",
          "$ref": "OdsaOperation"
        }
      }
    },
    "ServiceEntitlementRequest": {
      "id": "ServiceEntitlementRequest",
      "description": "Passed by android client to entitlement library for performing EAP-AKA verification and GetPhoneNumber. This is sent to C11n android client module by server as part of Sync response cs/third_party/java_src/service_entitlement/java/com/android/libraries/entitlement/ServiceEntitlementRequest.java",
      "type": "object",
      "properties": {
        "configurationVersion": {
          "description": "Configuration version stored on client, passed in \"vers\" parameter to carrier.",
          "type": "integer",
          "format": "int32"
        },
        "entitlementVersion": {
          "description": "Entitlement specification version, passed in \"entitlement_version\" parameter to carrier.",
          "type": "string"
        },
        "authenticationToken": {
          "description": "Token received after performing EAP-AKA, passed in \"token\" parameter to carrier for Odsa operations.",
          "type": "string"
        },
        "temporaryToken": {
          "description": "Used to perform Odsa operations, passed in \"temporary_token\" parameter to carrier.",
          "type": "string"
        },
        "terminalId": {
          "description": "Terminal Id contains unique identifiers of device like terminal Id, passed in \"terminal_id\" parameter to carrier.",
          "type": "string"
        },
        "terminalVendor": {
          "description": "OEM of the device, passed in \"terminal_vendor\" parameter to carrier.",
          "type": "string"
        },
        "terminalModel": {
          "description": "Model of the device, passed in \"terminal_model\" parameter to carrier.",
          "type": "string"
        },
        "terminalSoftwareVersion": {
          "description": "Software version of the device, passed in \"terminal_sw_version\" parameter to carrier.",
          "type": "string"
        },
        "appName": {
          "description": "Name of device application making the request, passed in \"app_name\" parameter to carrier.",
          "type": "string"
        },
        "appVersion": {
          "description": "Version of the device application making the request, passed in \"app_version\" parameter to carrier.",
          "type": "string"
        },
        "notificationToken": {
          "description": "FCM token used to register for entitlement configuration request, passed in \"notification_token\" parameter to carrier.",
          "type": "string"
        },
        "notificationAction": {
          "description": "Action associated with FCM registration token, passed in \"notif_token\" parameter to carrier.",
          "type": "integer",
          "format": "int32"
        },
        "acceptContentType": {
          "description": "Content type C11n client module can accept to process the response.",
          "type": "string"
        },
        "boostType": {
          "description": "Boost type for premium network slice entitlement.",
          "type": "string"
        },
        "gid1": {
          "description": "GID1 of the SIM, passed in \"gid1\" parameter to carrier.",
          "type": "string"
        }
      }
    },
    "OdsaOperation": {
      "id": "OdsaOperation",
      "description": "Passed by android client to entitlement library for performing GetPhoneNumber. This is sent to C11n android client module by server as part of Sync response cs/third_party/java_src/service_entitlement/java/com/android/libraries/entitlement/EsimOdsaOperation.java",
      "type": "object",
      "properties": {
        "operation": {
          "description": "Odsa operation to be performed, passed in \"operation\" parameter to carrier.",
          "type": "string"
        },
        "operationType": {
          "description": "Operation type to performed, passed in \"operation_type\" parameter to carrier.",
          "type": "integer",
          "format": "int32"
        },
        "operationTargets": {
          "description": "Operation targets to be performed after obtaining the temporary token, passed in \"operation_targets\" parameter to carrier.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "companionTerminalId": {
          "description": "Unique identifier of the device like IMEI, passed in \"companion_terminal_id\" parameter to carrier.",
          "type": "string"
        },
        "companionTerminalVendor": {
          "description": "OEM of the companion device, passed in \"companion_terminal_vendor\" parameter to carrier.",
          "type": "string"
        },
        "companionTerminalModel": {
          "description": "Model of the companion device, passed in \"companion_terminal_model\" parameter to carrier.",
          "type": "string"
        },
        "companionTerminalSoftwareVersion": {
          "description": "Software version of the companion device, passed in \"companion_terminal_sw_version\" parameter to carrier.",
          "type": "string"
        },
        "companionTerminalFriendlyName": {
          "description": "User friend version of the companion device, passed in \"companion_terminal_friendly_name\" parameter to carrier.",
          "type": "string"
        },
        "companionTerminalService": {
          "description": "Service type of the companion device, passed in \"companion_terminal_service\" parameter to carrier.",
          "type": "string"
        },
        "companionTerminalIccid": {
          "description": "ICCID of the companion device, passed in \"companion_terminal_iccid\" parameter to carrier.",
          "type": "string"
        },
        "companionTerminalEid": {
          "description": "Eid of the companion device, passed in \"companion_terminal_eid\" parameter to carrier.",
          "type": "string"
        },
        "terminalIccid": {
          "description": "ICCID of the primary device, passed in \"terminal_iccid\" parameter to carrier.",
          "type": "string"
        },
        "terminalEid": {
          "description": "eUICC identifier of the primary device, passed in \"terminal_eid\" parameter to carrier.",
          "type": "string"
        },
        "targetTerminalId": {
          "description": "Unique identifier of the primary device like IMEI, passed in \"target_terminal_id\" parameter to carrier.",
          "type": "string"
        },
        "targetTerminalIds": {
          "description": "Unique identifiers of the primary device like IMEI for dual sim devices, passed in \"target_terminal_imeis\" parameter to carrier.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "targetTerminalIccid": {
          "description": "ICCID of the device, passed in \"target_terminal_iccid\" parameter to carrier.",
          "type": "string"
        },
        "targetTerminalEid": {
          "description": "eUICC identifier of the device, passed in \"target_terminal_eid\" parameter to carrier.",
          "type": "string"
        },
        "targetTerminalSerialNumber": {
          "description": "Serial number of the device, passed in \"target_terminal_sn\" parameter to carrier.",
          "type": "string"
        },
        "targetTerminalModel": {
          "description": "Model of the device, passed in \"target_terminal_model\" parameter to carrier.",
          "type": "string"
        },
        "oldTerminalId": {
          "description": "Old device Terminal Id, passed in \"old_terminal_id\" parameter to carrier.",
          "type": "string"
        },
        "oldTerminalIccid": {
          "description": "Old device ICCID, passed in \"old_terminal_iccid\" parameter to carrier.",
          "type": "string"
        }
      }
    },
    "RegisteredSMSChallenge": {
      "id": "RegisteredSMSChallenge",
      "description": "Registered SMS Challenge. Challenges client to provide message id of SMS from registered google senders (go/c11n-a2p-design).",
      "type": "object",
      "properties": {
        "verifiedSenders": {
          "description": "List of verified SMS senders from which client needs to lookup messages.",
          "type": "array",
          "items": {
            "$ref": "PhoneNumberID"
          }
        }
      }
    },
    "PhoneNumberID": {
      "id": "PhoneNumberID",
      "description": "Information used to identify a sender or receiver phone number.",
      "type": "object",
      "properties": {
        "phoneNumberId": {
          "description": "(Required) phone_number_id is the phone number party that participated in the message send or receipt, hashed using SHA-2 algorithm.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "FlashCallChallenge": {
      "id": "FlashCallChallenge",
      "description": "FlashCall Challenge",
      "type": "object",
      "properties": {
        "phoneRanges": {
          "description": "PhoneRanges to be used for the flash call verification",
          "type": "array",
          "items": {
            "$ref": "PhoneRange"
          }
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Beginning of the verification, the client hasn't started to intercept calls",
            "The client is ready to intercept calls",
            "The client has verified all the received calls",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "PREPARING",
            "VERIFYING",
            "VERIFIED",
            "FAILED"
          ]
        },
        "previousChallengeIds": {
          "description": "ID of the previous pending verifications (or challenges) given by the server, this is used to refer to the pending verification in process.",
          "type": "array",
          "items": {
            "$ref": "ChallengeID"
          }
        },
        "previousChallengeResponses": {
          "description": "Responses of each challenge made during the flash call flow, used in combination with the previous_challenge_ids to verify the user's device has received and verified all the required phone calls.",
          "type": "array",
          "items": {
            "$ref": "ChallengeResponse"
          }
        },
        "millisBetweenInterceptions": {
          "description": "Milliseconds to wait before requesting next phone call interception. Must always be at least 10 seconds, because that is the delay from the platform API to intercept phone calls. To check how the delay is managed on platform's side go/platform-api-hangup-delay.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ChallengeResponse": {
      "id": "ChallengeResponse",
      "description": "Challenge response.",
      "type": "object",
      "properties": {
        "mtResponse": {
          "description": "Response to MT Challenge",
          "$ref": "MTChallengeResponse"
        },
        "carrierIdResponse": {
          "description": "Response to Carrier ID Challenge",
          "$ref": "CarrierIDChallengeResponse"
        },
        "moResponse": {
          "description": "Response to MO Challenge",
          "$ref": "MOChallengeResponse"
        },
        "registeredSmsResponse": {
          "description": "Response to Registered SMS Challenge",
          "$ref": "RegisteredSMSChallengeResponse"
        },
        "flashCallResponse": {
          "description": "Response to FlashCall Challenge",
          "$ref": "FlashCallChallengeResponse"
        },
        "ts43ChallengeResponse": {
          "description": "Response to Ts43 Challenge",
          "$ref": "Ts43ChallengeResponse"
        }
      }
    },
    "MTChallengeResponse": {
      "id": "MTChallengeResponse",
      "description": "Response to MT challenge.",
      "type": "object",
      "properties": {
        "sms": {
          "description": "The sms that the client received. This can be empty when the client didn't receive anything and still informs us about the failure (basically meaning that our hint phone number was wrong). The server would attempt a new verification method in this case, when available.",
          "type": "string"
        },
        "sender": {
          "description": "The sender phone number of this SMS. Can be empty when the sms is empty. This info helps MGW team track grey route issues.",
          "type": "string"
        }
      }
    },
    "CarrierIDChallengeResponse": {
      "id": "CarrierIDChallengeResponse",
      "description": "Response to Carrier Id challenge.",
      "type": "object",
      "properties": {
        "isimResponse": {
          "description": "ISIM Response from the Carrier ID module on the client. http://www.arib.or.jp/IMT-2000/V740Dec09/5_Appendix/Rel5/31/31103-5d1.pdf (Required)",
          "type": "string"
        },
        "carrierIdError": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "NO_ERROR",
            "NOT_SUPPORTED",
            "RETRY_ATTEMPT_EXCEEDED",
            "NULL_RESPONSE",
            "REFLECTION_ERROR",
            "NO_SIM",
            "UNABLE_TO_READ_SUBSCRIPTION",
            "UNKNOWN_ERROR",
            "ENTITLEMENT_SERVER_ERROR",
            "JSON_PARSE_ERROR",
            "INTERNAL_ERROR",
            "INVALID_ARGUMENT"
          ]
        },
        "challengeType": {
          "deprecated": true,
          "type": "string",
          "enumDescriptions": [
            "",
            "Client only solution with no Google to carrier server communication. Design: go/ts43-jio-hld-v2."
          ],
          "enum": [
            "CHALLENGE_METHOD_UNSPECIFIED",
            "TS43_CLIENT"
          ]
        },
        "ts43ClientChallengeResponse": {
          "deprecated": true,
          "$ref": "TS43ClientChallengeResponse"
        },
        "gtafVerificationMethod": {
          "description": "Indicates the requested GTAF verification method for phone number verification",
          "type": "string",
          "enumDescriptions": [
            "Method not set by client",
            "Using carrier id ts43 eap-aka verification",
            "Legacy server to server carrier id flow",
            "Using carrier ID TS.43 for UPI"
          ],
          "enum": [
            "METHOD_UNKNOWN",
            "METHOD_CARRIER_ID_TS43",
            "METHOD_CARRIER_ID_LEGACY",
            "METHOD_CARRIER_ID_TS43_UPI"
          ]
        },
        "carrierIdChallengePreference": {
          "description": "Carrier ID challenge preference passed to GTAF",
          "$ref": "CarrierIDChallengePreference"
        }
      }
    },
    "TS43ClientChallengeResponse": {
      "id": "TS43ClientChallengeResponse",
      "description": "TS43 Client Challenge Response",
      "type": "object",
      "properties": {
        "encryptedDek": {
          "deprecated": true,
          "type": "string"
        },
        "encryptedCipher": {
          "description": "Encrypted cipher (contains session-id, IMSI, MSISDN)",
          "deprecated": true,
          "type": "string"
        },
        "errorMessage": {
          "description": "TS43 error message returned by client.",
          "deprecated": true,
          "type": "string"
        },
        "payload": {
          "description": "Payload containing phone number.",
          "type": "string"
        }
      }
    },
    "MOChallengeResponse": {
      "id": "MOChallengeResponse",
      "type": "object",
      "properties": {
        "status": {
          "description": "MO challenge status.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_STATUS",
            "COMPLETED",
            "FAILED_TO_SEND_MO",
            "NO_ACTIVE_SUBSCRIPTION",
            "NO_SMS_MANAGER"
          ]
        },
        "smsResultCode": {
          "description": "Result code of the sms send status.",
          "type": "string",
          "format": "int64"
        },
        "smsErrorCode": {
          "description": "Error code if the sms send fails due to a generic error.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RegisteredSMSChallengeResponse": {
      "id": "RegisteredSMSChallengeResponse",
      "description": "Response to Registered SMS challenge.",
      "type": "object",
      "properties": {
        "messageIds": {
          "description": "A list of all sms received from verified senders, encoded in MessageID with necessary metadata.",
          "type": "array",
          "items": {
            "$ref": "MessageID"
          }
        }
      }
    },
    "MessageID": {
      "id": "MessageID",
      "description": "MessageID contains relevant data to define a SMS message.",
      "type": "object",
      "properties": {
        "messageHash": {
          "description": "message_encodings contains all the different message hashes used to identify a message. (Required)",
          "$ref": "MessageHash"
        }
      }
    },
    "MessageHash": {
      "id": "MessageHash",
      "description": "MessageHash corresponds to the client-side hash encoding the SMS message from a verified, registered sender.",
      "type": "object",
      "properties": {
        "hashedMessage": {
          "description": "Encoded message, which contains a combination of hashed receiver id, hashed sender id, timestamp downsampled, and message contents.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "FlashCallChallengeResponse": {
      "id": "FlashCallChallengeResponse",
      "description": "Response to FlashCall challenge.",
      "type": "object",
      "properties": {
        "caller": {
          "description": "The phone number of the caller of the flash call Example: +15413010167",
          "type": "string"
        },
        "error": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "NO_ERROR",
            "UNSPECIFIED",
            "TIMED_OUT",
            "NETWORK_NOT_AVAILABLE",
            "TOO_MANY_CALLS",
            "CONCURRENT_REQUESTS",
            "IN_ECBM",
            "IN_EMERGENCY_CALL",
            "PRECONDITIONS_FAILED",
            "API_NOT_AVAILABLE",
            "ERROR_PREVIOUS_INCOMING_CALL",
            "STATE_NOT_PREPARING",
            "STATE_NOT_VERIFYING",
            "ERROR_PENDING_VERIFICATION",
            "PROCEED_FAILED",
            "INTERCEPTION_FAILED"
          ]
        }
      }
    },
    "Ts43ChallengeResponse": {
      "id": "Ts43ChallengeResponse",
      "description": "Client response Ts43 Challenge.",
      "type": "object",
      "properties": {
        "ts43Type": {
          "description": "Ts43 route information.",
          "$ref": "Ts43Type"
        },
        "clientChallengeResponse": {
          "description": "Client based Ts43 challenge response.",
          "$ref": "ClientChallengeResponse"
        },
        "serverChallengeResponse": {
          "description": "Server based Ts43 challenge response.",
          "$ref": "ServerChallengeResponse"
        },
        "error": {
          "description": "Error observed while performing Ts43 Verification.",
          "$ref": "Error"
        },
        "httpHistory": {
          "description": "HTTP history of the TS43 challenge. This will only be set for devices during test or initial ramp phase for debugging. cs/symbol:com.android.libraries.entitlement.http.HttpRequest",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Ts43Type": {
      "id": "Ts43Type",
      "type": "object",
      "properties": {
        "integrator": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "TS43_INTEGRATOR_UNSPECIFIED",
            "JIO",
            "TELUS",
            "ERICSSON",
            "HPE",
            "TMO",
            "TMO_SERVER",
            "TELENOR",
            "RCS_CIS_PROXY",
            "MOBI_US",
            "SFR",
            "SASKTEL_CANADA",
            "MOTIVE",
            "DT",
            "DT_SERVER",
            "GLIDE",
            "GLIDE_GETPHONENUMBER",
            "NETLYNC",
            "ORANGE_FRANCE",
            "AMDOCS",
            "IPIFICATION"
          ]
        },
        "rcsRouteInfo": {
          "$ref": "RcsRouteInfo"
        }
      }
    },
    "RcsRouteInfo": {
      "id": "RcsRouteInfo",
      "type": "object",
      "properties": {
        "rcsCarrierId": {
          "description": "RCS Carrier ID e.g. rcs5.googleprod.com/carrier/tmo-us.",
          "type": "string"
        },
        "rcsOverrideTagSet": {
          "$ref": "OverrideTagSet"
        }
      }
    },
    "OverrideTagSet": {
      "id": "OverrideTagSet",
      "description": "Set of tags used for carrier configuration overrides (go/rcs-carrier-config#overrides). Must not contain PII. LINT.IfChange",
      "type": "object",
      "properties": {
        "tag": {
          "description": "Zero or more tags. Note: Each tag must be a nonempty string that matches regex pattern \"A-Za-z*\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ClientChallengeResponse": {
      "id": "ClientChallengeResponse",
      "description": "Challenge response to client based Ts43.",
      "type": "object",
      "properties": {
        "payload": {
          "deprecated": true,
          "type": "string"
        },
        "getPhoneNumberResponse": {
          "description": "Response received from GetPhoneNumber ODSA.",
          "type": "string"
        }
      }
    },
    "ServerChallengeResponse": {
      "id": "ServerChallengeResponse",
      "description": "Challenge response to server based Ts43.",
      "type": "object",
      "properties": {
        "temporaryToken": {
          "deprecated": true,
          "type": "string"
        },
        "acquireTemporaryTokenResponse": {
          "description": "Response received from AcquireTemporaryToken response.",
          "type": "string"
        }
      }
    },
    "Error": {
      "id": "Error",
      "description": "Error observed while performing Ts43 Verification.",
      "type": "object",
      "properties": {
        "errorType": {
          "description": "Error observed while performing Ts43 Verification.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "VERIFICATION_ERROR_TYPE_UNSPECIFIED",
            "NOT_SUPPORTED",
            "CHALLENGE_NOT_SET",
            "INTERNAL_ERROR",
            "RUNTIME_ERROR",
            "JSON_PARSE_ERROR"
          ]
        },
        "serviceEntitlementError": {
          "description": "Error observed at ServiceEntitlement library.",
          "$ref": "ServiceEntitlementError"
        }
      }
    },
    "ServiceEntitlementError": {
      "id": "ServiceEntitlementError",
      "description": "Error received from service entitlement library.",
      "type": "object",
      "properties": {
        "errorCode": {
          "description": "cs/symbol:com.android.libraries.entitlement.ServiceEntitlementException.mErrorCode",
          "type": "integer",
          "format": "int32"
        },
        "httpStatus": {
          "description": "cs/symbol:com.android.libraries.entitlement.ServiceEntitlementException.mHttpStatus",
          "type": "integer",
          "format": "int32"
        },
        "api": {
          "description": "Api failed on the client.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "Telephony API that does EAP-AKA and calls AcquireTemporaryToken."
          ],
          "enum": [
            "API_UNSPECIFIED",
            "API_EAP_AKA",
            "API_GET_PHONE_NUMBER",
            "API_ACQUIRE_TEMPORARY_TOKEN",
            "API_REQUEST_RAW_RESPONSE_FOR_GET_PHONE_NUMBER"
          ]
        }
      }
    },
    "Ts43Challenge": {
      "id": "Ts43Challenge",
      "description": "TS43 Challenge. LINT.IfChange",
      "type": "object",
      "properties": {
        "ts43Type": {
          "description": "Ts43 route information.",
          "$ref": "Ts43Type"
        },
        "entitlementUrl": {
          "description": "Entitlement server URL to perform Ts43 verification.",
          "type": "string"
        },
        "eapAkaRealm": {
          "description": "EAP-AKA Realm of the TS43 verification.",
          "type": "string"
        },
        "appId": {
          "description": "Application Id to perform Ts43 verification.",
          "type": "string"
        },
        "serviceEntitlementRequest": {
          "description": "ServiceEntitlementRequest to the entitlement library.",
          "$ref": "ServiceEntitlementRequest"
        },
        "clientChallenge": {
          "description": "Client based Ts43 challenge to be performed by client.",
          "$ref": "ClientChallenge"
        },
        "serverChallenge": {
          "description": "Server based Ts43 challenge to be performed by client.",
          "$ref": "ServerChallenge"
        }
      }
    },
    "ClientChallenge": {
      "id": "ClientChallenge",
      "description": "Challenge to be performed based on client TS.43 specification.",
      "type": "object",
      "properties": {
        "getPhoneNumberOperation": {
          "description": "GetPhoneNumber operation to be performed by client.",
          "$ref": "OdsaOperation"
        }
      }
    },
    "ServerChallenge": {
      "id": "ServerChallenge",
      "description": "Challenge to be performed based on server TS.43 specification.",
      "type": "object",
      "properties": {
        "acquireTemporaryTokenOperation": {
          "description": "AcquireTemporary token operation to be performed by client.",
          "$ref": "OdsaOperation"
        }
      }
    },
    "UnverifiedInfo": {
      "id": "UnverifiedInfo",
      "description": "Unverified verification information",
      "type": "object",
      "properties": {
        "reason": {
          "description": "Reason for an unverified verification",
          "type": "string",
          "enumDescriptions": [
            "",
            "Verification was throttled and not attempted. Set exclusively when the verification quota is reached.",
            "The verification attempt failed",
            "Errors other than throttling prevented verification",
            "Verification not required",
            "Phone number entry from the calling app required",
            "The SIM is considered ineligible for RCS use cases.",
            "Set when the device is blocked due to product reasons, like abuse protections.",
            "The SIM was not in service so verification was blocked"
          ],
          "enum": [
            "UNKNOWN_REASON",
            "THROTTLED",
            "FAILED",
            "SKIPPED",
            "NOT_REQUIRED",
            "PHONE_NUMBER_ENTRY_REQUIRED",
            "INELIGIBLE",
            "DENIED",
            "NOT_IN_SERVICE"
          ]
        },
        "retryAfterTime": {
          "description": "Retry after time in case the verification is throttled",
          "$ref": "ServerTimestamp"
        },
        "challengeMethod": {
          "description": "Challenge method for a failed verification",
          "type": "string",
          "enumDescriptions": [
            "UNKNOWN is treated as nil method.",
            "Challenge by MO SMS. (go/mobile-originated)",
            "Challenge by MT SMS. (go/mobile-terminated)",
            "Challenge by carrier id (GTAF).",
            "Imsi lookup performed through GTAF",
            "Challenge issued to do a RegisteredSMS Verification.",
            "Challenge by FlashCall (go/c11n-design-flash-call-auth).",
            "Challenge by TS.43 (go/c11n-ts43-design)"
          ],
          "enum": [
            "UNKNOWN",
            "MO_SMS",
            "MT_SMS",
            "CARRIER_ID",
            "IMSI_LOOKUP",
            "REGISTERED_SMS",
            "FLASH_CALL",
            "TS43"
          ]
        }
      }
    },
    "SyncResponse": {
      "id": "SyncResponse",
      "description": "SyncResponse is the response to sync",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "ResponseHeader"
        },
        "responses": {
          "description": "The server's state of all verifications in Request. It can be a verification status or an error. (Non empty)",
          "type": "array",
          "items": {
            "$ref": "VerificationResponse"
          }
        },
        "nextSyncTime": {
          "description": "Time till by when the client needs to sync again. (Required)",
          "$ref": "ServerTimestamp"
        },
        "droidguardTokenResponse": {
          "description": "droidguard response",
          "$ref": "DroidGuardTokenResponse"
        },
        "verificationTokens": {
          "description": "Verification tokens used in the backup and restore flow for verifying a new device that was phone number verified in the past http://goto.google.com/c11n-br-acquisition",
          "type": "array",
          "items": {
            "$ref": "VerificationToken"
          }
        }
      }
    },
    "VerificationResponse": {
      "id": "VerificationResponse",
      "description": "VerificationResponse in SyncResponse",
      "type": "object",
      "properties": {
        "verification": {
          "description": "The server's state of a verification in Request - which can be: - Pending (upon challenge), - Verified (if still good, or verified without challenge) - None (if can't be verified, or error). (Required)",
          "$ref": "Verification"
        },
        "error": {
          "description": "Error encountered during completing this specific verification. If there was a more general error for this overall request itself, then we will return an RPC error. But since we are doing batch requests here we allow other independent requests to succeed even when some have errors.",
          "$ref": "StatusProto"
        }
      }
    },
    "StatusProto": {
      "id": "StatusProto",
      "description": "Wire-format for a Status object",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numeric code drawn from the space specified below. Often, this is the canonical error space, and code is drawn from google3/util/task/codes.proto copybara:strip_begin(b/383363683) copybara:strip_end_and_replace optional int32 code = 1;",
          "type": "integer",
          "format": "int32"
        },
        "space": {
          "description": "copybara:strip_begin(b/383363683) Space to which this status belongs copybara:strip_end_and_replace optional string space = 2; // Space to which this status belongs",
          "type": "string"
        },
        "message": {
          "description": "Detail message copybara:strip_begin(b/383363683) copybara:strip_end_and_replace optional string message = 3;",
          "type": "string"
        },
        "canonicalCode": {
          "description": "copybara:strip_begin(b/383363683) copybara:strip_end_and_replace optional int32 canonical_code = 6;",
          "type": "integer",
          "format": "int32"
        },
        "messageSet": {
          "description": "message_set associates an arbitrary proto message with the status. copybara:strip_begin(b/383363683) copybara:strip_end_and_replace optional proto2.bridge.MessageSet message_set = 5;",
          "$ref": "MessageSet"
        }
      }
    },
    "MessageSet": {
      "id": "MessageSet",
      "deprecated": true,
      "description": "This is proto2's version of MessageSet. DEPRECATED: DO NOT USE FOR NEW FIELDS. If you are using editions or proto2, please make your own extendable messages for your use case. If you are using proto3, please use `Any` instead. MessageSet was the implementation of extensions for proto1. When proto2 was introduced, extensions were implemented as a first-class feature. This schema for MessageSet was meant to be a \"bridge\" solution to migrate MessageSet-bearing messages from proto1 to proto2. This schema has been open-sourced only to facilitate the migration of Google products with MessageSet-bearing messages to open-source environments.",
      "type": "object",
      "properties": {}
    },
    "ProceedRequest": {
      "id": "ProceedRequest",
      "description": "ProceedRequest is the request to proceed",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "RequestHeader"
        },
        "verification": {
          "description": "Pending Verification to proceed. (Required)",
          "$ref": "Verification"
        },
        "challengeResponse": {
          "description": "Client's response to the challenge. (Required for MT and CARRIER_ID)",
          "$ref": "ChallengeResponse"
        }
      }
    },
    "ProceedResponse": {
      "id": "ProceedResponse",
      "description": "ProceedResponse is the response to proceed",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "ResponseHeader"
        },
        "verification": {
          "description": "The new verification for the client. It can be Verified (on success), None (on failure), or still Pending (on retriable errors). (Required)",
          "$ref": "Verification"
        },
        "nextSyncTime": {
          "description": "Time till by when the client needs to sync again. (Required)",
          "$ref": "ServerTimestamp"
        },
        "droidguardTokenResponse": {
          "description": "droidguard response",
          "$ref": "DroidGuardTokenResponse"
        }
      }
    },
    "GetMessageOverridesRequest": {
      "id": "GetMessageOverridesRequest",
      "description": "Request to get strings for the settings UI.",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "RequestHeader"
        }
      }
    },
    "GetMessageOverridesResponse": {
      "id": "GetMessageOverridesResponse",
      "description": "Response containing all strings for the settings UI.",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "ResponseHeader"
        },
        "categoryTitle": {
          "description": "Title for the phone number category.",
          "type": "string"
        },
        "noConsentPhoneNumberLabel": {
          "description": "Title and summary for the phone number button when the user has not given consent.",
          "$ref": "MessageOverride"
        },
        "consentedPhoneNumberLabel": {
          "description": "Title and summary for the phone number button when the user has given consent but phone number is NOT verified.",
          "$ref": "MessageOverride"
        },
        "consentActionLabel": {
          "description": "Title and summary for the consent change button.",
          "$ref": "MessageOverride"
        },
        "hideConsentActionButtonIfNoConsent": {
          "description": "Set to true if the consent action button should be hidden if there is no consent.",
          "type": "boolean"
        },
        "consentDialogTitle": {
          "description": "Title for the dialog with all the consent options (may contain a link in tags).",
          "type": "string"
        },
        "consentDialogTitleLink": {
          "description": "The link in the tags above.",
          "type": "string"
        },
        "automaticConsent": {
          "description": "Title and subtitles for automatic consent.",
          "$ref": "MessageOverride"
        },
        "manualConsent": {
          "description": "Title and subtitles for manual consent.",
          "$ref": "MessageOverride"
        },
        "noConsent": {
          "description": "Title and subtitles for no consent.",
          "$ref": "MessageOverride"
        },
        "gaiaLabel": {
          "description": "Title and summary for the button to go to google.com/account page. NOTE: the subtitle is the only string displayed according to the mocks.",
          "$ref": "MessageOverride"
        },
        "gaiaLink": {
          "description": "The link for google account settings, which is a part of gaia_label.",
          "type": "string"
        },
        "learnMoreLink": {
          "description": "Link for the learn more button in the overflow menu.",
          "type": "string"
        },
        "learnMoreTitle": {
          "description": "Title for the learn more button in overflow menu",
          "type": "string"
        },
        "consentSettingsUi": {
          "description": "string resources for the device-level Phone Number Verification consent settings UI",
          "$ref": "ConsentSettingsUI"
        }
      }
    },
    "MessageOverride": {
      "id": "MessageOverride",
      "description": "Pair of strings to override the title and the subtitle in the settings UI for various buttons and options.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the button.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the button.",
          "type": "string"
        }
      }
    },
    "ConsentSettingsUI": {
      "id": "ConsentSettingsUI",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title for the device-level Phone Number Verification consent settings UI",
          "type": "string"
        },
        "bodyText": {
          "description": "Body text for the device-level Phone Number Verification consent settings UI",
          "type": "string"
        },
        "toggleLabel": {
          "description": "Label for the device-level Phone Number Verification consent toggle",
          "type": "string"
        },
        "infoText": {
          "description": "Info text for the device-level Phone Number Verification consent toggle on",
          "type": "string"
        },
        "footerText": {
          "description": "Footer text for the device-level Phone Number Verification consent settings UI",
          "type": "string"
        },
        "learnMoreText": {
          "description": "Learn more link for the device-level Phone Number Verification consent settings UI",
          "type": "string"
        },
        "learnMoreLink": {
          "description": "Link for the learn more button on the device-level Phone Number Verification consent settings UI",
          "type": "string"
        },
        "bodyTextResourceId": {
          "description": "Translation Console resource ID for the body text. Used for ARI PVaaS M1 ARI design doc - go/pvaas-ari-integration PVaaS M1 client design doc - go/pi-consent-setting-ui-design",
          "type": "string",
          "format": "int64"
        },
        "infoTextResourceId": {
          "description": "Translation Console resource ID for the info text. Used for ARI PVaaS M1 ARI design doc - go/pvaas-ari-integration PVaaS M1 client design doc - go/pi-consent-setting-ui-design",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetVerifiedPhoneNumbersRequest": {
      "id": "GetVerifiedPhoneNumbersRequest",
      "description": "Request message for GetVerifiedPhoneNumbers RPC.",
      "type": "object",
      "properties": {
        "sessionId": {
          "description": "Client assigned ID to uniquely identify the request.",
          "type": "string"
        },
        "iidTokenAuth": {
          "description": "Authentication materials that identifies the device whose phone numbers are to be retrieved.",
          "$ref": "IIDTokenAuth"
        },
        "phoneNumberSelections": {
          "description": "Selection of phone number verification source to include. If not specified the default is [CONSTELLATION].",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "",
              "Include Constellation verified phone numbers.",
              "Include RCS verified phone numbers. Note accessing to this option needs to be allowlisted. Contact the Phone Identity team to be added to the allow list. Non-allowlisted requests will receive INVALID_ARGUMENT errors."
            ],
            "enum": [
              "SELECTION_UNSPECIFIED",
              "CONSTELLATION",
              "RCS"
            ]
          }
        },
        "tokenOption": {
          "description": "Optional parameters for ID token generation. If unspecified ID token would be unset in the response.",
          "$ref": "TokenOption"
        },
        "droidguardResult": {
          "description": "DroidGuard result from the client, with the following specification: flow name: \"constellation_verify\" content bindings: iidHash: base64 encoded, sha-256 of the device iid token. rpc: name of the RPC. E.g., \"/PhoneNumber.GetVerifiedPhoneNumbers\".",
          "type": "string"
        },
        "consistencyOption": {
          "description": "Consistency option for database reads. If unspecified, STALE is used as the default for this request.",
          "$ref": "ConsistencyOption"
        },
        "requestInfo": {
          "description": "Optional. Metadata to help distinguish requests from different clients for analytics purposes.",
          "$ref": "RequestInfo"
        }
      }
    },
    "IIDTokenAuth": {
      "id": "IIDTokenAuth",
      "description": "IID token based authentication material for the requesting device.",
      "type": "object",
      "properties": {
        "iidToken": {
          "description": "Required. GCM IID token for Android devices. This token can be retrieved by calling Constellation's GMSCore API getIidToken(). See go/c11n-design-getIIDToken",
          "type": "string"
        },
        "clientSign": {
          "description": "ECDSA signature of a SHA256 hash of \"iid_token:sign_timestamp.seconds:sign_timestamp.nanos\" made by the Constellation GMSCore module's private key. The signature is included in the response of the GMSCore API getIidToken(). For server side integrations, client_sign can be waived from the request on an allowlist basis. Contact the Phone Identity team if your use cases need to be allowlisted.",
          "type": "string",
          "format": "byte"
        },
        "signTimestamp": {
          "description": "Client Timestamp used in the sign, to prevent against reply attacks. This timestamp is included in the response of the GMSCore API getIidToken(). If client_sign is waived by the allowlist, so is this field.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "TokenOption": {
      "id": "TokenOption",
      "description": "Option for generating the ID token of a verified phone number. See go/constellation-idtoken",
      "type": "object",
      "properties": {
        "certificateHash": {
          "description": "Required. A first-party or third-party Android app needs to be first registered in cloud console and then use the certificate SHA-1 hash. This field is expected to be a Base64 encoded string, e.g. “IUW99pi4cVA5vQ6D8gab7UNawhw=”",
          "type": "string"
        },
        "packageName": {
          "description": "Required. PackageName is the package name defined by Google Play Store, which is a reverse dns style. (e.g. \"com.google.android.apps.myexample\")",
          "type": "string"
        },
        "tokenNonce": {
          "description": "This allows security against replay attacks, as the server generated nonce would be different for different clients",
          "type": "string"
        }
      }
    },
    "ConsistencyOption": {
      "id": "ConsistencyOption",
      "description": "ConsistencyOption specifies data consistency requirements for RPC requests.",
      "type": "object",
      "properties": {
        "consistency": {
          "type": "string",
          "enumDescriptions": [
            "The client does not specify a consistency requirement. It is the server's discretion to choose either a STALE or STRONG option.",
            "Use a pre-defined staleness for database reads for optimal latency. The pre-defined staleness is currently one minute, but the server reserves the right to change it in the future to tune the performance. Clients are encouraged to choose this option whenever possible for better performance.",
            "Read the latest possible data. This option is more expensive and typically comes with higher latencies."
          ],
          "enum": [
            "CONSISTENCY_UNSPECIFIED",
            "STALE",
            "STRONG"
          ]
        }
      }
    },
    "RequestInfo": {
      "id": "RequestInfo",
      "description": "Request metadata.",
      "type": "object",
      "properties": {
        "policyId": {
          "description": "Constellation policy id of the legacy API request that is being proxied by GMSCore.",
          "type": "string"
        }
      }
    },
    "GetVerifiedPhoneNumbersResponse": {
      "id": "GetVerifiedPhoneNumbersResponse",
      "description": "Response message for GetVerifiedPhoneNumbers RPC.",
      "type": "object",
      "properties": {
        "sessionId": {
          "description": "The same session_id from the RPC request.",
          "type": "string"
        },
        "phoneNumbers": {
          "description": "Verified phone numbers for the device.",
          "type": "array",
          "items": {
            "$ref": "VerifiedPhoneNumber"
          }
        }
      }
    },
    "VerifiedPhoneNumber": {
      "id": "VerifiedPhoneNumber",
      "description": "A phone number verified by Phone Identity.",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "description": "Phone number, in E.164 format.",
          "type": "string"
        },
        "verificationTime": {
          "description": "Time when the phone number is verified.",
          "type": "string",
          "format": "google-datetime"
        },
        "idToken": {
          "description": "ID token for this phone number record. See go/constellation-idtoken",
          "type": "string"
        },
        "rcsState": {
          "description": "RCS state of the phone number.",
          "type": "string",
          "enumDescriptions": [
            "",
            "The phone number is active on RCS."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE"
          ]
        }
      }
    },
    "SendMessageRequest": {
      "id": "SendMessageRequest",
      "description": "Request message for SendMessage RPC.",
      "type": "object",
      "properties": {
        "sender": {
          "description": "(Required) Identifier of the sender.",
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "PHONE_VERIFIER_GOOGLE"
          ]
        },
        "messageId": {
          "description": "(Required) Sender assigned ID to uniquely identify the message from the same sender.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "(Required) Target phone number for the message in E.164 format.",
          "type": "string"
        },
        "message": {
          "description": "(Required) The message to be sent.",
          "$ref": "ConstellationMessage"
        }
      }
    },
    "ConstellationMessage": {
      "id": "ConstellationMessage",
      "description": "ConstellationMessage is a C11n OTT message.",
      "type": "object",
      "properties": {
        "senderDisplayName": {
          "description": "The display name of the sender.",
          "type": "string"
        },
        "text": {
          "$ref": "TextMessage"
        }
      }
    },
    "TextMessage": {
      "id": "TextMessage",
      "description": "TextMessage is a plain text type of ConstellationMessage.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The exact text of the message.",
          "type": "string"
        }
      }
    },
    "SendMessageResponse": {
      "id": "SendMessageResponse",
      "description": "Response message for SendMessage RPC.",
      "type": "object",
      "properties": {}
    },
    "ReceiveMessageRequest": {
      "id": "ReceiveMessageRequest",
      "description": "Request message for ReceiveMessage RPC.",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "RequestHeader"
        },
        "sender": {
          "description": "(Required)",
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "PHONE_VERIFIER_GOOGLE"
          ]
        },
        "messageId": {
          "description": "(Required)",
          "type": "string"
        },
        "imsis": {
          "description": "IMSIs that are present on the device",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReceiveMessageResponse": {
      "id": "ReceiveMessageResponse",
      "description": "Response message for ReceiveMessage RPC.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The message.",
          "$ref": "ConstellationMessage"
        },
        "sentTime": {
          "description": "Timestamp when the message was sent.",
          "type": "string",
          "format": "google-datetime"
        },
        "imsi": {
          "description": "IMSI of the SIM where the phone number is present",
          "type": "string"
        }
      }
    },
    "RevokeMessageRequest": {
      "id": "RevokeMessageRequest",
      "description": "Request message for RevokeMessage RPC.",
      "type": "object",
      "properties": {
        "sender": {
          "description": "(Required)",
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "PHONE_VERIFIER_GOOGLE"
          ]
        },
        "messageId": {
          "description": "(Required)",
          "type": "string"
        }
      }
    },
    "RevokeMessageResponse": {
      "id": "RevokeMessageResponse",
      "description": "Response message for RevokeMessage RPC.",
      "type": "object",
      "properties": {}
    },
    "AckMessageRequest": {
      "id": "AckMessageRequest",
      "description": "Request message for AckMessage RPC.",
      "type": "object",
      "properties": {
        "header": {
          "description": "(Required)",
          "$ref": "RequestHeader"
        },
        "sender": {
          "description": "(Required)",
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "PHONE_VERIFIER_GOOGLE"
          ]
        },
        "messageId": {
          "description": "(Required)",
          "type": "string"
        }
      }
    },
    "AckMessageResponse": {
      "id": "AckMessageResponse",
      "description": "Response message for AckMessage RPC.",
      "type": "object",
      "properties": {}
    },
    "GetMessageCapabilityRequest": {
      "id": "GetMessageCapabilityRequest",
      "description": "Request message for GetMessageCapability RPC.",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "description": "(Required) Phone number in E.164 format to check the capability of.",
          "type": "string"
        }
      }
    },
    "MessageCapability": {
      "id": "MessageCapability",
      "description": "The capability for a phone number to receive C11n OTT messages.",
      "type": "object",
      "properties": {
        "isCapable": {
          "description": "Whether the phone number is able to receive C11n OTT messages.",
          "type": "boolean"
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "id": "phonedeviceverification_pa:v1",
  "mtlsRootUrl": "https://phonedeviceverification-pa.mtls.googleapis.com/"
}
