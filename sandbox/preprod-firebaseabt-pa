{
    "basePath": "",
    "baseUrl": "https://preprod-firebaseabt-pa.sandbox.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Firebase AB Testing",
    "description": "Firebase A/B Experiments API allows the 1P clients to manage A/B experiments for mobile clients and view the results of such experiments.",
    "discoveryVersion": "v1",
    "documentationLink": "http://go/firebase-abt",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "firebaseabt_pa:v1",
    "kind": "discovery#restDescription",
    "name": "firebaseabt_pa",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "experimentManager": {
            "resources": {
                "ui": {
                    "resources": {
                        "projects": {
                            "methods": {
                                "getAnalyticsMetadata": {
                                    "description": "Get Analytics metadata for a project.",
                                    "flatPath": "v1/experimentManager/ui/projects/{projectsId}/analyticsMetadata",
                                    "httpMethod": "GET",
                                    "id": "firebaseabt_pa.experimentManager.ui.projects.getAnalyticsMetadata",
                                    "parameterOrder": [
                                        "parent"
                                    ],
                                    "parameters": {
                                        "parent": {
                                            "description": "This contains the Firebase project number which is a decimal number\nwith no padding. It is of the format \"projects/<project_number>\".\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                            "location": "path",
                                            "pattern": "^projects/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "service": {
                                            "description": "Optional.\nThe Firebase Service for which the Analytics metadata is requested.",
                                            "enum": [
                                                "UNKNOWN_SERVICE",
                                                "REMOTE_CONFIG",
                                                "NOTIFICATION",
                                                "IN_APP_MESSAGING"
                                            ],
                                            "location": "query",
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/experimentManager/ui/{+parent}/analyticsMetadata",
                                    "response": {
                                        "$ref": "GetProjectAnalyticsMetadataResponse"
                                    }
                                }
                            },
                            "resources": {
                                "experiments": {
                                    "methods": {
                                        "create": {
                                            "description": "Creates a new experiment and returns information about the newly\ncreated experiment. The new experiment will be in the PENDING state.\n\nAdditional responses codes:\nINVALID_ARGUMENT: Some arguments in the Create Experiment Request are\n                  invalid.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments",
                                            "httpMethod": "POST",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.create",
                                            "parameterOrder": [
                                                "parent"
                                            ],
                                            "parameters": {
                                                "parent": {
                                                    "description": "This contains the Firebase project number which is a decimal number\nwith no padding. It is of the format \"projects/<project_number>\".\nThis is called parent according to the style guide at\nhttps://g3doc.corp.google.com/google/g3doc/style/standard_fields.md?cl=head\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+parent}/experiments",
                                            "request": {
                                                "$ref": "CreateExperimentRequest"
                                            },
                                            "response": {
                                                "$ref": "ExperimentResource"
                                            }
                                        },
                                        "delete": {
                                            "description": "Delete an experiment and return the experiment's info before deletion.\n\nAdditional responses codes:\nNOT_FOUND: The experiment does not exist.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments/{experimentsId}",
                                            "httpMethod": "DELETE",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.delete",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/experiments/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+name}",
                                            "response": {
                                                "$ref": "ExperimentResource"
                                            }
                                        },
                                        "get": {
                                            "description": "Get information about an existing experiment for a project.\n\nAdditional responses codes:\nNOT_FOUND: The experiment does not exist.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments/{experimentsId}",
                                            "httpMethod": "GET",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.get",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/experiments/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+name}",
                                            "response": {
                                                "$ref": "ExperimentResource"
                                            }
                                        },
                                        "getActiveExperiments": {
                                            "description": "Get all active experiments in a project.\n\nRead full info of all active experiments of a project or a service within\nthe project. An active experiment is one that may affect the config of a\nnon-zero number of instances, and this includes both running experiments\nand pending experiments with debug instances.\n\nNote: this is a Hackweek project, with tracking bug b/119411243.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments:getActiveExperiments",
                                            "httpMethod": "GET",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.getActiveExperiments",
                                            "parameterOrder": [
                                                "parent"
                                            ],
                                            "parameters": {
                                                "parent": {
                                                    "description": "Contains the Firebase project number which is a decimal number\nwith no padding. It is of the format \"projects/<project_number>\".\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                },
                                                "service": {
                                                    "description": "Optional.\nThe Firebase Service for which experiments should be retrieved.\nIf unspecified, the response will contain all experiments in a project.",
                                                    "enum": [
                                                        "UNKNOWN_SERVICE",
                                                        "REMOTE_CONFIG",
                                                        "NOTIFICATION",
                                                        "IN_APP_MESSAGING"
                                                    ],
                                                    "location": "query",
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+parent}/experiments:getActiveExperiments",
                                            "response": {
                                                "$ref": "GetActiveExperimentsResponse"
                                            }
                                        },
                                        "getRealtimeMetrics": {
                                            "description": "Get the realtime metrics of a RUNNING experiment.\n\nAdditional responses codes:\nNOT_FOUND: The experiment does not exist.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments/{experimentsId}/realtimeMetrics",
                                            "httpMethod": "GET",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.getRealtimeMetrics",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/experiments/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+name}/realtimeMetrics",
                                            "response": {
                                                "$ref": "RealtimeExperimentMetrics"
                                            }
                                        },
                                        "list": {
                                            "description": "List all experiment summaries for a project regardless of their state\n(limited to 100 most recent experiments). The result consists of\nexperiments sorted in reverse chronological order (most recent first) of\nthe creation time of the experiment.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments",
                                            "httpMethod": "GET",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.list",
                                            "parameterOrder": [
                                                "parent"
                                            ],
                                            "parameters": {
                                                "parent": {
                                                    "description": "This contains the Firebase project number which is a decimal number\nwith no padding. It is of the format \"projects/<project_number>\".\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                },
                                                "service": {
                                                    "description": "Optional.\nThe Firebase Service for which the experiments will be retrieved.\nIf not specified, it will return all experiments for that project.",
                                                    "enum": [
                                                        "UNKNOWN_SERVICE",
                                                        "REMOTE_CONFIG",
                                                        "NOTIFICATION",
                                                        "IN_APP_MESSAGING"
                                                    ],
                                                    "location": "query",
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+parent}/experiments",
                                            "response": {
                                                "$ref": "ListExperimentsResponse"
                                            }
                                        },
                                        "results": {
                                            "description": "Get the results of an existing experiment.\n\nAdditional responses codes:\nNOT_FOUND: The experiment does not exist.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments/{experimentsId}/results",
                                            "httpMethod": "POST",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.results",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/experiments/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+name}/results",
                                            "request": {
                                                "$ref": "GetExperimentResultsRequest"
                                            },
                                            "response": {
                                                "$ref": "ExperimentResults"
                                            }
                                        },
                                        "rollout": {
                                            "description": "Roll out an experiment and track event information.\n\nYou can perform this action multiple times.\nOnly the last action will be recorded in this case.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments/{experimentsId}:rollout",
                                            "httpMethod": "PUT",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.rollout",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "description": "Required.\nThe resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/experiments/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+name}:rollout",
                                            "request": {
                                                "$ref": "ExperimentRolloutRequest"
                                            },
                                            "response": {
                                                "$ref": "ExperimentRolloutResponse"
                                            }
                                        },
                                        "testExperiment": {
                                            "description": "Send experiment to test App Instances associated with an experiment which\nis currently in PENDING state. This only applies to event oriented services\nlike Notifications and not for state based services like Remote Config.\n\nAdditional response codes:\nFAILED_PRECONDITION: When the experiment is not in PENDING state or when\n    the experiment has no test instances associated with it. It can also\n    fail if it is called for a Remote Config experiment.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments/{experimentsId}:testExperiment",
                                            "httpMethod": "POST",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.testExperiment",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/experiments/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+name}:testExperiment",
                                            "request": {
                                                "$ref": "SendExperimentTestEventRequest"
                                            },
                                            "response": {
                                                "$ref": "Empty"
                                            }
                                        },
                                        "update": {
                                            "description": "Update the details of an experiment.\n\nAdditional responses codes:\nNOT_FOUND: The experiment does not exist.\nINVALID_ARGUMENT: Some arguments in the Update Experiment Request are\n                  invalid.\nABORTED(Conflict): The etag specified does not match the etag of the\n         Experiment being updated. This can be used to determine if the\n         correct version of the Experiment Resource is being modified.",
                                            "flatPath": "v1/experimentManager/ui/projects/{projectsId}/experiments/{experimentsId}:update",
                                            "httpMethod": "PUT",
                                            "id": "firebaseabt_pa.experimentManager.ui.projects.experiments.update",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nThe project number is an unsigned decimal number with no padding.\nThis is filled in from the URL path for REST requests.",
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/experiments/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/experimentManager/ui/{+name}:update",
                                            "request": {
                                                "$ref": "UpdateExperimentRequest"
                                            },
                                            "response": {
                                                "$ref": "ExperimentResource"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "revision": "20190411",
    "rootUrl": "https://preprod-firebaseabt-pa.sandbox.googleapis.com/",
    "schemas": {
        "AbtCustomError": {
            "description": "A custom error to provide additional details about a 4XX HTTP error.\nSome examples of these errors are: Invalid condition for an experiment,\ntoo many PENDING experiments.",
            "id": "AbtCustomError",
            "properties": {
                "errorDetails": {
                    "description": "Optional.\nAdditional error details if available about errors detected by the server.\nThis field is intended for UI developers and not UI end users.",
                    "type": "string"
                },
                "location": {
                    "description": "Optional.\nThe location in the experiment request to indicate the problem.\nFor example \"display_metadata.display_name\", if the display name is too\nlong. This will typically be set for validation errors.\nThis field is intended for UI developers and not UI end users.",
                    "type": "string"
                },
                "status": {
                    "description": "Required.\nThe detailed status code for what went wrong. eg. TOO_MANY_EXPERIMENTS.\nThis will never have the status OK.",
                    "enum": [
                        "UNKNOWN_ABT_STATUS",
                        "OK",
                        "GENERAL_ERROR",
                        "NOT_FOUND",
                        "ALREADY_EXISTS",
                        "DATABASE_ERROR",
                        "VALIDATION_ERROR",
                        "SERVICE_MISMATCH",
                        "STATE_MISMATCH",
                        "ETAG_MISMATCH",
                        "NOT_ALLOWED_IN_STATE",
                        "AUTHORIZATION_ERROR",
                        "OTHER_INTERNAL_ERROR",
                        "DATA_UNAVAILABLE",
                        "TOO_MANY_EXPERIMENTS",
                        "TOO_MANY_PENDING_EXPERIMENTS",
                        "TOO_MANY_RUNNING_EXPERIMENTS",
                        "INVALID_STATE_CHANGE",
                        "EXPERIMENT_TRACKING_ERROR",
                        "NO_TEST_INSTANCES",
                        "DATA_NOT_PURGEABLE",
                        "ILLEGAL_ROLLOUT_REQUEST"
                    ],
                    "enumDescriptions": [
                        "This value should never be used and is provided for a more graceful\nfallback. See more details at http://go/protodosdonts.\nIf encountered, it always represent an error.",
                        "This is the only OK status.",
                        "An unspecified error. Try to use more specific ones if possible.",
                        "Trying to access a non existing experiment.",
                        "Trying to create an existing experiment.",
                        "General operation related to accessing the underlying database.",
                        "Error when trying to validate experiment data.",
                        "Request expectation doesn't match experiment service.",
                        "Request expectation doesn't match experiment state.",
                        "The expected etag specified in an update request\ndid not match the etag of the current version.",
                        "The request is invalid for the current state of the experiment.",
                        "The user was not allowed to access the experiment(s).",
                        "Internal errors besides the others listed here.",
                        "Data is not available (hidden for wipeout compliance)",
                        "Trying to exceed quota for max experiments in a project service.",
                        "Trying to exceed quota for max pending experiments in a project service.",
                        "Trying to exceed quota for max running experiments in a project service.",
                        "The transition from current experiment state to requested experiment\nstate is invalid.",
                        "Could not start or stop the experiment tracking at Scion.",
                        "User tried to an operation on an experiment that has no test instances\nassociated with this experiment.",
                        "Data cannot be PURGED by wipeout because it was HIDDEN too recently,\nor was never HIDDEN.",
                        "An experiment cannot be rolled out unless it is RUNNING, DONE, or EXPIRED."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AbtExperimentCondition": {
            "description": "A condition which determines if an App Instance has been assigned to an\nABT experiment.",
            "id": "AbtExperimentCondition",
            "properties": {
                "experimentId": {
                    "description": "Required.\nThe target experiment id's for the ABT experiment.\nNOTE: Experiment Id's are unique only within the scope of a project.\nThe implicit operator is IN_ANY - the condition will return true if\nthe instance is in any of the target experiments. This list can have a\nmaximum of 10 experiments.\nThe experiments may belong to multiple different services eg. Remote\nConfig, FIAM. It may also include some experiments which have expired but\nhave not been cleaned up yet. The experiment id is case-sensitive.\nAn example experiment id - \"123\".",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Action": {
            "id": "Action",
            "properties": {
                "basics": {
                    "$ref": "Basics",
                    "description": "Optional.\nBasic information about the action (eg. name, description, etc.)."
                },
                "isImmutable": {
                    "description": "Optional.\nWhen set, the whole Action instance needs to be treated as immutable. (eg.\nvariant of a RUNNING experiment)",
                    "type": "boolean"
                },
                "productAction": {
                    "$ref": "ProductAction",
                    "description": "Required.\nProduct-specific part of the action which defines:\n - treatment to be applied by the product\n - any other product-specific metadata that is needed to serve this\n treatment.\nBelongs to exactly one product."
                },
                "schedule": {
                    "$ref": "Schedule",
                    "description": "Optional.\nScheduling for this action.\nIf not set, schedule is unbounded, and action doesn't end until manually\ndisabled."
                },
                "targeting": {
                    "$ref": "Condition",
                    "description": "Optional.\nTargeting conditions (as defined by Firebase Common Targeting) that control\nwhich subset of the app instances should be given the treatment defined by\nthe product_action of this action.\nWithin the context of ABT, these are the variant level targeting\nconditions.\nTo keep things consistent with ABT, the condition here is always in the\nfully formed format of OR(AND(atom...)...). That is, a three level tree\nwith OR at the root, ANDs at the second level, and individual atoms at the\nthird level.\nThe targeting at this level (variant-level\ntargeting) determines if the treatment will be applied to the app\ninstance (which gets counted in the experiment regardless of the\ntreatment). The targeting at the experiment level (defined in\nexperiment_metadata) determines if an app instance gets counted in the\nexperiment or not. While rolling out a variant of an experiment, the\nconditions at both levels should be ANDed together."
                }
            },
            "type": "object"
        },
        "ActivationEvent": {
            "description": "An event which triggers the start of the experiment.\nThis can be qualified with zero or more event parameters.",
            "id": "ActivationEvent",
            "properties": {
                "eventName": {
                    "description": "Optional. The Analytics even which indicates that the user has seen an\nexperiment. This is case-sensitive and must be 0-32 characters long.\nIt may only contain alphanumeric characters and underscores, and must\nstart with an alphabetic character. The \"firebase_\" prefix is reserved\nand should not be used.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyticsAudienceCondition": {
            "description": "A condition that evaluates if the device belongs to the target analytics\naudience(s).\n\nAudiences are defined in Scion and the membership of app instances\nto audiences are stored in the Firebase Scion Adapter (FSA) and other\ndownstream system(s), keyed by scion audience ids, with no audience\nnames directly associated with them.\n\nThis condition references audiences by names rather than audience ids\nwhich requires binding to the audience ids in order to use the\ninstance audience data. The recommended way of doing this binding is\nas late as possible. For example, if making the binding at the time\nthe condition is saved by the user may result in different targeting\nthan making the binding at the time of the condition evaluation,\nthe latter approach should be preferred because it provides a more\nconsistent behavior from user's perspective who sees only\nthe audience names.\n\nFor example, if a condition for audience \"A\" is in the scope of an\nentire project and if a new app is added to the project after the\ncondition was saved, at runtime the condition should also target\naudience \"A\" for the new app.\n\nAnother important aspect of audiences is the user ability to share\nor hide analytics information (data and metadata) from specific\nservices. When a specific service that uses this condition has\ndata sharing disabled in Scion, the service should use no\nanalytics metadata (e.g. audience names) and data (e.g. app instance\nmembership in audiences). This applies to both the service frontend\nwhich may use audience names for input validation and the\nservice backend which evaluates this condition based on the instance\naudience membership.\n\nValidation: validation of audience conditions is done in the\ncontext of a firebase service (ConsumingProduct in Scion's terminology)\nand either a single app, a strict subset of project apps or\nthe entire project. The validation should reject audience conditions\nwith at least one audience name that is currently not defined\nand shared within the context of the condition. For example, if the\ncondition is used in a context of a single app X and contains\naudience name A which is not defined and/or shared by app X but\nonly with app Y in the same project then the condition should\nbe rejected. Note that once a condition is validated and saved,\nit can later become invalid, for example, if the app is deleted\nor the sharing is disabled. This is typically handled at runtime\nduring the evaluation of the condition.\n\nEvaluation:\n1. If the audience information for the instance could not be fetched,\nthen evaluation for that audience should be evaluated to false.\n\n2. If during the evaluation of this condition, the instance membership in an\naudience cannot be determined (e.g. due to disabled scion data sharing or\naudience got deleted), then the condition is evaluated as if the instance\nis not a member of that audience.\nThis can cause both operators IN_ALL_OF and NONE_OF operators to return\nfalse for a given audience set if any audience in that set is not shared\nwith the evaluating service. This is the correct behavior.",
            "id": "AnalyticsAudienceCondition",
            "properties": {
                "operator": {
                    "description": "Required.",
                    "enum": [
                        "UNKNOWN",
                        "IN_AT_LEAST_ONE",
                        "NOT_IN_AT_LEAST_ONE",
                        "IN_ALL",
                        "IN_NONE"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The condition will be true if the App Instance is a member of\nat least one of the target audiences in the set.",
                        "The condition will be true if the App Instance is not a member of\nat least one of the target audiences in the set.",
                        "The condition will be true if the App Instance is a member of every\naudience in the target audiences in the set.",
                        "NOTE(arete): The enum name IN_NONE here is misleading, it actually\nmatches \"Actual audience members does not include all of the target\naudiences\" on UI, which literally means \"not in all\", not \"in none\"."
                    ],
                    "type": "string"
                },
                "targetAudienceEntityId": {
                    "description": "Required (Must have at least 1 id).\nA list of globally unique audience id. There can be upto 50 audiences.\nDuplicate id's are not allowed.\n\nBefore Transition to Gold:\nThis field may have 0 entries.\n\nWriting the condition: The entity id's corresponding to the audience being\ncreated should be filled along with audience name.\nWhen creating a condition from an audience CEL, we can identify the\nentity id for the audience since there is a requirement to have App Id\ncondition\nReading the condition: The target_audience_names field is used for display.\nEvaluation: target_audience_names is used for evaluation.\n\nAfter transition to Gold (transition is one project at a time):\nThis field will have at least one entry.\n\nWriting the condition: Only the entity id's need to be written.\ntarget_audience_names field can be ignored.\nReading the condition: The entity id is used to resolve the display name of\naudiences.\nNOTE: It is possible that archived Conditions cannot be migrated to Scion\nGold, in which case there will be no entries and an error will be displayed\nto the user.\nEvaluating the condition: Entity id's are used for evaluating targeting\nconditions.",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                },
                "targetAudienceNames": {
                    "description": "Deprecated.\nThe target Analytics Audience Name which is case-sensitive. The audience\nset can have up to 50 audiences. Duplicate audiences are not allowed.\nNOTE: This field is present for backward compatibility for systems which\nhave stored Audience conditions.\nThis field is deprecated for new audiences. See go/abt-scion-gold-migration",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AnalyticsAudienceMetadata": {
            "description": "Analytics Audience metadata for a single App in a project.",
            "id": "AnalyticsAudienceMetadata",
            "properties": {
                "audienceEntityId": {
                    "description": "Required.\nScion Gold audience entity id.\nThis will be present for ALL projects even before they have been\nmigrated to Scion Gold.",
                    "format": "int64",
                    "type": "string"
                },
                "audienceName": {
                    "description": "Required.\nDisplay name of the Audience.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyticsEventMetadata": {
            "description": "Analytics Event metadata for a single App in a project.",
            "id": "AnalyticsEventMetadata",
            "properties": {
                "eventName": {
                    "description": "Required.\nDisplay name of the event.",
                    "type": "string"
                },
                "isConversionEvent": {
                    "description": "Required.\nSet to true if the event has been marked as a conversion event using the\nFirebase Console.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AnalyticsUserPropertyCondition": {
            "description": "A condition that compares the Analytics\nUser Property value against a target value.\nEvaluation:\n1. If the User Property has not been defined in Scion, then the condition\nshould be evaluated to false.\n2. If the User Property exists in Scion but has not been set on the client,\nthen the condition should be evaluated to false.\n3. If a numeric operator is used for comparison and the User Property value\nset on the device cannot be converted to a number, then the condition\nshould be evaluated to false.\n4. If this User Property is currently not shared with the Firebase service\nevaluating the condition, then the condition should be evaluated to false.",
            "id": "AnalyticsUserPropertyCondition",
            "properties": {
                "operator": {
                    "description": "Required.",
                    "enum": [
                        "UNKNOWN",
                        "NUMERIC_LESS_THAN",
                        "NUMERIC_LESS_EQUAL",
                        "NUMERIC_EQUAL",
                        "NUMERIC_NOT_EQUAL",
                        "NUMERIC_GREATER_THAN",
                        "NUMERIC_GREATER_EQUAL",
                        "STRING_CONTAINS",
                        "STRING_DOES_NOT_CONTAIN",
                        "STRING_EXACTLY_MATCHES",
                        "STRING_CONTAINS_REGEX"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The actual value is less than the target value.",
                        "The actual value is less than or equal to the target value.",
                        "The actual value is equal to the target value.",
                        "The actual value is not equal to the target value.",
                        "The actual value is greater than the target value.",
                        "The actual value is greater than or equal to the target value.",
                        "AT LEAST ONE of the target values is a substring of the actual User\nProperty value. Eg: \"abc\" contains the string \"a\", \"bc\".",
                        "NONE of the target values is a substring of the actual User Property\nvalue.",
                        "The actual value exactly matches AT LEAST ONE of the target values.",
                        "The target regular expression matches a portion of AT LEAST ONE of the\nactual values (or the entire string). The regex has to be in RE2 format.\nSee https://github.com/google/re2/wiki/Syntax"
                    ],
                    "type": "string"
                },
                "targetUserPropertyEntityId": {
                    "description": "Required.\nThe Id of the User Property to be targeted (0 is not a valid id and can\nbe assumed as unset).\n1. If this User Property is not currently shared with the Firebase service\nevaluating the condition or if this user property does not exist (no value)\nthen the atom should be evaluated to false.\n2. If the service does not support the operator, then the condition is\nevaluated to false.\n\nBefore Transition to Gold:\nThis field may not be populated.\n\nWriting: The entity id's corresponding to the user property name being\ncreated should be filled along with target_user_property_name.\nReading: The target_user_property_name field is used for display.\nEvaluation: The name field will be used for evaluation.\n\nAfter Transition to Gold (transition is one project at a time):\nThis field will always be populated.\n\nWriting: Only the entity id field will be written.\nReading: The name should be resolved from the entity id. New conditions\nwill not have the target_user_property_name field populated.\nNOTE: It is possible that archived conditions for the user property cannot\nbe migrated to the new format (if it was deleted for example) in which case\nthis field will be empty and an error will be displayed to the user.\nEvaluation: Entity id will be used for evaluation.",
                    "format": "int64",
                    "type": "string"
                },
                "targetUserPropertyName": {
                    "description": "Deprecated.\nThe target User Property Name. This must be exactly what is defined in\nAnalytics and is case-sensitive. Only developer visible, non reserved\nuser properties are allowed (eg. those user properties with prefix \"_\"\nor \"firebase_\" are reserved user properties).\n1. If this User Property is not currently shared with the Firebase service\nevaluating the condition or if this user property does not exist (no value)\nthen the atom should be evaluated to false.\n2. If the service does not support the operator, then the condition is\nevaluated to false.\n\nNOTE: This field is present for backward compatibility for systems which\nhave stored User Property conditions.\nThis field is deprecated for new user properties.\nSee go/abt-scion-gold-migration",
                    "type": "string"
                },
                "targetUserPropertyValue": {
                    "description": "Deprecated (as of May 2018).\nPlease use target_user_property_values = 5 instead.\nFor numeric operators must be in a valid numeric format (see above).\nFor string operators, this must conform to the length\nlimits specified above.",
                    "type": "string"
                },
                "targetUserPropertyValues": {
                    "description": "Required.\nDuring the transition from target_user_property_value to\ntarget_user_property_values, if the latter exists, the former\nwill be silently ignored.\n\nA list of at most 100 target user property values.\nFor numeric operators: this list must have exactly ONE target user\nproperty value that is of a valid numeric format specified above.\nFor string operators, this is a list of target user\nproperty values, where each value conforms to the length limits specified\nabove.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AnalyticsUserPropertyMetadata": {
            "description": "Analytics User-Property metadata for a single App in a project.",
            "id": "AnalyticsUserPropertyMetadata",
            "properties": {
                "userPropertyEntityId": {
                    "description": "Required.\nScion Gold User Property entity id.\nThis will be present for ALL projects even before they have been\nmigrated to Scion Gold.",
                    "format": "int64",
                    "type": "string"
                },
                "userPropertyName": {
                    "description": "Required.\nDisplay name of the User Property.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AndCondition": {
            "description": "AND of sub-conditions.\nAn AND condition is true if all of its subconditions evaluate to true.",
            "id": "AndCondition",
            "properties": {
                "conditions": {
                    "description": "Evaluated in given order with short circuit of false.\nShould contain at least one condition and no more than 100 conditions.",
                    "items": {
                        "$ref": "Condition"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AppAnalyticsMetadata": {
            "description": "Analytics Metadata for a single App in the Firebase project.",
            "id": "AppAnalyticsMetadata",
            "properties": {
                "appEvents": {
                    "description": "Available (shared) analytic events that have been logged by the app\nin the past 30 days.\nThese include both user defined and reserved events, e.g.,\nadd_payment_info. There can be a maximum of 500 user defined events.",
                    "items": {
                        "$ref": "AnalyticsEventMetadata"
                    },
                    "type": "array"
                },
                "audiences": {
                    "description": "Available (shared) audiences for this App. There can be a maximum of\n50 audiences for an App. This includes pre-defined audiences as well",
                    "items": {
                        "$ref": "AnalyticsAudienceMetadata"
                    },
                    "type": "array"
                },
                "dataSharingDisabled": {
                    "description": "Required.\nDetermines whether metadata should be shared. If data sharing is disabled,\nno audience, user property, system objective or user event data will be\nexposed.",
                    "type": "boolean"
                },
                "displayName": {
                    "description": "Optional.\nThe user chosen display name for this App. eg. \"My Android App\"",
                    "type": "string"
                },
                "firebaseAppId": {
                    "description": "Required.\nThe Firebase App Id which is a globally unique identifier for the mobile\napplication. eg: \"1:608293126765:android:4c764ae16deccd3b\"",
                    "type": "string"
                },
                "packageName": {
                    "description": "Required.\nThe package name (Android) or bundle ID (iOS) of this App.\neg. \"com.example.myapp\"",
                    "type": "string"
                },
                "systemObjectives": {
                    "description": "Available (shared) system objectives. Different for each impact service.\nThere can be a maximum of 10 objectives, as of Feb 2017.\nThe order of the system objectives matters. UI should display these\nobjectives in the order they are returned from the server.",
                    "items": {
                        "$ref": "SystemObjectiveMetadata"
                    },
                    "type": "array"
                },
                "userProperties": {
                    "description": "Available (shared) user properties for this App. There can be a maximum\nof 25 user properties set for an App. This will contain only user-defined\nuser properties (as opposed to system defined ones).",
                    "items": {
                        "$ref": "AnalyticsUserPropertyMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AppConversionEvents": {
            "description": "Minimal identifying information for conversion events that need to be tracked\nfor an app.",
            "id": "AppConversionEvents",
            "properties": {
                "eventNames": {
                    "description": "Required.\nNames of the conversion events to be tracked, e.g. \"in_app_purchase\".",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gmpAppId": {
                    "description": "Required.\nGmp_app_id of the app.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AppVersionCondition": {
            "description": "A condition that compares the app version to a target app version argument.\nThis can target multiple apps simultaneously unless it is AND'ed with a\nFirebaseAppIdCondition in which case, it will target the app specified.\nEvaluation:\nIf the App Version is unknown, then the condition should be\nevaluated to false.",
            "id": "AppVersionCondition",
            "properties": {
                "operator": {
                    "description": "Required.",
                    "enum": [
                        "UNKNOWN",
                        "CONTAINS",
                        "DOES_NOT_CONTAIN",
                        "EXACTLY_MATCHES",
                        "CONTAINS_REGEX",
                        "NUMERIC_LESS_THAN",
                        "NUMERIC_LESS_EQUAL",
                        "NUMERIC_EQUAL",
                        "NUMERIC_NOT_EQUAL",
                        "NUMERIC_GREATER_THAN",
                        "NUMERIC_GREATER_EQUAL"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "At least one of the target_app_versions is a substring of the actual App\nVersion. Eg: \"abc\" contains the string \"a\", \"bc\".",
                        "None of the target_app_versions is a substring of the actual App Version.",
                        "The actual value and the target value are the same for one of the\ntarget_app_versions. Case-sensitive.",
                        "The target regular expression matches a substring of or the entire actual\nvalue. To force matching of the entire string, use the RE2 anchors '^'\nand '$'.The regex has to be in RE2 format.\nSee https://github.com/google/re2/wiki/Syntax\nEvaluates to true if *any* of the regular expressions in the list\nmatches the target value.",
                        "The actual value is less than the target value.",
                        "The actual value is less than or equal to the target value.",
                        "The actual value is equal to the target value.",
                        "The actual value is not equal to the target value.",
                        "The actual value is greater than the target value.",
                        "The actual value is greater than or equal to the target value."
                    ],
                    "type": "string"
                },
                "targetAppVersions": {
                    "description": "Required.\nDuring the transition from target_value to target_app_versions,\nif target_app_versions exists, the value in the field target_value will\nbe ignored.\n\nThe target App Version or a regular expression depending\non the operator. The length must be between 1-250 characters.\nCan have a maximum of 45 versions (duplicates are allowed). Minimum 1\nis required (see caveat above).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "targetValue": {
                    "description": "Deprecated (as of April 2018).\nConditions which have stored only target_value (eg. archived experiments)\nwill have only this field set,\n\nPlease use target_app_versions instead.\nThe target App Version or a regular expression depending\non the operator. The length must be between 1-250 characters.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Basics": {
            "id": "Basics",
            "properties": {
                "description": {
                    "description": "Optional.\nDescription of the action.",
                    "type": "string"
                },
                "name": {
                    "description": "Optional.\nName of the action.\nWithin the context of ABT, this is the variant name.\nCan't have leading or trailing spaces.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Condition": {
            "description": "A general boolean expression that is used to evaluate\nconditions.\n\nNEXT TAG: 22",
            "id": "Condition",
            "properties": {
                "abtExperiment": {
                    "$ref": "AbtExperimentCondition",
                    "description": "Target an ABT Experiment."
                },
                "alwaysFalse": {
                    "$ref": "FalseCondition",
                    "description": "Always evaluates to false"
                },
                "alwaysTrue": {
                    "$ref": "TrueCondition",
                    "description": "Always evaluates to true"
                },
                "analyticsAudiences": {
                    "$ref": "AnalyticsAudienceCondition",
                    "description": "Target a device if it belongs to an Analytics Audience."
                },
                "analyticsUserProperty": {
                    "$ref": "AnalyticsUserPropertyCondition",
                    "description": "Target a device by Analytics User Properties set on the device."
                },
                "and": {
                    "$ref": "AndCondition",
                    "description": "Boolean operators and consts\n\nApply logical \"and\" condition to the subset of conditions."
                },
                "appId": {
                    "$ref": "FirebaseAppIdCondition",
                    "description": "Target a device by its App Id."
                },
                "appVersion": {
                    "$ref": "AppVersionCondition",
                    "description": "Target a device by App version."
                },
                "countries": {
                    "$ref": "DeviceCountryCondition",
                    "description": "Target a device by its location."
                },
                "deviceModel": {
                    "$ref": "DeviceModelCondition",
                    "description": "Target a device by its device model."
                },
                "firstOpenTime": {
                    "$ref": "FirstOpenTimeCondition",
                    "description": "Target app instance by its first open time."
                },
                "languages": {
                    "$ref": "DeviceLanguageCondition",
                    "description": "Target a device by the user locale language(s)."
                },
                "lastUserEngagementTime": {
                    "$ref": "LastUserEngagementTimeCondition",
                    "description": "Target app instance by its last user engagement time."
                },
                "not": {
                    "$ref": "NotCondition",
                    "description": "Apply logical \"not\" condition to the subset of conditions."
                },
                "or": {
                    "$ref": "OrCondition",
                    "description": "Apply logical \"or\" condition to the subset of conditions."
                },
                "osType": {
                    "$ref": "OsTypeCondition",
                    "description": "Target the device by its OS type."
                },
                "osVersion": {
                    "$ref": "OsVersionCondition",
                    "description": "Target the device by its OS version."
                },
                "percent": {
                    "$ref": "PercentCondition",
                    "description": "Target a percentage of App instances."
                },
                "predictions": {
                    "$ref": "PredictionsCondition",
                    "description": "Target a percentage of App instances."
                },
                "time": {
                    "$ref": "DateTimeCondition",
                    "description": "Builtin conditions (aka 'atoms')\n\nTarget a device at a given time."
                },
                "topic": {
                    "$ref": "TopicCondition",
                    "description": "Target a device by its membership to a Topic."
                }
            },
            "type": "object"
        },
        "CreateExperimentRequest": {
            "description": "Request message for AbtExperimentService.CreateExperiment.",
            "id": "CreateExperimentRequest",
            "properties": {
                "definition": {
                    "$ref": "ExperimentDefinition",
                    "description": "Required.\nThe definition of an experiment. This is immutable in the RUNNING\nand DONE state."
                },
                "displayMetadata": {
                    "$ref": "ExperimentDisplayMetadata",
                    "description": "Required. Mutable across all states of an experiment.\nThe display preferences of an experiment."
                },
                "mendelExperimentId": {
                    "description": "Optional.\nThe experiments that this project belongs to.\n(Ideally we would like the list of experiments which are related to just\nABT, but it is possible we will get *all* experiments that apply to\nthe user).\nIn mendel, an experiment id corresponds to a variant in an ABT experiment.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "service": {
                    "description": "Required. Immutable once an experiment has been created.\nThe Firebase Service on which the experiment will be performed.",
                    "enum": [
                        "UNKNOWN_SERVICE",
                        "REMOTE_CONFIG",
                        "NOTIFICATION",
                        "IN_APP_MESSAGING"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The Firebase Remote Config Service.",
                        "The Firebase Notifications Service.",
                        "The Firebase In App Messaging Service."
                    ],
                    "type": "string"
                },
                "settings": {
                    "$ref": "ExperimentSettings",
                    "description": "Required.\nThe experiment settings. This is mutable in the PENDING and\nRUNNING states."
                },
                "testing": {
                    "$ref": "ExperimentTesting",
                    "description": "Optional.\nExperiment Test Options. This is mutable in the PENDING state.\nIf not specified, this will be a default instance with no test instances."
                }
            },
            "type": "object"
        },
        "CredibleInterval": {
            "description": "A credible interval is an interval centered around the median of the\ndistribution. The width is expressed as percentiles of the distribution\nincluded in the interval. For example, a credible_interval_width of 50\nincludes the 25th and 75th percentiles of the distribution as the lower and\nupper bounds, respectively.",
            "id": "CredibleInterval",
            "properties": {
                "credibleIntervalWidth": {
                    "description": "Required.",
                    "format": "int32",
                    "type": "integer"
                },
                "lowerBound": {
                    "$ref": "SingleValue",
                    "description": "Required."
                },
                "upperBound": {
                    "$ref": "SingleValue",
                    "description": "Required."
                }
            },
            "type": "object"
        },
        "CustomObjective": {
            "description": "Config specifications which apply for CUSTOM objectives.\nA custom objective is provided",
            "id": "CustomObjective",
            "properties": {
                "countType": {
                    "description": "Required.\nWhich count_type is used to measure this objective.",
                    "enum": [
                        "UNKNOWN_COUNT_TYPE",
                        "UNIQUE",
                        "NUM_OCCURRENCES",
                        "NO_EVENT_USERS"
                    ],
                    "enumDescriptions": [
                        "",
                        "The objective is capped at 1 per user.",
                        "Count number of occurrences of this event.",
                        "Count the number of users with zero occurrences of the event."
                    ],
                    "type": "string"
                },
                "eventName": {
                    "description": "Required.\nA custom defined conversion event.\nThis must be the display name of the event (i.e. not the wire name).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CustomObjectiveDetails": {
            "description": "A custom objective for a user generated Scion event.",
            "id": "CustomObjectiveDetails",
            "properties": {
                "countType": {
                    "description": "Required.\nWhich count_type is used to measure this objective.\nAlways set to \"NO_EVENT_USERS\" for \"app_crashes\" and \"app_exception\"\nobjectives.",
                    "enum": [
                        "UNKNOWN_COUNT_TYPE",
                        "UNIQUE",
                        "NUM_OCCURRENCES",
                        "NO_EVENT_USERS"
                    ],
                    "enumDescriptions": [
                        "Per go/protodosdonts",
                        "The objective is capped at 1 per user.",
                        "Count number of occurrences of this event.",
                        "Count the number of users with zero occurrences of the event."
                    ],
                    "type": "string"
                },
                "eventName": {
                    "description": "Required.\nThe name of the user-defined Firebase Analytics event to optimize.\nThe event name is case-sensitive and must be 0-32 characters long.\nIt may only contain alphanumeric characters and underscores, and must\nstart with an alphabetic character. The \"firebase_\" prefix is reserved\nand should not be used.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DailyUserCount": {
            "description": "Total user count (cumulative since experiment starts) for each variant on a\nsingle day.",
            "id": "DailyUserCount",
            "properties": {
                "variantUserCounts": {
                    "description": "Required.\nCumulative user count for each variant on a day.\nNote: the count is determined by the index of the variant and the indices\nhere correspond with the variant indices in DayResults.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DataEntry": {
            "description": "This matches the wire format were data a map<string,string> field.\noption map_entry = true;  // marks the map construct in the descriptor",
            "id": "DataEntry",
            "properties": {
                "key": {
                    "description": "Key.",
                    "type": "string"
                },
                "value": {
                    "description": "Value.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Date": {
            "description": "Represents a whole or partial calendar date, e.g. a birthday. The time of day\nand time zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. This can represent:\n\n* A full date, with non-zero year, month and day values\n* A month and day value, with a zero year, e.g. an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, e.g. a credit card expiration date\n\nRelated types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
            "id": "Date",
            "properties": {
                "day": {
                    "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.",
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.",
                    "format": "int32",
                    "type": "integer"
                },
                "year": {
                    "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "DateDimensionValue": {
            "description": "A date dimension value.",
            "id": "DateDimensionValue",
            "properties": {
                "date": {
                    "$ref": "Date",
                    "description": "Required. Raw value."
                },
                "formattedValue": {
                    "description": "Required. Formatted value for display.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DateRangeRequest": {
            "description": "Requested date range.",
            "id": "DateRangeRequest",
            "properties": {
                "dateRangeOption": {
                    "description": "Optional. Defaults to LATEST_RESULTS.",
                    "enum": [
                        "UNKNOWN_DATE_RANGE_OPTION",
                        "LATEST_RESULTS",
                        "DAILY_RESULTS"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The latest results available for the experiment.",
                        "Daily results for the lifetime of the experiment."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DateTimeCondition": {
            "description": "A condition that compares the evaluation time\nto a given target time argument.\nEvaluation:\nIf the target_timezone_id is empty and the timezone of the device cannot\nbe determined, then the condition should be evaluated to false.",
            "id": "DateTimeCondition",
            "properties": {
                "operator": {
                    "description": "Required.",
                    "enum": [
                        "UNKNOWN",
                        "BEFORE",
                        "AFTER_OR_EQUAL"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Condition resolution is done before target time.",
                        "Condition resolution is done at or after target time.\nThe resolution of comparison is at the second level."
                    ],
                    "type": "string"
                },
                "targetDateTimeZone": {
                    "$ref": "TargetDateTimeZone",
                    "description": "Required."
                }
            },
            "type": "object"
        },
        "DayResults": {
            "description": "Results for a single day and single objective of an experiment.",
            "id": "DayResults",
            "properties": {
                "leaderFindingStatus": {
                    "description": "Status indicating the results of computing experiment leaders",
                    "enum": [
                        "UNKNOWN_LEADER_FINDING_RESULT",
                        "NO_DATA_YET",
                        "MISSING_HIT_DATA",
                        "EXPERIMENT_TOO_NEW",
                        "PVR_TOO_HIGH",
                        "POTENTIAL_INVALID_DATA",
                        "NO_VARIANT_CLEARLY_BEATS_ORIGINAL",
                        "LEADERS_FOUND"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "We don't have data for this experiment yet, but it's only been running for\n3 days or less so that might be OK.",
                        "We don't have data for this experiment, and it's been running for more\nthan 3 days so that's likely an error.",
                        "The experiment has been running for less than the minimum runtime when to\nget representative data, so we're not ready to declare a leader.",
                        "Our calculated potential value remaining (95th percentile estimate of how\nmuch better the real best variant might be than the one we're currently\nseeing as best) is too high. Need to wait for more data.",
                        "Some variants are getting too few hits, which usually indicates a data\nproblem. We will not declare leaders. Additionally,\nmissing_data_variants will be populated with a list of variants\nthat are missing data, and some metric values will be missing.",
                        "We have enough data, and we can't say with 95% confidence that any of the\nvariants are better than the original. The user should make their own\njudgments about what to do.",
                        "We found leaders"
                    ],
                    "type": "string"
                },
                "leadingVariants": {
                    "description": "Leading variant(s), if any, for the experiment objective.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "limitedDataVariants": {
                    "description": "Variants that are receiving too few hits. If any variants are\nmissing data, PROBABILITY_TO_BE_BEST will be reported as no_value for all\nvariants because it cannot be computed accurately.\nAdditionally, PROBABLE_IMPROVEMENT_DISTRIBUTION and\nPROBABILITY_TO_BEAT_BASELINE will be reported as no_value for the\nvariants with limited data. If the original (variant 0) is missing\ndata, PROBABLE_IMPROVEMENT_DISTRIBUTION and PROBABILITY_TO_BEAT_BASELINE\nwill return no_value for all variants.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "missingDataVariants": {
                    "description": "Variants that are totally missing data for this day. This may be\ncaused by a variant being disabled, requesting data for an experiment\nvery soon after it was started, or a back-end processing issue.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "variantResults": {
                    "description": "Results per variant.",
                    "items": {
                        "$ref": "VariantResults"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DeviceCountryCondition": {
            "description": "A condition that compares the device country against target countries.\nThe device country is determined by geo-lookup using device IP address.\nEvaluation:\nIf the Device Country cannot be determined, then the condition should be\nevaluated to false.",
            "id": "DeviceCountryCondition",
            "properties": {
                "operator": {
                    "description": "Required. Country code condition evaluation operator.",
                    "enum": [
                        "UNKNOWN",
                        "IS_IN",
                        "IS_NOT_IN"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Indicates that the actual country code is one of the target country codes",
                        "Indicates that the actual country code is not in the target country codes"
                    ],
                    "type": "string"
                },
                "targetCountryCodes": {
                    "description": "Required.\nA list of target countries containing the 2 letter country code\nas defined in ISO 3166-1 alpha-2. This is case-insensitive.\nSee https://www.iso.org/obp/ui/#search\nMaximum of 300 countries are allowed. Dupe countries are\nnot allowed (case insensitive).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DeviceLanguageCondition": {
            "description": "A condition that compares the device language(s) against target languages.\nThe device language is determined using the device locale.\nEvaluation:\nIf the Device Language cannot be determined, then the condition should be\nevaluated to false.",
            "id": "DeviceLanguageCondition",
            "properties": {
                "operator": {
                    "description": "Required",
                    "enum": [
                        "UNKNOWN",
                        "STRING_CONTAINS",
                        "STRING_DOES_NOT_CONTAIN"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Indicates that one of the target language codes is a substring of the\nactual language code.",
                        "Indicates that none of the target language codes is a substring of the\nactual language code."
                    ],
                    "type": "string"
                },
                "targetLanguageCodes": {
                    "description": "Required.\nA list of target languages in the BCP47 format.\nFor example \"en-US\". This is case-insensitive.\nSee https://www.w3.org/International/core/langtags/rfc3066bis.html\nMaximum of 300 languages are allowed. Dupe languages\nare not allowed (case insensitive).\nUse case NOTIFICATIONS accepts exactly one language code.\nWhen evaluating, the target language code and the actual App Instance\nlanguage code are \"maximized\" by adding likely subtags. The two language\ncodes are then compared for equality.\nSee java/com/google/i18n/identifiers/LanguageInfo.java for more info.\nA reference evaluation logic is at\njava/com/google/developers/mobile/targeting/evaluation/ConditionEvaluator.java#evaluateLanguageCondition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DeviceModelCondition": {
            "description": "A condition to target by the device model strings.",
            "id": "DeviceModelCondition",
            "properties": {
                "operator": {
                    "description": "Required",
                    "enum": [
                        "UNKNOWN",
                        "STRING_CONTAINS",
                        "STRING_DOES_NOT_CONTAIN",
                        "STRING_EXACTLY_MATCHES"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "At least one of the given target_device_models is a substring of the\nactually device model.",
                        "NONE of the given target_device_models is a substring of the actually\ndevice model.",
                        "The actual device model string exactly matches one of the given\ntarget_device_models.\nTODO(arete) to support regex match / not match"
                    ],
                    "type": "string"
                },
                "targetDeviceModels": {
                    "description": "Required\nA list of target device model strings.\nTargeting service accepts at least 1 and at most 50 values in this list.\nTODO(arete) Add comment about any format restriction of device models.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DisplayParameters": {
            "description": "Additional parameters that affect message delivery",
            "id": "DisplayParameters",
            "properties": {
                "androidNotificationChannel": {
                    "description": "Developer defined notification channel ID for Android only. The app must\ncreate a channel with this ID before receiving the notification, otherwise\nthe client will use the default channel defined in the manifest.\nIgnored for android clients < Android O. go/fcm-android-channel",
                    "type": "string"
                },
                "data": {
                    "description": "Extra key/value map to be sent with the message.",
                    "items": {
                        "$ref": "DataEntry"
                    },
                    "type": "array"
                },
                "image": {
                    "description": "Contains the URL of an image that is going to be displayed in a\nnotification.",
                    "type": "string"
                },
                "iosBadgeNumber": {
                    "description": "\"Badge number\" to show on the app icon in the iOS launcher post-delivery.",
                    "format": "int32",
                    "type": "integer"
                },
                "priority": {
                    "description": "Priority with which to send the message.",
                    "enum": [
                        "GCM_DEFAULT",
                        "NORMAL",
                        "HIGH"
                    ],
                    "enumDescriptions": [
                        "Unspecified, left to the default of the GCM API.",
                        "Normal priority. iOS devices may not receive it, respects Doze on Android.",
                        "High priority. Timely delivery on iOS more likely. Sent even in Doze on\nAndroid."
                    ],
                    "type": "string"
                },
                "sound": {
                    "description": "Sound to play on delivery.",
                    "type": "string"
                },
                "title": {
                    "description": "Title applied on android (and Apple Watch?)",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DistributionValue": {
            "description": "A distribution metric value.",
            "id": "DistributionValue",
            "properties": {
                "credibleIntervals": {
                    "description": "Credible intervals of the distribution.",
                    "items": {
                        "$ref": "CredibleInterval"
                    },
                    "type": "array"
                },
                "median": {
                    "$ref": "SingleValue",
                    "description": "Required. Median of the distribution."
                }
            },
            "type": "object"
        },
        "Empty": {
            "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "id": "Empty",
            "properties": {},
            "type": "object"
        },
        "EventObjective": {
            "description": "The objective used to measure the performance of an experiment.\nAn experiment has a single primary objectives and multiple secondary\nobjectives.",
            "id": "EventObjective",
            "properties": {
                "abtOptimizationFunction": {
                    "description": "Required.\nHow to optimize this metric.\nNOTE: This field should only be set for custom objectives.\nAlways set to \"MAXIMIZE\" for \"app_crashes\" and \"app_exception\"\nobjectives.",
                    "enum": [
                        "UNKNOWN_OPTIMIZATION_FUNCTION",
                        "MAXIMIZE",
                        "MINIMIZE"
                    ],
                    "enumDescriptions": [
                        "Per go/protodosdonts",
                        "If more is good, maximize; eg. revenue related events",
                        "If less is good, minimize; eg. app crashes"
                    ],
                    "type": "string"
                },
                "customObjectiveDetails": {
                    "$ref": "CustomObjectiveDetails",
                    "description": "Configuration details for user-defined custom objectives."
                },
                "isPrimary": {
                    "description": "Required.\nIf true, this is the primary objective of the experiment. Exactly one\nobjective should be marked primary.",
                    "type": "boolean"
                },
                "systemObjectiveDetails": {
                    "$ref": "SystemObjectiveDetails",
                    "description": "Configuration details for system objectives."
                },
                "systemObjectiveName": {
                    "description": "DEPRECATED. Use system_objective_details",
                    "type": "string"
                },
                "userDefinedEventName": {
                    "description": "DEPRECATED. Use custom_objective_details",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExperimentAction": {
            "description": "The experiment action to perform on a client selected for a variant.",
            "id": "ExperimentAction",
            "properties": {
                "notificationAction": {
                    "$ref": "NotificationAction",
                    "description": "The Notification action."
                },
                "remoteConfigAction": {
                    "$ref": "RemoteConfigAction",
                    "description": "The Remote Config action."
                }
            },
            "type": "object"
        },
        "ExperimentDefinition": {
            "description": "An experiment definition.\nThis is immutable once an experiment is started.",
            "id": "ExperimentDefinition",
            "properties": {
                "experimentCondition": {
                    "$ref": "Condition",
                    "description": "Required.\nA portion of the experiment definition that defines which subset\nof users are selected for this experiment (for all variants).\nAs of Feb 2017, this condition must have the format OR(AND(atom+))\nwhere the atom list must include exactly one APP ID atom.\n"
                },
                "experimentObjectives": {
                    "$ref": "ExperimentObjectives",
                    "description": "Required.\nThe objectives of an experiment."
                },
                "experimentVariants": {
                    "description": "Required.\nMust have between 2 - 8 variants.\nThe first variant in this list is the 'Control group' variant.\n\nNOTE: While using the ExperimentDefinition as part of a Create or Update\nrequest, only the 'experiment_variants' field should\nbe filled, as 'variants' field is deprecated, and filling them both will\ncause a bad request exception. When ExperimentDefinition is part of the\nserver response, it might have both these fields filled. This is due to the\ntransition, and we'll stop populating the 'variants' field once the UI\ncompletely switches over to the 'experiment_variants' field.",
                    "items": {
                        "$ref": "Action"
                    },
                    "type": "array"
                },
                "serviceSpecificOptions": {
                    "$ref": "ServiceSpecificOptions",
                    "description": "Required. Service specific options for this experiment."
                },
                "variants": {
                    "description": "DEPRECATED. Use 'experiment_variants'.\n\nMust have between 2 - 8 variants in RUNNING and DONE state.\nThe first variant in this list is the Control variant.\n\nNOTE: While using the ExperimentDefinition as part of a Create or Update\nrequest, only the 'experiment_variants' field should\nbe filled, as 'variants' field is deprecated, and filling them both will\ncause a bad request exception. When ExperimentDefinition is part of the\nserver response, it might have both these fields filled. This is due to the\ntransition, and we'll stop populating the 'variants' field once the UI\ncompletely switches over to the 'experiment_variants' field.",
                    "items": {
                        "$ref": "ExperimentVariant"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExperimentDisplayMetadata": {
            "description": "This is mutable after experiment is started.",
            "id": "ExperimentDisplayMetadata",
            "properties": {
                "description": {
                    "description": "Optional.\nMulti-line free text description of the experiment.\nMaximum length is 2048 characters (or more precisely, unicode code points).",
                    "type": "string"
                },
                "displayName": {
                    "description": "Required.\nName of the experiment. Length must be between 1 - 30 characters (or more\nprecisely, unicode code points). Does not need to be unique for a project.\nShould not have any leading or trailing spaces.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExperimentInstanceToTest": {
            "description": "Represents information of one test device.",
            "id": "ExperimentInstanceToTest",
            "properties": {
                "instanceId": {
                    "description": "Required.\nA string that identifies the app instance to test.",
                    "type": "string"
                },
                "variantIndex": {
                    "description": "Required\nThe index of the variant in ExperimentDefinition to which\nthis instance is assigned. The index of the first variant is\nzero.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ExperimentObjectives": {
            "description": "The objectives of an experiment.",
            "id": "ExperimentObjectives",
            "properties": {
                "activationEvent": {
                    "$ref": "ActivationEvent",
                    "description": "Optional.\nThe event which triggers the start of the experiment.\nIf not specified, receiving an experiment on the device would count as the\nactivation event."
                },
                "eventObjectives": {
                    "description": "Required.\nThe Objectives which are used to determine the winner of an experiment\nand measure desired outcomes.\nThis must have exactly one primary objective set. There can be a\nmaximum of 3 secondary objectives. The order of the objectives do not\nmatter. The server preserves the order though.\nPENDING: Must have between [0-4] objectives.\nRUNNING, DONE: Must have between [1-4] objectives",
                    "items": {
                        "$ref": "EventObjective"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExperimentResource": {
            "description": "The experiment resource.\nThis is the REST representation of an Experiment.\nThis is the response message from AbtExperimentService.CreateExperiment\nand AbtExperimentService.GetExperiment.",
            "id": "ExperimentResource",
            "properties": {
                "createTime": {
                    "description": "Required. Create time of the experiment.\nFilled in by the server during experiment creation.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "definition": {
                    "$ref": "ExperimentDefinition",
                    "description": "Required.\nThe experiment definition. This is mutable in the PENDING state."
                },
                "displayMetadata": {
                    "$ref": "ExperimentDisplayMetadata",
                    "description": "Required. Mutable across all states of an experiment."
                },
                "endTime": {
                    "description": "Optional. End time of the experiment.\nAssigned by the server.\nThis will only be present when the experiment is in DONE state.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "etag": {
                    "description": "Required.\nEtag for the Experiment which is generated using hash of update_time.\nCan be filled during call to UpdateExperiment to ensure that the correct\nversion of the experiment is updated. This will ensure that there are no\nconflicting writes. If no `etag` is provided, then the update will\nover-write the experiment blindly.\nSee\nhttps://g3doc.corp.google.com/google/g3doc/style/design_patterns.md?cl=head#ETags",
                    "type": "string"
                },
                "experimentPopulation": {
                    "description": "Optional.\nThe number of apps which are part of the experiment currently.\nFilled in by the server when the experiment is in RUNNING or DONE state.\nThis is not set in the PENDING state.",
                    "format": "int32",
                    "type": "integer"
                },
                "experimentRolloutInformation": {
                    "$ref": "ExperimentRolloutInformation",
                    "description": "Information about the most recent experiment rollout action."
                },
                "lastUpdateTime": {
                    "description": "Required. Update time of the experiment.\nAssigned by the server. Present in all states of an experiment.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "name": {
                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nSee go/resource-names#resource_name_as_string\nThe resource name is ignored when creating an experiment.",
                    "type": "string"
                },
                "service": {
                    "description": "Required.\nEach experiment needs to be associated with one service (RemoteConfig,\nnotifications, etc). This is immutable after creation.",
                    "enum": [
                        "UNKNOWN_SERVICE",
                        "REMOTE_CONFIG",
                        "NOTIFICATION",
                        "IN_APP_MESSAGING"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The Firebase Remote Config Service.",
                        "The Firebase Notifications Service.",
                        "The Firebase In App Messaging Service."
                    ],
                    "type": "string"
                },
                "settings": {
                    "$ref": "ExperimentSettings",
                    "description": "Required.\nThe experiment settings. This is mutable in the PENDING and\nRUNNING states."
                },
                "startTime": {
                    "description": "Optional. Start time of the experiment.\nAssigned by the server.\nThis will be present when the experiment is in RUNNING and DONE states.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "state": {
                    "description": "Required.\nThe State of the experiment.",
                    "enum": [
                        "UNKNOWN_STATE",
                        "PENDING",
                        "RUNNING",
                        "DONE",
                        "EXPIRED"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Initial editing. Not run yet.",
                        "Experiment is currently running.",
                        "Experiment run in the past.",
                        "Experiment expired past the maximum runtime."
                    ],
                    "type": "string"
                },
                "testing": {
                    "$ref": "ExperimentTesting",
                    "description": "Optional.\nIf exists, it is OK to be empty. Mutable in the PENDING state."
                }
            },
            "type": "object"
        },
        "ExperimentResults": {
            "description": "Results for a single experiment.",
            "id": "ExperimentResults",
            "properties": {
                "dailyUserCounts": {
                    "description": "Total user count (cumulative since experiment starts) for each variant on\neach day.\nNote: the order of 'daily_user_counts' corresponds to the order of\n'date_dimension_values' in ExperimentResults and 'day_results' in\nObjectiveResults.",
                    "items": {
                        "$ref": "DailyUserCount"
                    },
                    "type": "array"
                },
                "dateDimensionValues": {
                    "description": "The values for the date dimension. There will be one value for each of the\ndays in the results, and the order will match the order of\nObjectiveResults' day_results.",
                    "items": {
                        "$ref": "DateDimensionValue"
                    },
                    "type": "array"
                },
                "displayName": {
                    "description": "The user-configured experiment name, if any.",
                    "type": "string"
                },
                "experimentStatus": {
                    "description": "The current status of the experiment; either running or ended.\nAn experiment that has not yet started will not be represented in Scion\nand will throw a NOT_FOUND exception if requested.",
                    "enum": [
                        "UNKNOWN_EXPERIMENT_STATUS",
                        "RUNNING",
                        "ENDED"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The experiment is on-going.",
                        "The experiment has been stopped."
                    ],
                    "type": "string"
                },
                "objectiveResults": {
                    "description": "Results per objective.",
                    "items": {
                        "$ref": "ObjectiveResults"
                    },
                    "type": "array"
                },
                "overallExperimentStatus": {
                    "$ref": "OverallExperimentStatus",
                    "description": "Required.\nThe overall status of the experiment.\nDetermines the hero card shown to the user."
                },
                "variantDimensionValues": {
                    "description": "The values for the variant dimension. There will be one value for each\nof the variants of the experiment, and the order will match the order\nof DayResults' variant_results.",
                    "items": {
                        "$ref": "VariantDimensionValue"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExperimentRolloutInfo": {
            "description": "Information optionally attached to a campaign detailing the Experiment\nrollout from which it was created.",
            "id": "ExperimentRolloutInfo",
            "properties": {
                "excludeMilliPercentage": {
                    "description": "Required. [0; 100,000]. Final experiment population size relative to the\ntarget audience. To be excluded from the Campaign notification.",
                    "format": "uint32",
                    "type": "integer"
                },
                "experimentId": {
                    "description": "Required. go/firebase-abt Experiment from which this Campaign was created.",
                    "type": "string"
                },
                "variants": {
                    "description": "Required. One entry per variant in the original Experiment, in exactly the\nsame order.",
                    "items": {
                        "$ref": "VariantSummary"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExperimentRolloutInformation": {
            "description": "Information about the most recent experiment rollout action.",
            "id": "ExperimentRolloutInformation",
            "properties": {
                "rolloutTimeMillis": {
                    "description": "Timestamp of rollout action.\nRollout time is in milliseconds since the Unix epoch.",
                    "format": "int64",
                    "type": "string"
                },
                "variantIndex": {
                    "description": "The index of the rolled out variant.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ExperimentRolloutRequest": {
            "description": "Request message for handling experiment rollout events.\nMaking this request will add ExperimentRolloutInformation into the\nExperimentResource/Info, tracking both the time of rollout and index of\nvariant.\nRolling out is allowed from RUNNING, DONE, or EXPIRED states.",
            "id": "ExperimentRolloutRequest",
            "properties": {
                "variantIndex": {
                    "description": "Required.\nThe index of the variant that is being rolled out.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ExperimentRolloutResponse": {
            "description": "Response object containing all relevant information to the rollout event.\nCurrently, this only includes an updated ExperimentResource containing\na new ExperimentRolloutInformation relevant to this event.",
            "id": "ExperimentRolloutResponse",
            "properties": {
                "experimentResource": {
                    "$ref": "ExperimentResource",
                    "description": "Required.\nThe experiment resource updated with rollout information."
                }
            },
            "type": "object"
        },
        "ExperimentSettings": {
            "description": "Experiment settings.\nThis is mutable in PENDING and RUNNING states.",
            "id": "ExperimentSettings",
            "properties": {
                "milliPercentage": {
                    "description": "Required.\nThe percentage of clients to be assigned to this experiment multiplied by\n1000. For example if the percentage to assign is 1.234 %, the value should\nbe 1234. Valid values are between 1 - 100000 (both included).\nThe sum of all milli_percentage's for an experiment must be <= 100000.\nThe percentage is divided equally, truncated to milli percentages among\nall variants.",
                    "format": "int32",
                    "type": "integer"
                },
                "serviceSpecificSettings": {
                    "$ref": "ServiceSpecificSettings",
                    "description": "Required.\nService specific settings for this experiment."
                }
            },
            "type": "object"
        },
        "ExperimentSummaryResource": {
            "description": "A summary of the experiment.\nThis is the response message from AbtExperimentService.ListExperiments.",
            "id": "ExperimentSummaryResource",
            "properties": {
                "displayMetadata": {
                    "$ref": "ExperimentDisplayMetadata",
                    "description": "Required.\nThe user defined fields like display title and description."
                },
                "endTime": {
                    "description": "Required.\nThe time the experiment went into the DONE state.\nFilled in by the server for experiments that are in DONE state.\nThis is not set for PENDING or RUNNING experiments.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "etag": {
                    "description": "Required.\nEtag for the ExperimentResource which is generated\nusing hash of update_time.",
                    "type": "string"
                },
                "experimentPopulation": {
                    "description": "Optional.\nThe number of App Instances which are part of the experiment currently.\nFilled in by the server when the experiment is in RUNNING or DONE state.\nThis is not set in the PENDING state.",
                    "format": "int64",
                    "type": "string"
                },
                "experimentResultsStatus": {
                    "enum": [
                        "UNKNOWN_RESULT_STATUS",
                        "INCONCLUSIVE",
                        "CONCLUSIVE"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The results of the experiment were inconclusive at this time.\nIt is possible that the status will change to conclusive at some point\nin the future.",
                        "The results of the experiment were conclusive. This is a final state for\nan experiment."
                    ],
                    "type": "string"
                },
                "experimentRolloutInformation": {
                    "$ref": "ExperimentRolloutInformation",
                    "description": "Information about the most recent experiment rollout action."
                },
                "lastUpdateTime": {
                    "description": "Required. Update time of the experiment.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "leaderFindingStatus": {
                    "description": "Optional.\nThe status of finding a leader for an experiment. This will only be set for\nRUNNING or DONE experiments. If there was a failure to fetch experiment\nresults, this will not be set.\nUse this instead of experiment_result_status above.",
                    "enum": [
                        "UNKNOWN_LEADER_FINDING_RESULT",
                        "NO_DATA_YET",
                        "MISSING_HIT_DATA",
                        "EXPERIMENT_TOO_NEW",
                        "PVR_TOO_HIGH",
                        "POTENTIAL_INVALID_DATA",
                        "NO_VARIANT_CLEARLY_BEATS_ORIGINAL",
                        "LEADERS_FOUND"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "We don't have data for this experiment yet, but it's only been running for\n3 days or less so that might be OK.",
                        "We don't have data for this experiment, and it's been running for more\nthan 3 days so that's likely an error.",
                        "The experiment has been running for less than the minimum runtime when to\nget representative data, so we're not ready to declare a leader.",
                        "Our calculated potential value remaining (95th percentile estimate of how\nmuch better the real best variant might be than the one we're currently\nseeing as best) is too high. Need to wait for more data.",
                        "Some variants are getting too few hits, which usually indicates a data\nproblem. We will not declare leaders. Additionally,\nmissing_data_variants will be populated with a list of variants\nthat are missing data, and some metric values will be missing.",
                        "We have enough data, and we can't say with 95% confidence that any of the\nvariants are better than the original. The user should make their own\njudgments about what to do.",
                        "We found leaders"
                    ],
                    "type": "string"
                },
                "leadingVariantName": {
                    "description": "Required.\nName(s) of the leading variant(s), if any leaders were found.\nFilled in by the server for RUNNING and DONE experiments. If empty, it\nmeans no leader was found. It is possible for an experiment to have\nmultiple leading variants, hence the field is repeated.\nThis will always be empty for PENDING experiments.\nThere will be no leading variants when the ExperimentResultsStatus is\nINCONCLUSIVE.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The resource name of the experiment. It is of the format:\n\"projects/<project_number>/experiments/<experiment_id>\"\nSee\nhttps://g3doc.corp.google.com/google/g3doc/style/resource_names.md?cl=head#resource-name-as-string",
                    "type": "string"
                },
                "numberOfTestDevices": {
                    "description": "Required.\nThe number of test devices assigned for this experiment.\nFilled in all states of the experiment. Test devices can be used\nfor testing purposes in PENDING state only.",
                    "format": "int32",
                    "type": "integer"
                },
                "numberOfVariants": {
                    "description": "Required.\nThe number of variants the experiment has.",
                    "format": "int32",
                    "type": "integer"
                },
                "service": {
                    "description": "Required.\nEach experiment needs to be associated with one service (RemoteConfig,\nnotifications, etc).",
                    "enum": [
                        "UNKNOWN_SERVICE",
                        "REMOTE_CONFIG",
                        "NOTIFICATION",
                        "IN_APP_MESSAGING"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The Firebase Remote Config Service.",
                        "The Firebase Notifications Service.",
                        "The Firebase In App Messaging Service."
                    ],
                    "type": "string"
                },
                "startTime": {
                    "description": "Required.\nThe time the experiment went into the RUNNING state.\nFilled in by the server for experiments that are either RUNNING or DONE.\nThis is not set for PENDING experiments.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "state": {
                    "description": "Required. The State of the experiment.",
                    "enum": [
                        "UNKNOWN_STATE",
                        "PENDING",
                        "RUNNING",
                        "DONE",
                        "EXPIRED"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Initial editing. Not run yet.",
                        "Experiment is currently running.",
                        "Experiment run in the past.",
                        "Experiment expired past the maximum runtime."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExperimentTesting": {
            "description": "Experiment testing.\nThis is mutable in PENDING state.",
            "id": "ExperimentTesting",
            "properties": {
                "instanceToTest": {
                    "description": "Optional.\nThe test instances and their assignments to variants. The order does not\nmatter but is preserved by the ABT backend. An instance can appear at\nmost once. Empty is ok.\n",
                    "items": {
                        "$ref": "ExperimentInstanceToTest"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExperimentVariant": {
            "description": "A portion of the experiment definition that defines the variants\nand their actions. An experiment variant can either be defined for\nRemote Config or Notifications.\nThe first variant in the experiment is always considered to be the\nControl variant.",
            "id": "ExperimentVariant",
            "properties": {
                "action": {
                    "$ref": "ExperimentAction",
                    "description": "Optional.\nAction to be performed for that variant."
                },
                "variantName": {
                    "description": "Required.\nThe name of the variant. Eg: \"Notification A\", \"Control\".\nLength must be between 1 - 30 characters. Should not have any leading or\ntrailing spaces. Variant names must be unique for a single experiment.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FalseCondition": {
            "description": "This condition always evaluates to false.",
            "id": "FalseCondition",
            "properties": {},
            "type": "object"
        },
        "FirebaseAppIdCondition": {
            "description": "A condition that compares the Firebase App Id to a target Firebase App Id.",
            "id": "FirebaseAppIdCondition",
            "properties": {
                "targetGmpAppId": {
                    "description": "Required.\nThe target Firebase App Id.\nFor example: \"1:708293126705:ios:a750b5ff97fbf47d\".\nThis is case-sensitive (confirmed with tylerg@ March 2017).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FirebaseAppMetadata": {
            "id": "FirebaseAppMetadata",
            "properties": {
                "appEvents": {
                    "description": "Available (shared) analytic events that have been logged by the app\nin the past 30 days.\nThese include both user defined and reserved events, e.g.,\nadd_payment_info. There can be a maximum of 500 user defined events.",
                    "items": {
                        "$ref": "AnalyticsEventMetadata"
                    },
                    "type": "array"
                },
                "displayName": {
                    "description": "Optional.\nThe user chosen display name for this App. eg. \"My Android App\"",
                    "type": "string"
                },
                "firebaseAppId": {
                    "description": "Required.\nThe Firebase App Id which is a globally unique identifier for the mobile\napplication. eg: \"1:608293126765:android:4c764ae16deccd3b\"",
                    "type": "string"
                },
                "packageName": {
                    "description": "Required.\nThe package name (Android) or bundle ID (iOS) of this App.\neg. \"com.example.myapp\"",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FirstOpenTimeCondition": {
            "description": "A condition to target by first open time of an app instance. This\ncondition is evaluated against the first open timestamp collected by Google\nAnalytics.",
            "id": "FirstOpenTimeCondition",
            "properties": {
                "endOpenOffsetDays": {
                    "description": "Optional\nEnd time offset of a time range(Open) at day granularity,\nend_time = current_time - end_open_offset_days.\ngranularity. Value should be integer, with minimum value as\nzero. This number must be smaller than start_closed_offset_days.\nThis value must be specified if operator is EARLIER or BETWEEN.",
                    "format": "int32",
                    "type": "integer"
                },
                "operator": {
                    "description": "Required",
                    "enum": [
                        "UNKNOWN",
                        "EARLIER",
                        "LATER_OR_EQUAL",
                        "BETWEEN"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The actual first open timestamp is earlier than the given end time.\nIn this case, the end_open_offset_days field below must be specified.",
                        "The actual first open timestamp is later than or equal to the given\nstart time. In this case, the start_closed_offset_days field below must\nbe specified.",
                        "The actual first open timestamp is between the given start\n(closed) and end(open) time. In this case, both the\nstart_closed_offset_days and end_open_offset_days fields below must be\nspecified."
                    ],
                    "type": "string"
                },
                "startClosedOffsetDays": {
                    "description": "Optional\nStart time offset of a time range(Closed) at day granularity,\nstart_time = current_time - start_closed_offset_days\nValue should be an integer, with minimum value as one.\nThis number must be bigger than end_open_offset_days.\nThis value must be specified if operator is LATER_OR_EQUAL or BETWEEN.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GetActiveExperimentsResponse": {
            "description": "Response message for AbtExperimentService.GetActiveExperiments.",
            "id": "GetActiveExperimentsResponse",
            "properties": {
                "experimentResources": {
                    "description": "The list of active experiments targeted by a GetActiveExperimentsRequest.",
                    "items": {
                        "$ref": "ExperimentResource"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetExperimentResultsRequest": {
            "description": "Request message for AbtExperimentService.GetExperimentResults.\nQuery to get specific experiment results from ABT.",
            "id": "GetExperimentResultsRequest",
            "properties": {
                "dateRange": {
                    "$ref": "DateRangeRequest",
                    "description": "Optional. Defaults to LATEST_RESULTS."
                },
                "includeLeaders": {
                    "description": "If true, leading variants will be calculated and returned per-day\nfor each objective.",
                    "type": "boolean"
                },
                "locale": {
                    "description": "Optional. The locale for results formatting (e.g. 'en-US'). Defaults to\nauthenticated user's locale.",
                    "type": "string"
                },
                "objective": {
                    "$ref": "ObjectiveRequest",
                    "description": "Optional. Defaults to PRIMARY."
                },
                "scionExperimentKey": {
                    "$ref": "ScionExperimentKey",
                    "description": "A product-specific key referencing where to find the experiment."
                },
                "variantMetrics": {
                    "description": "Requested variant-level experiment metrics.",
                    "items": {
                        "$ref": "VariantMetricRequest"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetProjectAnalyticsMetadataResponse": {
            "description": "Response message for AbtExperimentService.GetProjectAnalyticsMetadata.",
            "id": "GetProjectAnalyticsMetadataResponse",
            "properties": {
                "appAnalyticsMetadata": {
                    "description": "Deprecated!\nThe Analytics metadata for an App within the project.\nThere should be one entry for each App in the project regardless of\nwhether data sharing has been turned off for that App.\nNOTE: If a project has been migrated to Scion Gold (the is_gold_project is\ntrue, then this field will not be set).\nThis must be the source of Analytics Metadata *before* the project has\nbeen migrated to Gold.",
                    "items": {
                        "$ref": "AppAnalyticsMetadata"
                    },
                    "type": "array"
                },
                "invalidActivationEvents": {
                    "description": "Scion events which cannot be used as an activation event.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "invalidGoalEvents": {
                    "description": "Scion events which cannot be used as an goal event.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "isGoldProject": {
                    "description": "All projects are Gold as of 2018.\nTrue if the Firebase project has been migrated to Scion Gold.\nFor projects which have been migrated to Gold, the app_analytics_metadata\nwill not be present.",
                    "type": "boolean"
                },
                "projectAnalyticsMetadata": {
                    "$ref": "ProjectAnalyticsMetadata",
                    "description": "The Scion Gold Analytics Metadata for the project.\nThis will be only be present for projects which have been migrated to Gold.\nThis must be the source of Analytics Metadata *after* the project has\nbeen migrated to Gold."
                }
            },
            "type": "object"
        },
        "InstancesPerMinute": {
            "description": "A breakdown of unique App Instances seen by the Realtime Scion\nservers in the last N minutes (N = 30 mins as of August 2018).",
            "id": "InstancesPerMinute",
            "properties": {
                "time": {
                    "description": "The time (at minute granularity) at which App instances were seen.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "uniqueTrials": {
                    "description": "Required.\nThe approximate number of unique App instances in a variant who have\nsent analytics events in the last 30 minutes.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "KeyValuePair": {
            "description": "The key-value pair to be sent with a notification.",
            "id": "KeyValuePair",
            "properties": {
                "key": {
                    "description": "Keys matching the following regular expression are not allowed.\n\"^(?:[fg]cm.*|google.*|message_type|subtype|from)$\"",
                    "type": "string"
                },
                "value": {
                    "description": "Value.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LastUserEngagementTimeCondition": {
            "description": "A condition to target by last user engagement time. This condition is\nevaluated against the last user engagement timestamp collected by Google\nAnalytics.",
            "id": "LastUserEngagementTimeCondition",
            "properties": {
                "endOpenOffsetDays": {
                    "description": "Optional\nEnd time offset of a time range(Open) at day granularity,\nend_time = current_time - end_open_offset_days.\ngranularity. Value should be integer, with minimum value as\nzero. This number must be smaller than start_closed_offset_days.\nThis value must be specified if operator is EARLIER or BETWEEN.",
                    "format": "int32",
                    "type": "integer"
                },
                "operator": {
                    "description": "Required",
                    "enum": [
                        "UNKNOWN",
                        "EARLIER",
                        "LATER_OR_EQUAL",
                        "BETWEEN"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The actual last user engagement time is earlier than the given end time.\nIn this case, the end_open_offset_days field below must be specified.",
                        "The actual last user engagement time is later than or equal to the given\nstart time. In this case, the start_closed_offset_days field below must\nbe specified.",
                        "The actual last user engagement time is between the given start\ntime(closed) and end time(open). In this case, both the\nstart_closed_offset_days and end_open_offset_days fields below must be\nspecified."
                    ],
                    "type": "string"
                },
                "startClosedOffsetDays": {
                    "description": "Optional\nStart time offset of a time range(Closed) at day granularity,\nstart_time = current_time - start_closed_offset_days\nValue should be an integer, with minimum value as one.\nThis number must be bigger than end_open_offset_days.\nThis value must be specified if operator is LATER_OR_EQUAL or BETWEEN.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ListExperimentsResponse": {
            "description": "Response message for AbtExperimentService.ListExperiments.",
            "id": "ListExperimentsResponse",
            "properties": {
                "experiments": {
                    "description": "Required. Information about the experiments in a project.",
                    "items": {
                        "$ref": "ExperimentSummaryResource"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "LongRunningCampaignInfo": {
            "description": "Details/Fields required to define a long running FN campaign.",
            "id": "LongRunningCampaignInfo",
            "properties": {
                "byWeekDay": {
                    "description": "Required and only valid for WEEK frequency.\nA set of days within the week (MON - SUN). Specifies the days on which the\nmessage will be sent. Order doesn't matter and duplicates aren't allowed.",
                    "enumDescriptions": [
                        "The unspecified day-of-week.",
                        "The day-of-week of Monday.",
                        "The day-of-week of Tuesday.",
                        "The day-of-week of Wednesday.",
                        "The day-of-week of Thursday.",
                        "The day-of-week of Friday.",
                        "The day-of-week of Saturday.",
                        "The day-of-week of Sunday."
                    ],
                    "items": {
                        "enum": [
                            "DAY_OF_WEEK_UNSPECIFIED",
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY",
                            "SUNDAY"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "frequency": {
                    "description": "Required.\nThe frequency of the event. Can only be one of DAY, WEEK.",
                    "enum": [
                        "CALENDAR_PERIOD_UNSPECIFIED",
                        "DAY",
                        "WEEK",
                        "FORTNIGHT",
                        "MONTH",
                        "QUARTER",
                        "HALF",
                        "YEAR"
                    ],
                    "enumDescriptions": [
                        "Undefined period, raises an error.",
                        "A day.",
                        "A week. Weeks begin on Monday, following\n[ISO 8601](https://en.wikipedia.org/wiki/ISO_week_date).",
                        "A fortnight. The first calendar fortnight of the year begins at the start\nof week 1 according to\n[ISO 8601](https://en.wikipedia.org/wiki/ISO_week_date).",
                        "A month.",
                        "A quarter. Quarters start on dates 1-Jan, 1-Apr, 1-Jul, and 1-Oct of each\nyear.",
                        "A half-year. Half-years start on dates 1-Jan and 1-Jul.",
                        "A year."
                    ],
                    "type": "string"
                },
                "frequencyLimitPerUser": {
                    "description": "Required.\nDefines how frequently would a user that has already received this campaign\nbe targeted again. If set to 0, each user will be sent the notification\nduring each send of the campaign. When the user selects the special case\n\"once per user\", this will be set to a really high value (one hundred\nyears).",
                    "format": "google-duration",
                    "type": "string"
                },
                "interval": {
                    "description": "Required.\nThe interval between events, such as \"every x weeks\".",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "MetricMetadata": {
            "description": "Metadata for a metric of experiment results.",
            "id": "MetricMetadata",
            "properties": {
                "currencySymbol": {
                    "description": "Optional. Currency symbol for the case that the formatting is currency.",
                    "type": "string"
                },
                "isDistribution": {
                    "description": "Optional. Whether or not the value is a distribution.",
                    "type": "boolean"
                },
                "optimizationFunction": {
                    "description": "Optional. Metric optimization function, e.g., bounces may be minimize.",
                    "enum": [
                        "UNKNOWN_OPTIMIZATION_FUNCTION",
                        "NOT_APPLICABLE",
                        "MINIMIZE",
                        "MAXIMIZE"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "No function is applied to the metric.",
                        "Minimize the metric.",
                        "Maximize the metric."
                    ],
                    "type": "string"
                },
                "valueType": {
                    "description": "Required. Value type, specifying how it should be interpreted.",
                    "enum": [
                        "UNKNOWN_VALUE_TYPE",
                        "INTEGER",
                        "FLOAT",
                        "PERCENT",
                        "CURRENCY",
                        "DURATION",
                        "PERCENT_DIRECTION"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "An integer value",
                        "A floating point value",
                        "An absolute percentage, used for probabilities.",
                        "A value in currency.",
                        "A period of time.",
                        "A change of +/- some %."
                    ],
                    "type": "string"
                },
                "variantMetricType": {
                    "description": "Required. Variant-level metric this corresponds to.",
                    "enum": [
                        "UNKNOWN_VARIANT_METRIC_TYPE",
                        "TRIALS",
                        "CUMULATIVE_TRIALS",
                        "EMPIRICAL_OUTCOMES",
                        "CUMULATIVE_EMPIRICAL_OUTCOMES",
                        "OUTCOME_PER_TRIAL_DISTRIBUTION",
                        "PROBABLE_IMPROVEMENT_DISTRIBUTION",
                        "PROBABILITY_TO_BEAT_BASELINE",
                        "PROBABILITY_TO_BE_BEST"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The number of experiment trials conducted on a given day.",
                        "The total number of experiment trials up through the given day.",
                        "The outcomes of the experiment on a given day. The outcome type depends on\nthe objective.",
                        "The total of the outcomes up through the given day. The outcome type\ndepends on the objective.",
                        "The modeled distribution of outcomes per trial for all trials up through\nthe given day. The outcome type depends on the objective.\nAvailable credible interval widths: 50, 95.",
                        "The modeled distribution of the variant's improvement over the baseline\nvariant for all trials up through the given day. The baseline variant is\nthe control.\nAvailable credible interval widths: 50, 95.",
                        "The probability of the variant to outperform the baseline variant.\nThe baseline variant is the control.",
                        "The probability of the variant to outperform all other variants."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MetricValue": {
            "description": "A metric value.",
            "id": "MetricValue",
            "properties": {
                "distributionValue": {
                    "$ref": "DistributionValue",
                    "description": "Present for metrics that have a distribution."
                },
                "noValue": {
                    "$ref": "Empty",
                    "description": "A metric may have no value in certain cases. For instance, if a\nvariant is disabled for a period, it may not have data for that time."
                },
                "singleValue": {
                    "$ref": "SingleValue",
                    "description": "Present for metrics that do not have a distribution."
                }
            },
            "type": "object"
        },
        "NotCondition": {
            "description": "NOT of a sub-condition.",
            "id": "NotCondition",
            "properties": {
                "condition": {
                    "$ref": "Condition",
                    "description": "Required. It's an error not to have a sub condition."
                }
            },
            "type": "object"
        },
        "NotificationAction": {
            "description": "The action to be performed when delivering a notification.\nThis is defined at a variant level.",
            "id": "NotificationAction",
            "properties": {
                "messageText": {
                    "description": "Optional.\nThe message to be sent to the client.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NotificationDeliveryTime": {
            "description": "Notification delivery time. Must be in the future.",
            "id": "NotificationDeliveryTime",
            "properties": {
                "deliveryDate": {
                    "$ref": "Date",
                    "description": "Required.\nThe delivery date."
                },
                "deliveryTime": {
                    "$ref": "TimeOfDay",
                    "description": "Required.\nThe delivery time. Precision can be specified upto minutes."
                },
                "timeZone": {
                    "description": "Optional.\nThe time zone at which to deliver the notification.\nTime zone in Olson ID format (eg: \"America/Los_Angeles\"), if the\nnotification should be delivered at a standard timezone. If it should be\ndelivered at the recipient time zone, this field must be empty or not\npopulated.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NotificationExperimentOptions": {
            "description": "Notification options to be applied to all variants in this experiment.\nThese options are considered to be mutable only in PENDING state.\nThis is defined at an experiment level.",
            "id": "NotificationExperimentOptions",
            "properties": {
                "androidNotificationChannel": {
                    "description": "Optional.\nDeveloper defined notification channel ID for Android only. The app must\ncreate a channel with this ID before receiving the notification, otherwise\nthe client will use the default channel defined in the manifest.\nIgnored for android clients < Android O. go/fcm-android-channel",
                    "type": "string"
                },
                "customKeyValues": {
                    "description": "Optional.\nThe set of key-value pairs that will be delivered with the message to\nthe app. A key cannot be repeated and value cannot be empty.\nThe sum of all key-value pair strings must not exceed 3Kb.",
                    "items": {
                        "$ref": "KeyValuePair"
                    },
                    "type": "array"
                },
                "deliveryTime": {
                    "$ref": "NotificationDeliveryTime",
                    "description": "Deprecated. The delivery_time field of NotificationExperimentSettings\nshould be used instead.\nNote: This field was moved to NotificationSpecificSettings to make it\nmutable during the RUNNING state. For a while, the two will both exist.\nThe following defines how the ABT server will handle this transition\n(this field is referred as the 'old' field):\n- on read request: if old field is set but new field is not, old field's\n  value will be copied over to the new field\n- on create request: if old field is set but new field is not, old field's\n  value will be copied over to the new field\n- on update request: comparing the incoming request with the stored one, if\n  we detect a change on the old field, the change will be copied over to\n  the new field. if we detect a change on the new field, the old field will\n  be reset, as it means that the console was updated.\nOptional.\nThe delivery time of the message. If not set, the message will be\ndelivered immediately."
                },
                "expirationSeconds": {
                    "description": "Optional.\nHow long the message should be kept for re-delivery. The maximum\nexpiration period is four weeks after the first delivery attempt.\nDefault is 4 weeks.",
                    "format": "int32",
                    "type": "integer"
                },
                "iosBadgeNumber": {
                    "description": "Optional.\nThis may be specified only for experiments which target an iOS app.\nThis indicates the number of app icons in the iOS launcher after\nnotification has been delivered. No badge is shown by default.",
                    "format": "int32",
                    "type": "integer"
                },
                "notificationTitle": {
                    "description": "Optional.\nShown to end users as the notification title. Applicable to Android\ndevices or iOS wear devices.",
                    "type": "string"
                },
                "priority": {
                    "description": "Optional. Default = HIGH.",
                    "enum": [
                        "UNKNOWN_PRIORITY",
                        "HIGH",
                        "LOW"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "High priority message.",
                        "Low priority message."
                    ],
                    "type": "string"
                },
                "sound": {
                    "description": "Required. Default = DISABLED.",
                    "enum": [
                        "DISABLED",
                        "ENABLED"
                    ],
                    "enumDescriptions": [
                        "Notification sound is disabled.",
                        "Notification sound is enabled."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NotificationExperimentSettings": {
            "description": "Notification options to be applied to all variants in this experiment.\nThese options are considered to be mutable in PENDING and RUNNING states.\nThis is defined at an experiment level.",
            "id": "NotificationExperimentSettings",
            "properties": {
                "deliveryTime": {
                    "$ref": "NotificationDeliveryTime",
                    "description": "Optional.\nThe delivery time of the message. If not set, the message will be\ndelivered immediately.\nNote: This field was originally defined in NotificationExperimentOptions,\nand was later moved here to make it mutable during the RUNNING state. For\na while, the two will both exist. The following defines how the ABT server\nwill handle this transition (this field is referred as the 'new' field):\n- on read request: if old field is set but new field is not, old field's\n  value will be copied over to the new field\n- on create request: if old field is set but new field is not, old field's\n  value will be copied over to the new field\n- on update request: comparing the incoming request with the stored one, if\n  we detect a change on the old field, the change will be copied over to\n  the new field. if we detect a change on the new field, the old field will\n  be reset, as it means that the console was updated."
                }
            },
            "type": "object"
        },
        "NotificationSpecificAction": {
            "description": "Model encapsulating an action that can be taken using Firebase Notification.\n\nBased on the Firegum model (go/firegum), this model is a part of the common\nunified growth model\n(http://google3/developers/mobile/common/proto/action.proto) and contains\nfields specific to Firebase Notification (FN) product. This action can be\ndefined either in the standalone FN product, or as part of an A/B Testing\nexperiment.",
            "id": "NotificationSpecificAction",
            "properties": {
                "appConversionEvents": {
                    "description": "Optional.\nContains GmpAppId of the app and the corresponding Conversion events to\ntrack post-delivery for the given app in the funnel. This field is only\nvalid for vanilla FN campaigns. For FN ABT experiments, ExperimentObjective\nfield in the ExperimentDefinition\n(http://google3/developers/mobile/abt/proto/experiments.proto?l=158&rcl=184752260)\nserves a similar purpose.",
                    "items": {
                        "$ref": "AppConversionEvents"
                    },
                    "type": "array"
                },
                "campaignId": {
                    "description": "Campaign ID. Non-negative, globally unique.\nRequired only for standalone FN sends.",
                    "format": "uint64",
                    "type": "string"
                },
                "campaignStatus": {
                    "description": "Campaign status.\nMust be DRAFT or ENQUEUED on save.\nOnly required for vanilla FN campaigns. For FN ABT, ExperimentState\n(http://google3/developers/mobile/abt/proto/experiments.proto?l=46&rcl=184752260)\nserves the same purpose.",
                    "enum": [
                        "STATUS_UNKNOWN",
                        "STATUS_DRAFT",
                        "STATUS_ENQUEUED",
                        "STATUS_DONE",
                        "STATUS_PERMANENT_FAILURE"
                    ],
                    "enumDescriptions": [
                        "Something is seriously messed up.",
                        "The camapign is a draft, editable and never to be sent.",
                        "The campaign is scheduled for some future time, and editable until shortly\nbefore that time.",
                        "The campaign has been sent successfully.",
                        "The sending of the campaign has failed, and will not be retried."
                    ],
                    "type": "string"
                },
                "displayParameters": {
                    "$ref": "DisplayParameters",
                    "description": "Optional.\nAdditional FN specific parameters like Sound, Title, Priority etc.\nFor FN ABT, this field will replace the existing\nNotificationExperimentOptions\n(http://google3/developers/mobile/abt/proto/notification_abt.proto?l=26&rcl=160009162)."
                },
                "expiryTime": {
                    "description": "Duration since the campaign send after which devices must not show the\nnotification anymore. The expiry_time can be between 0 to 4 weeks. Defaults\nto 4 weeks if not specified.",
                    "format": "google-duration",
                    "type": "string"
                },
                "failureReason": {
                    "description": "Set only if the campaign/experiment send failed, otherwise defaults to\nUNKNOWN_ERROR.",
                    "enum": [
                        "UNKNOWN_ERROR",
                        "INVALID_REGISTRATION",
                        "NOT_REGISTERED",
                        "UNAUTHORIZED_REGISTRATION",
                        "MISMATCH_SENDER_ID",
                        "MESSAGE_TOO_BIG",
                        "INVALID_DATA_KEY",
                        "INVALID_LANGUAGE",
                        "INVALID_VERSION",
                        "INVALID_CREDENTIALS",
                        "NO_APPLICATION",
                        "AUTHENTICATION_ERROR",
                        "INVALID_FILTER"
                    ],
                    "enumDescriptions": [
                        "Unknown error",
                        "Invalid registration token",
                        "Unregistered registration token",
                        "Unauthorized to send messages to the registration token",
                        "Sender ID mismatched with registration token",
                        "Message too big, exceeded the GCM payload limit.",
                        "Custom data contains invalid key",
                        "Selected language not supported",
                        "Selected app version not supported",
                        "Invalid APNs certificate",
                        "Missing APNs certificate",
                        "Shouldn't happen :P",
                        "Invalid targeting filter string used."
                    ],
                    "type": "string"
                },
                "lastUpdateTime": {
                    "description": "When the campaign was last modified. This will be updated by the server on\nevery create or update campaign request.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "longRunningCampaignInfo": {
                    "$ref": "LongRunningCampaignInfo",
                    "description": "Details required to define a long running FN campaign. Set iff this\ncampaign is a long running campaign. go/fn-lrc-dd"
                },
                "messageText": {
                    "description": "Notification text to be sent.\nRequired for SCHEDULED campaigns or RUNNING FN ABT experiment variants.",
                    "type": "string"
                },
                "registrationIds": {
                    "description": "Optional.\nUsed only for vanilla FN sends. This field is ignored for FN ABT sends.\nStores the registration IDs of the app instances to which the given\ncampaign targets. If there is at least one registration ID specified here,\nthen the campaign will target only the desired registration IDs\nirrespective of the targeting criteria. If this field is left empty, then\nthe conditions criteria specified in the Action\n(http://google3/developers/mobile/common/proto/action.proto?l=91&rcl=192606200)\nwill be used for targeting.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rollout": {
                    "$ref": "ExperimentRolloutInfo",
                    "description": "Read-only, must be cleared when duplicating Campaigns. Set iff this\nAction is the result of rolling out a go/firebase-abt Experiment."
                }
            },
            "type": "object"
        },
        "Objective": {
            "description": "An experiment objective.",
            "id": "Objective",
            "properties": {
                "isPrimary": {
                    "description": "Optional. Whether or not it is the primary objective.",
                    "type": "boolean"
                },
                "objectiveId": {
                    "description": "Required. Objective ID. This is an opaque string that can be used to\nrequest more details about a specific objective.",
                    "type": "string"
                },
                "scionObjective": {
                    "$ref": "ScionObjective",
                    "description": "An objective that has been setup for this experiment."
                },
                "trialsType": {
                    "description": "Required. For this objective, what is a trial.",
                    "enum": [
                        "UNKNOWN_TRIALS_TYPE",
                        "USERS",
                        "DAILY_USERS"
                    ],
                    "enumDescriptions": [
                        "",
                        "Each individual user who interacts with the experiment is a trial.\nThe objective is measured per-user.",
                        "Each day that a user interacts with the experiment is a trial.\nThe objective is measured per-user-per-day."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ObjectiveRequest": {
            "description": "Requested objective(s).",
            "id": "ObjectiveRequest",
            "properties": {
                "objectiveId": {
                    "description": "Explicit objective IDs. Required if the objective option is explicit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "objectiveOption": {
                    "description": "Optional. Defaults to PRIMARY",
                    "enum": [
                        "UNKNOWN_OBJECTIVE_OPTION",
                        "PRIMARY",
                        "ALL",
                        "EXPLICIT"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Results for the experiment's primary objective.",
                        "Results for all the experiment's objectives.",
                        "Results for specified experiment objectives."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ObjectiveResults": {
            "description": "Results for a single objective of an experiment.",
            "id": "ObjectiveResults",
            "properties": {
                "dayResults": {
                    "description": "Results per day.",
                    "items": {
                        "$ref": "DayResults"
                    },
                    "type": "array"
                },
                "latestOverallExperimentStatus": {
                    "$ref": "OverallExperimentStatus",
                    "description": "Required.\nThe overall experiment status for this objective based on the latest day\nresults."
                },
                "objective": {
                    "$ref": "Objective",
                    "description": "Required. The objective."
                },
                "variantMetrics": {
                    "description": "Objective-specific variant-level metric metadata. Some metrics\ndepend on the objective. For example, the outcome of a trial depends on\nthe objective. If the objective is ecommerce transaction value, the\nmetric metadata will describe the currency units. If it were a goal, the\nmetadata will describe a conversion rate. There will be one entry for\neach of the variant-level metrics, and the order will match the order\nof VariantResults' metric_values.",
                    "items": {
                        "$ref": "MetricMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OrCondition": {
            "description": "OR of sub-conditions.\nAn OR condition is true if any of its subconditions evaluate to true.\nIf there is an exception evaluating any of its subconditions, that\nsubcondition can be ignored if any other subcondition is true.",
            "id": "OrCondition",
            "properties": {
                "conditions": {
                    "description": "Evaluated in given order with short circuit of true.\nShould contain at least one condition and no more than 100 conditions.",
                    "items": {
                        "$ref": "Condition"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OsTypeCondition": {
            "description": "A condition that compares the device OS to the target OS.\nEvaluation:\nIf the OS Type cannot be determined, then the condition should be\nevaluated to false.",
            "id": "OsTypeCondition",
            "properties": {
                "operator": {
                    "description": "Required. The comparison operator.",
                    "enum": [
                        "UNKNOWN_OPERATOR",
                        "EQUALS",
                        "NOT_EQUALS"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Condition will evaluate to true if actual OS type is\nthe same as target OS type.",
                        "Condition will evaluate to true if actual OS type is\ndifferent than the target OS type."
                    ],
                    "type": "string"
                },
                "targetOsType": {
                    "description": "Required. The target OS Type.",
                    "enum": [
                        "UNKNOWN_OS_TYPE",
                        "ANDROID",
                        "IOS"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Android devices.",
                        "iOS devices.\nAdd more OS types here if needed."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OsVersionCondition": {
            "description": "A condition that compares the device OS version to the targeting OS version.\nIf the OS version of the device is not determined, evaluate to false.",
            "id": "OsVersionCondition",
            "properties": {
                "operator": {
                    "description": "Required\nOs version operator",
                    "enum": [
                        "UNKNOWN",
                        "STRING_CONTAINS",
                        "STRING_DOES_NOT_CONTAIN",
                        "STRING_EXACTLY_MATCHES"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Evaluate to true if at least one of the targeting OS versions is a\nsubstring of the actual OS version.",
                        "Evaluate to true if none of the targeting OS version is a substring of\nthe actual OS version.",
                        "Evaluate to true if the actual OS version exactly equals to one of the\ntargeting OS versions.\nTODO(arete) Add regex match/not match"
                    ],
                    "type": "string"
                },
                "targetingOsVersions": {
                    "description": "Required.\nA list of target OS versions.\nTargeting service accepts at least 1 and at most 50 values in this list.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OverallExperimentStatus": {
            "id": "OverallExperimentStatus",
            "properties": {
                "experimentResultState": {
                    "description": "The overall experiment result state.",
                    "enum": [
                        "UNKNOWN_EXPERIMENT_STATE",
                        "WAITING_FOR_DATA",
                        "NO_DATA_RECEIVED",
                        "COLLECTING_DATA",
                        "CLEAR_TIE",
                        "CLEAR_IMPROVEMENT",
                        "POSSIBLE_IMPROVEMENT",
                        "BASELINE_IS_PROBABLY_BEST"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "No data has been recorded in Optimize and experiment running time is\nshorter than threshold.",
                        "No data has been recorded in Optimize and experiment running time is\nlonger than threshold.",
                        "Data has been reported from Optimize and either of the following\ncondition is true: PVR is above the minimum PVR threshold, or Experiment\nrunning time is shorter than the minimum duration threshold.\nNote: this state can only exist in RUNNING state",
                        "Variants are tied.\nWe only look at leading variants for tie. Criteria for tie: 95% chance\nthat difference between potential leaders is within acceptable range.",
                        "Variant exists with prob(win) > 95% (no ties).",
                        "Variant exists with prob(win) >= 50% and prob(win) <= 95 (no ties).",
                        "All variants have prob(win) < 50%."
                    ],
                    "type": "string"
                },
                "leaderVariantIndexes": {
                    "description": "The indexes of the leader variants.\nNote: This field is required when experiment result state is\nCLEAR_TIE, CLEAR_IMPROVEMENT, POSSIBLE_IMPROVEMENT or\nBASELINE_IS_PROBABLY_BEST.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PercentCondition": {
            "description": "NOTE(tal): this atom is not allowed in ABT conditions.\n\nA condition that compares the instance pseudo\nrandom percentile to a given limit.",
            "id": "PercentCondition",
            "properties": {
                "microPercent": {
                    "description": "Required.\nThe limit of percentiles to target in micro-percents. The value must be\nin the range [0 and 100000000].",
                    "format": "uint32",
                    "type": "integer"
                },
                "operator": {
                    "description": "Required.",
                    "enum": [
                        "UNKNOWN",
                        "LESS_OR_EQUAL",
                        "GREATER_THAN"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Target a percentage less than or equal to the target percent.",
                        "Target a percentage greater than the target percent."
                    ],
                    "type": "string"
                },
                "seed": {
                    "description": "Optional.\nThe seed used when evaluating the hash function to map an instance to\na value in the hash space. This is a string which can have 0 - 32\ncharacters and can contain ASCII characters [-_.0-9a-zA-Z].\nThe string is case-sensitive.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PredictionsCondition": {
            "description": "A condition to target by predictions on individual app instances.\nUses signals generated by Firebase Sage.",
            "id": "PredictionsCondition",
            "properties": {
                "operator": {
                    "description": "Required.",
                    "enum": [
                        "UNKNOWN",
                        "IN_AT_LEAST_ONE",
                        "IN_ALL"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The condition will be true if the App Instance is a member of\nat least one of the target predictions in the set.",
                        "The condition will be true if the App Instance is a member of every\ntarget prediction in the set."
                    ],
                    "type": "string"
                },
                "predictionTargets": {
                    "description": "Required.\nFor V1, only supporting one target.\nOrder doesn't matter.",
                    "items": {
                        "$ref": "PredictionsTarget"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PredictionsTarget": {
            "description": "Represents an expected value for a given prediction id.",
            "id": "PredictionsTarget",
            "properties": {
                "predictionRiskProfileId": {
                    "description": "Required.\nUnique ID from Sage that identifies an event + risk profile combination.\nThe implicit operation for each target is IS_POSITIVE.\n\nFor any operator, if this list contains a risk profile id, which does not\nexist, then the condition is evaluated as false.\n",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProductAction": {
            "id": "ProductAction",
            "properties": {
                "notificationAction": {
                    "$ref": "NotificationSpecificAction",
                    "description": "Firebase Notifications (FN) specific action."
                },
                "remoteConfigAction": {
                    "$ref": "RemoteConfigSpecificAction",
                    "description": "Firebase Remote Config (RC) specific action."
                }
            },
            "type": "object"
        },
        "ProjectAnalyticsMetadata": {
            "description": "Analytics Metadata for the Firebase project.",
            "id": "ProjectAnalyticsMetadata",
            "properties": {
                "appMetadata": {
                    "description": "App specific data for a Firebase Project.\nThere can be 0-1000 apps.",
                    "items": {
                        "$ref": "FirebaseAppMetadata"
                    },
                    "type": "array"
                },
                "audiences": {
                    "description": "Available (shared) audiences for this Project. There can be a maximum of\n50 audiences for a project.",
                    "items": {
                        "$ref": "AnalyticsAudienceMetadata"
                    },
                    "type": "array"
                },
                "dataSharingEnabled": {
                    "description": "Required.\nDetermines whether metadata should be shared. If data sharing is disabled,\nno audience, user property, system objective or user event data will be\nexposed.",
                    "type": "boolean"
                },
                "serviceSpecificMetadata": {
                    "description": "System objective metadata keyed by service name.\nThis format allows for Console to preload metadata for all services.",
                    "items": {
                        "$ref": "ServiceSpecificMetadata"
                    },
                    "type": "array"
                },
                "systemObjectives": {
                    "description": "Available (shared) system objectives. Different for each impact service.\nThere can be a maximum of 10 objectives, as of Feb 2018.\nThe order of the system objectives matters. UI should display these\nobjectives in the order they are returned from the server.",
                    "items": {
                        "$ref": "SystemObjectiveMetadata"
                    },
                    "type": "array"
                },
                "userProperties": {
                    "description": "Available (shared) user properties for this Project. There can be a maximum\nof 25 user properties set for a Project. This will contain only\nuser-defined user properties (as opposed to system defined ones).",
                    "items": {
                        "$ref": "AnalyticsUserPropertyMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RealtimeExperimentMetrics": {
            "description": "Realtime metrics for a single experiment.",
            "id": "RealtimeExperimentMetrics",
            "properties": {
                "instancesPerMinute": {
                    "description": "Optional.\nOnly present when realtime_metrics_status is METRICS_FOUND.\nThere will be exactly 30 entries - one for each minute worth of instance\ncount. As of August 2018, realtime metric for Remote Config experiments\nis supported.",
                    "items": {
                        "$ref": "InstancesPerMinute"
                    },
                    "type": "array"
                },
                "realtimeMetricsStatus": {
                    "description": "Required.",
                    "enum": [
                        "UNKNOWN_REALTIME_METRICS_STATUS",
                        "EXPERIMENT_NOT_RUNNING",
                        "REALTIME_METRICS_NOT_FOUND",
                        "REALTIME_METRICS_FOUND"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "No realtime metrics since the experiment was not in the RUNNING state.",
                        "Experiment is RUNNING but no realtime metrics were found.",
                        "Realtime metrics were found for this experiment."
                    ],
                    "type": "string"
                },
                "uniqueTrials": {
                    "description": "The total number of unique users seen in the realtime pipeline time\nhorizon (30 mins as of August 2018). Will always be 0 when\nrealtime_metrics_status is not REALTIME_METRICS_FOUND.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RemoteConfigAction": {
            "description": "The Action which can be performed by Firebase Remote Config.\nThis is defined at a variant level.",
            "id": "RemoteConfigAction",
            "properties": {
                "parameters": {
                    "description": "Can have 0-20 parameters (both included).",
                    "items": {
                        "$ref": "RemoteConfigSetParameter"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RemoteConfigExperimentOptions": {
            "description": "Remote Config options to be applied to all variants in this experiment.\nThis is defined at an experiment level.",
            "id": "RemoteConfigExperimentOptions",
            "properties": {
                "parameterKeys": {
                    "description": "Required.\nA list of all parameter names which are part of this experiment. It is\nnot necessary that this must be defined in Remote Config base\nconfiguration. Length must be between 1 - 256 characters.\nThe order of the parameters determines the display order in the UI.\nEach variant in an experiment can only include parameters which have been\ndefined here.\nMutable only in the PENDING state.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RemoteConfigExperimentSettings": {
            "description": "RemoteConfig settings to be applied to all variants in this experiment.\nThese options are considered to be mutable in PENDING and RUNNING states.\nThis is defined at an experiment level.\nEmpty for now.",
            "id": "RemoteConfigExperimentSettings",
            "properties": {},
            "type": "object"
        },
        "RemoteConfigParameter": {
            "description": "Represents a single RC parameter, as a key, a value_option, and\ncorresponding parameter metadata.",
            "id": "RemoteConfigParameter",
            "properties": {
                "description": {
                    "description": "Optional.\nA description for this RemoteConfig parameter.",
                    "type": "string"
                },
                "dropParameter": {
                    "description": "If this boolean is set, then this parameter will not be included in the\noutput of RemoteConfig, which will signal the RemoteConfig SDK to use\nthe default value defined in the app. If the app doesn't define a\ndefault value for this parameter, a static default (per data type) will\nbe used instead.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Required.\nName/key of the RemoteConfig parameter.\nLength must be within the range of [1-256] characters.",
                    "type": "string"
                },
                "noChange": {
                    "description": "Should only be used if the action is defined within an A/B Testing\nexperiment.\nIf this boolean is set, the experiment action will not override or drop\nthe parameter value defined within the standalone RemoteConfig. In\nother words, an app instance will get the value they'd normally get if\nthere were no experiments.",
                    "type": "boolean"
                },
                "value": {
                    "description": "A string value, which can also be an empty string.\nIf the action is defined within an A/B Testing experiment, this value\nwill then override the value defined in the standalone RemoteConfig (if\nany value was defined for this key in the standalone RemoteConfig).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RemoteConfigSetParameter": {
            "description": "The parameter value to be set for a Remote Config Action.",
            "id": "RemoteConfigSetParameter",
            "properties": {
                "experimentValue": {
                    "description": "The value to set for the parameter.\nA *total* maximum size of 500,000 characters for parameter values\nacross all value fields in an Experiment Variant.",
                    "type": "string"
                },
                "key": {
                    "description": "Required.\nThe key of the Remote Config parameter.\nLength must be between 1 - 256 characters.\nThis must be one of the parameters which has been set in\nremote_config_options.",
                    "type": "string"
                },
                "useConfigDefault": {
                    "description": "The default value which gets evaluated for the client should be used\ninstead of setting a value at the experiment. This would be the value\nthat the client would receive if there was no active experiment.\nIf set, this should always be true.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RemoteConfigSpecificAction": {
            "id": "RemoteConfigSpecificAction",
            "properties": {
                "parameters": {
                    "description": "RemoteConfig action is defined as a set of parameters.",
                    "items": {
                        "$ref": "RemoteConfigParameter"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Schedule": {
            "id": "Schedule",
            "properties": {
                "endTime": {
                    "$ref": "TargetDateTimeZone",
                    "description": "Optional.\nDefines when this schedule should end. An empty end_time means\n'unbounded'."
                },
                "startTime": {
                    "$ref": "TargetDateTimeZone",
                    "description": "Optional.\nDefines when this schedule should start. An empty start_time means 'now'."
                }
            },
            "type": "object"
        },
        "ScionExperimentKey": {
            "description": "A product key which specifies where to find the experiment.",
            "id": "ScionExperimentKey",
            "properties": {
                "appId": {
                    "description": "Required field. ID of an app instance in the GMP project. In GMP, an app\nbeing in a specific store counts as an instance; so the iOS and Android\nversions of an app would be two different client_ids under the same\nproject_number. This ID is meant to be exposed externally.",
                    "type": "string"
                },
                "experimentMeasurementId": {
                    "description": "Required field. The experiment id (assigned by firebase) of the experiment\nthat will be used when hits are sent to Scion. Note: this should be the\nraw experiment ID with no prefix (12345 as opposed to exp_n_12345).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ScionObjective": {
            "id": "ScionObjective",
            "properties": {
                "customObjective": {
                    "$ref": "CustomObjective",
                    "description": "Configuration for user-defined custom objectives (based on arbitrary\nevent names in firebase, user specifies aggregation logic)."
                },
                "isPrimary": {
                    "description": "If true, this is the primary objective of the experiment. Exactly one\nobjective should be marked primary.",
                    "type": "boolean"
                },
                "optimizationFunction": {
                    "description": "How to optimize this metric (if more is good, maximize, if less is good,\nminimize).",
                    "enum": [
                        "UNKNOWN_OPTIMIZATION_FUNCTION",
                        "MAXIMIZE",
                        "MINIMIZE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "systemObjective": {
                    "$ref": "SystemObjective",
                    "description": "Configuration for system objectives (configured by the Optimize/Scion\nteam, system defines aggregation logic, complex metrics like revenue go\nhere)."
                }
            },
            "type": "object"
        },
        "SendExperimentTestEventRequest": {
            "description": "Request message for AbtExperimentService.SendExperimentTestEvent.",
            "id": "SendExperimentTestEventRequest",
            "properties": {},
            "type": "object"
        },
        "ServiceSpecificMetadata": {
            "description": "Metadata tied to a specific Firebase service.",
            "id": "ServiceSpecificMetadata",
            "properties": {
                "service": {
                    "description": "The Firebase Service for which the metadata is being returned.",
                    "enum": [
                        "UNKNOWN_SERVICE",
                        "REMOTE_CONFIG",
                        "NOTIFICATION",
                        "IN_APP_MESSAGING"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The Firebase Remote Config Service.",
                        "The Firebase Notifications Service.",
                        "The Firebase In App Messaging Service."
                    ],
                    "type": "string"
                },
                "systemObjectives": {
                    "description": "Available (shared) system objectives for the given impact service.\nThere can be a maximum of 10 objectives.\nThe order of the system objectives matters. UI should display these\nobjectives in the order they are returned from the server.",
                    "items": {
                        "$ref": "SystemObjectiveMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ServiceSpecificOptions": {
            "description": "Service specific options for an experiment.\nThese are linked from the ExperimentDefinition, and hence are mutable only\nin the PENDING state.",
            "id": "ServiceSpecificOptions",
            "properties": {
                "notificationOptions": {
                    "$ref": "NotificationExperimentOptions",
                    "description": "Notification specific options."
                },
                "remoteConfigOptions": {
                    "$ref": "RemoteConfigExperimentOptions",
                    "description": "Remote Config service options."
                }
            },
            "type": "object"
        },
        "ServiceSpecificSettings": {
            "description": "Service specific settings of an experiment.\nThese are linked from ExperimentSettings, and hence are mutable in PENDING\nand RUNNING states.",
            "id": "ServiceSpecificSettings",
            "properties": {
                "notificationSettings": {
                    "$ref": "NotificationExperimentSettings",
                    "description": "Notification specific settings."
                },
                "remoteConfigSettings": {
                    "$ref": "RemoteConfigExperimentSettings",
                    "description": "Remote Config service settings"
                }
            },
            "type": "object"
        },
        "SingleValue": {
            "description": "A single metric value.",
            "id": "SingleValue",
            "properties": {
                "formattedValue": {
                    "description": "Required. Formatted value for display.",
                    "type": "string"
                },
                "rawValue": {
                    "description": "Required. Raw value.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "SystemObjective": {
            "id": "SystemObjective",
            "properties": {
                "objectiveName": {
                    "description": "Required.\nOne of the prefined system objective names, such as purchase_revenue.\nThe name determines what to measure and how to count it. A full list of\nsupported system objectives is available in\njava/com/google/analytics/optimize/reporting/scion/metrics/ScionObjectives.java",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SystemObjectiveDetails": {
            "description": "A pre-defined objective.",
            "id": "SystemObjectiveDetails",
            "properties": {
                "objectiveName": {
                    "description": "Required.\nOne of the prefined system objective names, such as purchase_revenue.\nThe name determines what to measure and how to count it. For example,\napp_exception measures the number of app_exception event, while\nunique_user:app_exception measures the number of unique users who\nwho have had at least one app_exception event.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SystemObjectiveMetadata": {
            "description": "Analytics System Objectives which are allowed for this app.",
            "id": "SystemObjectiveMetadata",
            "properties": {
                "systemObjectiveName": {
                    "description": "Required.\nThe system objective name. These are synthetic events - for example ARPU\n(Average revenue per user) - which are backed by real scion events.",
                    "type": "string"
                },
                "trialsType": {
                    "description": "Required.\nThe trial type (eg. users or daily users) for this system objective.",
                    "enum": [
                        "UNKNOWN_TRIALS_TYPE",
                        "USERS",
                        "DAILY_USERS"
                    ],
                    "enumDescriptions": [
                        "",
                        "Each individual user who interacts with the experiment is a trial.\nThe objective is measured per-user.",
                        "Each day that a user interacts with the experiment is a trial.\nThe objective is measured per-user-per-day."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TargetDateTimeZone": {
            "description": "NOTE(tal): this atom is not used in ABT/FN and ABT/RC  I/O 2017 launch\nand it will rejected by the ABT condition validator.\n\nA representation of Date-time and timezone offset.",
            "id": "TargetDateTimeZone",
            "properties": {
                "date": {
                    "$ref": "Date",
                    "description": "Required.\nA date object that must have all year, month, and day fields set."
                },
                "time": {
                    "$ref": "TimeOfDay",
                    "description": "Required.\nA time of the day."
                },
                "timeZone": {
                    "description": "Optional.\nTime zone in Olson ID format (eg: \"America/Los_Angeles\") if the condition\nshould be evaluated according to a standard timezone. If it should be\nevaluated at the client time zone, this field must be empty.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TimeOfDay": {
            "description": "Represents a time of day. The date and time zone are either not significant\nor are specified elsewhere. An API may choose to allow leap seconds. Related\ntypes are google.type.Date and `google.protobuf.Timestamp`.",
            "id": "TimeOfDay",
            "properties": {
                "hours": {
                    "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose\nto allow the value \"24:00:00\" for scenarios like business closing time.",
                    "format": "int32",
                    "type": "integer"
                },
                "minutes": {
                    "description": "Minutes of hour of day. Must be from 0 to 59.",
                    "format": "int32",
                    "type": "integer"
                },
                "nanos": {
                    "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
                    "format": "int32",
                    "type": "integer"
                },
                "seconds": {
                    "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may\nallow the value 60 if it allows leap-seconds.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "TopicCondition": {
            "description": "A condition that compares if the instance belongs to the Topic.\nEvaluation:\nIf the membership to the topic cannot be determined or if the Topic does not\nexist, the condition should evaluate to false.\nSpecial restriction: As of Oct 2015, only use case NOTIFICATIONS\nsupports this condition.",
            "id": "TopicCondition",
            "properties": {
                "topicName": {
                    "description": "The topic name including prefix, e.g. \"/topics/whales\".\nA topic can span multiple apps.\nThis is case-sensitive. Maximum length for topic name is XYZ characters\nand minimum length is (9?).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TrueCondition": {
            "description": "This condition always evaluates to true.",
            "id": "TrueCondition",
            "properties": {},
            "type": "object"
        },
        "UpdateExperimentRequest": {
            "description": "Request message for AbtExperimentService.UpdateExperiment.\nWhen modifying the Experiment Definition in the PENDING state, each variant\nmust belong to the same service as what was defined when the experiment\nwas created.\nAll the fields to be updated are optional. If not specified in the update\nrequest, those fields will not be updated for the experiment.",
            "id": "UpdateExperimentRequest",
            "properties": {
                "definition": {
                    "$ref": "ExperimentDefinition",
                    "description": "Optional.\nThe definition of an experiment. This is immutable once\nan experiment is in the RUNNING state."
                },
                "displayMetadata": {
                    "$ref": "ExperimentDisplayMetadata",
                    "description": "Optional.\nThe display preferences of an experiment."
                },
                "etag": {
                    "description": "Optional.\nEtag for the Experiment Resource.\nCan be filled to ensure that the correct version of the experiment is\nupdated. This will ensure that there are no conflicting writes. If no\n`etag` is provided, then the update will over-write the experiment blindly.\nSee\nhttps://g3doc.corp.google.com/google/g3doc/style/design_patterns.md?cl=head#ETags",
                    "type": "string"
                },
                "mendelExperimentId": {
                    "description": "Optional.\nThe experiments that this project belongs to.\n(Ideally we would like the list of experiments which are related to just\nABT, but it is possible we will get *all* experiments that apply to\nthe user).\nIn mendel, an experiment id corresponds to a variant in an ABT experiment.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "settings": {
                    "$ref": "ExperimentSettings",
                    "description": "Optional.\nThe experiment settings. This is mutable in the PENDING and\nRUNNING states."
                },
                "state": {
                    "description": "Optional.\nThe new state of the Experiment.\nOnly the following state transitions are allowed:\nPENDING -> RUNNING\nRUNNING -> STOPPED.",
                    "enum": [
                        "UNKNOWN_STATE",
                        "PENDING",
                        "RUNNING",
                        "DONE",
                        "EXPIRED"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "Initial editing. Not run yet.",
                        "Experiment is currently running.",
                        "Experiment run in the past.",
                        "Experiment expired past the maximum runtime."
                    ],
                    "type": "string"
                },
                "testing": {
                    "$ref": "ExperimentTesting",
                    "description": "Optional.\nExperiment Test Options. This is mutable in the PENDING state."
                }
            },
            "type": "object"
        },
        "VariantDimensionValue": {
            "description": "A variant dimension value.",
            "id": "VariantDimensionValue",
            "properties": {
                "formattedValue": {
                    "description": "Required. Formatted value for display.",
                    "type": "string"
                },
                "variant": {
                    "description": "Required. The variant.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "VariantMetricRequest": {
            "description": "Requested variant-level experiment metric.",
            "id": "VariantMetricRequest",
            "properties": {
                "credibleIntervalWidths": {
                    "description": "Optional. Only applies to distributions. See CredibleInterval for\ndescription. Specifying a credible_interval_width of 50 will return an\ninterval with the 25th and 75th percentiles of the distribution.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Required. Variant metric type.",
                    "enum": [
                        "UNKNOWN_VARIANT_METRIC_TYPE",
                        "TRIALS",
                        "CUMULATIVE_TRIALS",
                        "EMPIRICAL_OUTCOMES",
                        "CUMULATIVE_EMPIRICAL_OUTCOMES",
                        "OUTCOME_PER_TRIAL_DISTRIBUTION",
                        "PROBABLE_IMPROVEMENT_DISTRIBUTION",
                        "PROBABILITY_TO_BEAT_BASELINE",
                        "PROBABILITY_TO_BE_BEST"
                    ],
                    "enumDescriptions": [
                        "Per http://go/protodosdonts",
                        "The number of experiment trials conducted on a given day.",
                        "The total number of experiment trials up through the given day.",
                        "The outcomes of the experiment on a given day. The outcome type depends on\nthe objective.",
                        "The total of the outcomes up through the given day. The outcome type\ndepends on the objective.",
                        "The modeled distribution of outcomes per trial for all trials up through\nthe given day. The outcome type depends on the objective.\nAvailable credible interval widths: 50, 95.",
                        "The modeled distribution of the variant's improvement over the baseline\nvariant for all trials up through the given day. The baseline variant is\nthe control.\nAvailable credible interval widths: 50, 95.",
                        "The probability of the variant to outperform the baseline variant.\nThe baseline variant is the control.",
                        "The probability of the variant to outperform all other variants."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VariantResults": {
            "description": "Results for a single variant, single day, and single objective of an\nexperiment.",
            "id": "VariantResults",
            "properties": {
                "metricValues": {
                    "description": "Metric values for the variant.",
                    "items": {
                        "$ref": "MetricValue"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "VariantSummary": {
            "description": "All the information we need to keep about a variant of the original\nExperiment.",
            "id": "VariantSummary",
            "properties": {
                "hasMessage": {
                    "description": "Required. True iff the variant delivered a user-visible non-empty\nnotification message (i.e. it was not a control variant).",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Firebase A/B Testing Private Preprod API",
    "version": "v1",
    "version_module": true
}