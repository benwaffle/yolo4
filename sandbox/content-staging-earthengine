{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/cloud-platform": {
                    "description": "View and manage your data across Google Cloud Platform services"
                },
                "https://www.googleapis.com/auth/cloud-platform.read-only": {
                    "description": "View your data across Google Cloud Platform services"
                },
                "https://www.googleapis.com/auth/devstorage.full_control": {
                    "description": "Manage your data and permissions in Google Cloud Storage"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://staging-earthengine.sandbox.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Earth Engine",
    "description": "Earth Engine is a platform for geospatial data storage, analysis, and visualization. This early-access REST API provides access to a subset of Earth Engine functionality.\n",
    "discoveryVersion": "v1",
    "documentationLink": "https://developers.google.com/earth-engine",
    "fullyEncodeReservedExpansion": true,
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "earthengine:v1alpha",
    "kind": "discovery#restDescription",
    "name": "earthengine",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "projects": {
            "methods": {
                "listAssets": {
                    "description": "Lists any container asset, such as a folder or collection.",
                    "flatPath": "v1alpha/projects/{projectsId}:listAssets",
                    "httpMethod": "GET",
                    "id": "earthengine.projects.listAssets",
                    "parameterOrder": [
                        "parent"
                    ],
                    "parameters": {
                        "pageSize": {
                            "description": "An optional maximum number of results per page. The server may return fewer\nassets than requested. If unspecified, server will pick an appropriate\ndefault.",
                            "format": "int32",
                            "location": "query",
                            "type": "integer"
                        },
                        "pageToken": {
                            "description": "An optional token identifying a page of results the server should return.\nTypically this is the value of\nListAssetsResponse.next_page_token\nreturned from the previous call to the `ListAssets` method.",
                            "location": "query",
                            "type": "string"
                        },
                        "parent": {
                            "description": "The name of the container asset to list.\n`parent` is of the format \"projects/*\" or \"projects/*/assets/**\"\n(e.g., \"projects/[PROJECT]\" or\n\"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are currently under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").\nIf \"projects/earthengine-legacy\" is specified, the response will consist of\na list of all top-level folders owned by the requesting user.",
                            "location": "path",
                            "pattern": "^projects/[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1alpha/{+parent}:listAssets",
                    "response": {
                        "$ref": "ListAssetsResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                    ]
                }
            },
            "resources": {
                "algorithms": {
                    "methods": {
                        "list": {
                            "description": "Gets the list of all the algorithms available for use in Expressions.",
                            "flatPath": "v1alpha/projects/{projectsId}/algorithms",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.algorithms.list",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/algorithms",
                            "response": {
                                "$ref": "ListAlgorithmsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        }
                    }
                },
                "assets": {
                    "methods": {
                        "copy": {
                            "description": "Copies an asset.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:copy",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.assets.copy",
                            "parameterOrder": [
                                "sourceName"
                            ],
                            "parameters": {
                                "sourceName": {
                                    "description": "The name of the asset to copy.\n`name` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").\n(e.g., \"assets/users/[USER]/[ASSET]\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+sourceName}:copy",
                            "request": {
                                "$ref": "CopyAssetRequest"
                            },
                            "response": {
                                "$ref": "EarthEngineAsset"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "create": {
                            "description": "Creates an asset. Only folder and image collection assets may be\ncreated using this method. The name of the asset to create must\nbe specified in the `name` field of the request body.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.assets.create",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "assetId": {
                                    "description": "The ID of the asset to create. Equivalent to name but without\nthe \"projects/*/assets\" (e.g., users/[USER]/[ASSET]).",
                                    "location": "query",
                                    "type": "string"
                                },
                                "parent": {
                                    "description": "The parent of the asset collection (e.g., \"projects/*\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}/assets",
                            "request": {
                                "$ref": "EarthEngineAsset"
                            },
                            "response": {
                                "$ref": "EarthEngineAsset"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "delete": {
                            "description": "Deletes an asset.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}",
                            "httpMethod": "DELETE",
                            "id": "earthengine.projects.assets.delete",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the asset to delete.\n`name` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}",
                            "response": {
                                "$ref": "Empty"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "get": {
                            "description": "Gets detailed information about an asset.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.assets.get",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the asset to get.\n`name` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}",
                            "response": {
                                "$ref": "EarthEngineAsset"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        },
                        "getIamPolicy": {
                            "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:getIamPolicy",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.assets.getIamPolicy",
                            "parameterOrder": [
                                "resource"
                            ],
                            "parameters": {
                                "resource": {
                                    "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+resource}:getIamPolicy",
                            "request": {
                                "$ref": "GetIamPolicyRequest"
                            },
                            "response": {
                                "$ref": "Policy"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "getPixels": {
                            "description": "Fetches pixels from an image asset. This custom method allows the caller\nto request an arbitrary tile of pixels from an image, optionally\nspecifying the bands and map projection. Masked or missing data will\nbe encoded as zeroes.\n\nRequests are limited to 16MB in uncompressed data per request, computed\nas the product of the request dimensions in pixels, the number of image\nbands requested, and the number of bytes per pixel for each band.\nRequests are also limited to at most 10000 pixels in either dimension and\nat most 100 bands. Requests exceeding these limits will result in an error\ncode of 400 (BAD_REQUEST).\n\nIf successful, the response body contains the requested pixel data in the\nencoding specified in the `file_format` field of the request.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:getPixels",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.assets.getPixels",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the image asset from which to get pixels.\n`name` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}:getPixels",
                            "request": {
                                "$ref": "GetPixelsRequest"
                            },
                            "response": {
                                "$ref": "HttpBody"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        },
                        "listAssets": {
                            "description": "Lists any container asset, such as a folder or collection.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:listAssets",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.assets.listAssets",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "pageSize": {
                                    "description": "An optional maximum number of results per page. The server may return fewer\nassets than requested. If unspecified, server will pick an appropriate\ndefault.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "An optional token identifying a page of results the server should return.\nTypically this is the value of\nListAssetsResponse.next_page_token\nreturned from the previous call to the `ListAssets` method.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "parent": {
                                    "description": "The name of the container asset to list.\n`parent` is of the format \"projects/*\" or \"projects/*/assets/**\"\n(e.g., \"projects/[PROJECT]\" or\n\"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are currently under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").\nIf \"projects/earthengine-legacy\" is specified, the response will consist of\na list of all top-level folders owned by the requesting user.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}:listAssets",
                            "response": {
                                "$ref": "ListAssetsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        },
                        "listFeatures": {
                            "description": "Lists the features in a table asset. This method allows the caller to apply\nspatiotemporal and property filters to a table. Results are returned\nas a list of GeoJSON feature objects.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:listFeatures",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.assets.listFeatures",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "filter": {
                                    "description": "If present, specifies additional simple property filters.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "An optional maximum number of results per page. The server may return fewer\nassets than requested. If unspecified, server will pick an appropriate\ndefault.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "An optional token identifying a page of results the server should return.\nTypically, this is the value of\nListFeaturesResponse.next_page_token\nreturned from the previous call to the `ListFeatures` method.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "parent": {
                                    "description": "The name of the table asset to list.\n`parent` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "region": {
                                    "description": "If present, a geometry defining a query region, specified as a GeoJSON\ngeometry string (see RFC 7946).",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}:listFeatures",
                            "response": {
                                "$ref": "ListFeaturesResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        },
                        "listImages": {
                            "description": "Lists the images in an image collection asset. This method allows the\ncaller to apply spatiotemporal and metadata filters to an image collection.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:listImages",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.assets.listImages",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "endTime": {
                                    "description": "If present, filters results to those whose timestamp is less than this\nvalue (exclusive).",
                                    "format": "google-datetime",
                                    "location": "query",
                                    "type": "string"
                                },
                                "filter": {
                                    "description": "If present, specifies additional simple property filters.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "An optional maximum number of results per page. The server may return fewer\nassets than requested. If unspecified, server will pick an appropriate\ndefault.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "An optional token identifying a page of results the server should return.\nTypically, this is the value of\nListImagesResponse.next_page_token\nreturned from the previous call to the `ListImages` method.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "parent": {
                                    "description": "The name of the image collection asset to list.\n`parent` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "region": {
                                    "description": "If present, a geometry defining a query region, specified as a GeoJSON\ngeometry string (see RFC 7946). Spatial intersection is accurate to one\nmeter.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "startTime": {
                                    "description": "If present, filters results to those whose timestamp is at least\nthis value (inclusive).",
                                    "format": "google-datetime",
                                    "location": "query",
                                    "type": "string"
                                },
                                "view": {
                                    "description": "Specifies which parts of the `Image` resource should be returned in the\nresponse.",
                                    "enum": [
                                        "IMAGE_VIEW_UNSPECIFIED",
                                        "FULL",
                                        "BASIC"
                                    ],
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}:listImages",
                            "response": {
                                "$ref": "ListImagesResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        },
                        "move": {
                            "description": "Moves an asset.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:move",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.assets.move",
                            "parameterOrder": [
                                "sourceName"
                            ],
                            "parameters": {
                                "sourceName": {
                                    "description": "The name of the asset to move.\n`name` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+sourceName}:move",
                            "request": {
                                "$ref": "MoveAssetRequest"
                            },
                            "response": {
                                "$ref": "EarthEngineAsset"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "patch": {
                            "description": "Updates an asset.\nThere are a number of constraints on the update operation:\n\n* Only the `title`, `description`, `start_time`, `end_time`, and\n  `properties` fields of the asset can be updated.\n* Naming `\"properties\"` in `update_mask` results in all user-defined\n  properties of the asset being replaced by the properties in `asset`.\n* Naming `\"title\"`, `\"description\"`, `\"start_time\"` or `\"end_time\"` in\n  `update_mask` and not providing a value in `asset` results in that\n  field becoming unset.\n* It is possible to update individual properties by naming them in\n  `update_mask`, like `\"properties.my_property_name\"`. The property's\n  value will be set to the corresponding value from\n  `asset.properties`. If there is no corresponding value in\n  `asset.properties`, or if there is a value but it is a `NullValue`,\n  the property will be deleted from the asset.\n* Properties can be set only to string or number values, or deleted by\n  specifying a `NullValue`.\n* Supplying an empty `update_mask` will result in the asset's timestamps\n  and properties all being replaced by the values in `asset`.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}",
                            "httpMethod": "PATCH",
                            "id": "earthengine.projects.assets.patch",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the asset. `name` is of the format \"projects/*/assets/**\"\n(e.g. \"projects/earthengine-legacy/assets/users/<USER>/<ASSET>\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}",
                            "request": {
                                "$ref": "UpdateAssetRequest"
                            },
                            "response": {
                                "$ref": "EarthEngineAsset"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "setIamPolicy": {
                            "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:setIamPolicy",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.assets.setIamPolicy",
                            "parameterOrder": [
                                "resource"
                            ],
                            "parameters": {
                                "resource": {
                                    "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+resource}:setIamPolicy",
                            "request": {
                                "$ref": "SetIamPolicyRequest"
                            },
                            "response": {
                                "$ref": "Policy"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "testIamPermissions": {
                            "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning.",
                            "flatPath": "v1alpha/projects/{projectsId}/assets/{assetsId}:testIamPermissions",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.assets.testIamPermissions",
                            "parameterOrder": [
                                "resource"
                            ],
                            "parameters": {
                                "resource": {
                                    "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/assets/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+resource}:testIamPermissions",
                            "request": {
                                "$ref": "TestIamPermissionsRequest"
                            },
                            "response": {
                                "$ref": "TestIamPermissionsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        }
                    }
                },
                "filmstripThumbnails": {
                    "methods": {
                        "create": {
                            "description": "Creates an ID that can be used to render an image containing multiple\nimages from a collection.\n\nThis is used in conjunction with `GetFilmstripThumbnailPixels`. A call to\n`CreateFilmstripThumbnail` provides an expression and some output options.\nThe result of `CreateFilmstripThumbnail` is an ID that represents an image\nthat is the result of evaluating that expression and applying those\noptions. Subsequently, calls to `GetFilmstripThumbnailPixels` can be made\nto get an image showing all of the elements of an ImageCollection,\nconcatenated top-to-bottom or side-to-side. The ID will be valid for a\nmoderate period (a few hours).\n\nThe request is limited to 512*512*100 pixels in total, across all Images in\nthe ImageCollection. Requests exceeding these limits will result in an\nerror code of 400 (BAD_REQUEST).",
                            "flatPath": "v1alpha/projects/{projectsId}/filmstripThumbnails",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.filmstripThumbnails.create",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "parent": {
                                    "description": "The parent of the location where the filmstrip thumbnail will be\ncreated (e.g., \"projects/*\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}/filmstripThumbnails",
                            "request": {
                                "$ref": "FilmstripThumbnail"
                            },
                            "response": {
                                "$ref": "FilmstripThumbnail"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "getPixels": {
                            "description": "Computes an image showing the result of a computation. The\nrequest includes values (an ID and authorisation token) from a\nprevious `CreateFilmstripThumbnail` request.",
                            "flatPath": "v1alpha/projects/{projectsId}/filmstripThumbnails/{filmstripThumbnailsId}:getPixels",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.filmstripThumbnails.getPixels",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "A filmstrip thumbnail name from `FilmstripThumbnail.name`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/filmstripThumbnails/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}:getPixels",
                            "response": {
                                "$ref": "HttpBody"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        }
                    }
                },
                "image": {
                    "methods": {
                        "computePixels": {
                            "description": "Computes a tile of pixels by performing an arbitrary computation on image\ndata.\n\nRequests are limited to 16MB in uncompressed data per request, computed\nas the product of the request dimensions in pixels, the number of image\nbands requested, and the number of bytes per pixel for each band.\nRequests are also limited to at most 10000 pixels in either dimension and\nat most 100 bands. Requests exceeding these limits will result in an error\ncode of 400 (BAD_REQUEST).\n\nIf successful, the response body contains the requested pixel data in the\nencoding specified in the `file_format` field of the request.",
                            "flatPath": "v1alpha/projects/{projectsId}/image:computePixels",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.image.computePixels",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/image:computePixels",
                            "request": {
                                "$ref": "ComputePixelsRequest"
                            },
                            "response": {
                                "$ref": "HttpBody"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        },
                        "export": {
                            "description": "Initiates a batch process that computes an image and writes the result\nto one of several destinations.",
                            "flatPath": "v1alpha/projects/{projectsId}/image:export",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.image.export",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/image:export",
                            "request": {
                                "$ref": "ExportImageRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/devstorage.full_control"
                            ]
                        },
                        "import": {
                            "description": "Imports an image.",
                            "flatPath": "v1alpha/projects/{projectsId}/image:import",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.image.import",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/image:import",
                            "request": {
                                "$ref": "ImportImageRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        }
                    }
                },
                "imageCollection": {
                    "methods": {
                        "computeImages": {
                            "description": "Computes a set of features by applying an arbitrary computation to\nfeatures in one or more tables. Results are returned as a list of images.",
                            "flatPath": "v1alpha/projects/{projectsId}/imageCollection:computeImages",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.imageCollection.computeImages",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/imageCollection:computeImages",
                            "request": {
                                "$ref": "ComputeImagesRequest"
                            },
                            "response": {
                                "$ref": "ComputeImagesResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        }
                    }
                },
                "map": {
                    "methods": {
                        "export": {
                            "description": "Initiates a batch process that computes a tiled map and writes the result\nto Google Cloud Storage.",
                            "flatPath": "v1alpha/projects/{projectsId}/map:export",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.map.export",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/map:export",
                            "request": {
                                "$ref": "ExportMapRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/devstorage.full_control"
                            ]
                        }
                    }
                },
                "maps": {
                    "methods": {
                        "create": {
                            "description": "Creates an ID that can be used to render map tiles showing the results\nof a computation. The resulting ID should be used as part of\n`GetTile` requests.\n\nThis is used in conjunction with `GetTile`. A call to `CreateMap` provides\nan expression and some output options. The result of `CreateMap` is a\nmap ID that represents an image that is the result of evaluating that\nexpression and applying those options. Subsequently, calls to `GetTile`\ncan be made to get image data for a tile of the resulting image, at\nany desired location and zoom. The map ID will be valid for a moderate\nperiod (a few hours).\n\nThe most common use case for this pair of endpoints is to populate a\nmap viewport with a visualization of the output of some computation.\nIn order for that to be possible, the computation output has to meet\nsome reasonable requirements for the requested image format. In\nparticular, JPEG or PNG format requires that there be one or three\noutput bands, and clips values that are outside the 0-255 range.",
                            "flatPath": "v1alpha/projects/{projectsId}/maps",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.maps.create",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "parent": {
                                    "description": "The parent of the map collection (e.g., \"projects/*\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}/maps",
                            "request": {
                                "$ref": "EarthEngineMap"
                            },
                            "response": {
                                "$ref": "EarthEngineMap"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        }
                    },
                    "resources": {
                        "tiles": {
                            "methods": {
                                "get": {
                                    "description": "Computes a map tile image showing a portion of a computation. The\nrequest includes values (a map ID and authorisation token) from a\nprevious `CreateMap` request.",
                                    "flatPath": "v1alpha/projects/{projectsId}/maps/{mapsId}/tiles/{zoom}/{x}/{y}",
                                    "httpMethod": "GET",
                                    "id": "earthengine.projects.maps.tiles.get",
                                    "parameterOrder": [
                                        "parent",
                                        "zoom",
                                        "x",
                                        "y"
                                    ],
                                    "parameters": {
                                        "parent": {
                                            "description": "A map name from `EarthEngineMap.name`.",
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/maps/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "x": {
                                            "description": "The x\ncoordinate\nof the requested map tile.",
                                            "format": "int32",
                                            "location": "path",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "y": {
                                            "description": "The y\ncoordinate\nof the requested map tile.",
                                            "format": "int32",
                                            "location": "path",
                                            "required": true,
                                            "type": "integer"
                                        },
                                        "zoom": {
                                            "description": "The zoom\nlevel\nof the requested map tile.",
                                            "format": "int32",
                                            "location": "path",
                                            "required": true,
                                            "type": "integer"
                                        }
                                    },
                                    "path": "v1alpha/{+parent}/tiles/{zoom}/{x}/{y}",
                                    "response": {
                                        "$ref": "HttpBody"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                                    ]
                                }
                            }
                        }
                    }
                },
                "operations": {
                    "methods": {
                        "cancel": {
                            "description": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
                            "flatPath": "v1alpha/projects/{projectsId}/operations/{operationsId}:cancel",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.operations.cancel",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the operation resource to be cancelled.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/operations/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}:cancel",
                            "request": {
                                "$ref": "CancelOperationRequest"
                            },
                            "response": {
                                "$ref": "Empty"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "delete": {
                            "description": "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.",
                            "flatPath": "v1alpha/projects/{projectsId}/operations/{operationsId}",
                            "httpMethod": "DELETE",
                            "id": "earthengine.projects.operations.delete",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the operation resource to be deleted.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/operations/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}",
                            "response": {
                                "$ref": "Empty"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "get": {
                            "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
                            "flatPath": "v1alpha/projects/{projectsId}/operations/{operationsId}",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.operations.get",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the operation resource.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/operations/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}",
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "list": {
                            "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id.",
                            "flatPath": "v1alpha/projects/{projectsId}/operations",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.operations.list",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "filter": {
                                    "description": "The standard list filter.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the operation's parent resource.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "The standard list page size.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The standard list page token.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}/operations",
                            "response": {
                                "$ref": "ListOperationsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "wait": {
                            "description": "Waits for the specified long-running operation until it is done or reaches\nat most a specified timeout, returning the latest state.  If the operation\nis already done, the latest state is immediately returned.  If the timeout\nspecified is greater than the default HTTP/RPC timeout, the HTTP/RPC\ntimeout is used.  If the server does not support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.\nNote that this method is on a best-effort basis.  It may return the latest\nstate before the specified timeout (including immediately), meaning even an\nimmediate response is no guarantee that the operation is done.",
                            "flatPath": "v1alpha/projects/{projectsId}/operations/{operationsId}:wait",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.operations.wait",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "The name of the operation resource to wait on.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/operations/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}:wait",
                            "request": {
                                "$ref": "WaitOperationRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        }
                    }
                },
                "table": {
                    "methods": {
                        "computeFeatures": {
                            "description": "Computes a set of features by applying an arbitrary computation to\nfeatures in one or more tables. Results are returned as a list of GeoJSON\nfeature objects.",
                            "flatPath": "v1alpha/projects/{projectsId}/table:computeFeatures",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.table.computeFeatures",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/table:computeFeatures",
                            "request": {
                                "$ref": "ComputeFeaturesRequest"
                            },
                            "response": {
                                "$ref": "ComputeFeaturesResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        },
                        "export": {
                            "description": "Initiates a batch process that computes a table and writes the result\nto one of several destinations.",
                            "flatPath": "v1alpha/projects/{projectsId}/table:export",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.table.export",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/table:export",
                            "request": {
                                "$ref": "ExportTableRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/devstorage.full_control"
                            ]
                        },
                        "import": {
                            "description": "Imports a table.",
                            "flatPath": "v1alpha/projects/{projectsId}/table:import",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.table.import",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/table:import",
                            "request": {
                                "$ref": "ImportTableRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        }
                    }
                },
                "thumbnails": {
                    "methods": {
                        "create": {
                            "description": "Creates an ID that can be used to render a \"thumbnail\" image.\n\nThis is used in conjunction with `GetThumbnailPixels`. A call to\n`CreateThumbnail` provides an expression and some output options.\nThe result of `CreateThumbnail` is an ID that represents an image\nthat is the result of evaluating that expression and applying\nthose options. Subsequently, calls to `GetThumbnailPixels` can be\nmade to get the image data for the entire resulting image. The ID\nwill be valid for a moderate period (a few hours).\n\nThe most common use case for this pair of endpoints is to provide\na complex expression via a POST to `CreateThumbnail`, and then\nfetch the computed image via a GET to `GetThumbnailPixels`. This\ntwo-part process allows for use in more situations than\n`ComputePixels`. In particular:\n- the result of `ComputePixels` needs to be unwrapped to get the\nencoded image bytes. The result of `GetThumbnailPixels` can be\ndisplayed directly by a browser.\n- `ComputePixels` can only be called by an authorised user, using\na properly-scoped OAuth token. `CreateThumbnail` has the same\nrestriction, but `GetThumbnailPixels` can be invoked with a URL\ncontaining an API key, so URLs invoking it can be used more\nbroadly.\n\nThe result of evaluating the expression has to meet some reasonable\nrequirements for the requested image format. In particular, JPEG or PNG\nformat requires that there be one or three output bands, and clips values\nthat are outside the 0-255 range.\n\nThe description \"thumbnail\" does not imply a restriction on the size of the\ncomputed image: the same restrictions as `ComputePixels` apply to\n`CreateThumbnail`/`GetThumbnailPixels`. Requests are limited to 16MB in\nuncompressed data per request, computed as the product of the request\ndimensions in pixels, the number of image bands requested, and the number\nof bytes per pixel for each band. Requests are also limited to at most\n10000 pixels in either dimension and at most 100 bands. Requests exceeding\nthese limits will result in an error code of 400 (BAD_REQUEST).",
                            "flatPath": "v1alpha/projects/{projectsId}/thumbnails",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.thumbnails.create",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "parent": {
                                    "description": "The parent of the thumbnail collection (e.g., \"projects/*\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}/thumbnails",
                            "request": {
                                "$ref": "Thumbnail"
                            },
                            "response": {
                                "$ref": "Thumbnail"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "getPixels": {
                            "description": "Computes an image showing the result of a computation. The request includes\nvalues (an ID and authorisation token) from a previous `CreateThumbnail`\nrequest.",
                            "flatPath": "v1alpha/projects/{projectsId}/thumbnails/{thumbnailsId}:getPixels",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.thumbnails.getPixels",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "A thumbnail name from `Thumbnail.name`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/thumbnails/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}:getPixels",
                            "response": {
                                "$ref": "HttpBody"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        }
                    }
                },
                "value": {
                    "methods": {
                        "compute": {
                            "description": "Computes an arbitrary value. This will fail if the result of the\nExpression is not something that is expressible as a Value, or if its\nevaluation requires too many resources. While it is possible (and not an\nerror) to compute any type of object here, in general any Expression\nproducing results that are better suited to one of the other Compute*\nendpoints should use that endpoint instead (e.g., an Expression whose\nresult is a set of features should use ComputeFeatures).",
                            "flatPath": "v1alpha/projects/{projectsId}/value:compute",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.value.compute",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/value:compute",
                            "request": {
                                "$ref": "ComputeValueRequest"
                            },
                            "response": {
                                "$ref": "ComputeValueResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        }
                    }
                },
                "video": {
                    "methods": {
                        "export": {
                            "description": "Initiates a batch process that computes a video and writes the result\nto one of several destinations.",
                            "flatPath": "v1alpha/projects/{projectsId}/video:export",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.video.export",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/video:export",
                            "request": {
                                "$ref": "ExportVideoRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/devstorage.full_control"
                            ]
                        }
                    }
                },
                "videoMap": {
                    "methods": {
                        "export": {
                            "description": "Initiates a batch process that computes a tiled video map and writes the\nresult to Google Cloud Storage.",
                            "flatPath": "v1alpha/projects/{projectsId}/videoMap:export",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.videoMap.export",
                            "parameterOrder": [
                                "project"
                            ],
                            "parameters": {
                                "project": {
                                    "description": "The project id or project number of the Google Cloud Platform project that\nshould be treated as the service consumer for this request.\nFormat is `projects/{project-id}`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+project}/videoMap:export",
                            "request": {
                                "$ref": "ExportVideoMapRequest"
                            },
                            "response": {
                                "$ref": "Operation"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/devstorage.full_control"
                            ]
                        }
                    }
                },
                "videoThumbnails": {
                    "methods": {
                        "create": {
                            "description": "Creates an ID that can be used to render an image containing an animation\nof multiple images from a collection.\n\nThis is used in conjunction with `GetVideoThumbnailPixels`. A call to\n`CreateVideoThumbnail` provides an expression and some output options. The\nresult of `CreateVideoThumbnail` is an ID that represents an image that is\nthe result of evaluating that expression and applying those options.\nSubsequently, calls to `GetVideoThumbnailPixels` can be made to get an\nimage showing all of the elements of an ImageCollection, animated from\nfirst to last. The ID will be valid for a moderate period (a few hours).\n\nThe request is limited to 512*512*100 pixels in total, across all Images in\nthe ImageCollection. Requests exceeding these limits will result in an\nerror code of 400 (BAD_REQUEST).",
                            "flatPath": "v1alpha/projects/{projectsId}/videoThumbnails",
                            "httpMethod": "POST",
                            "id": "earthengine.projects.videoThumbnails.create",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "parent": {
                                    "description": "The parent of the location where the video thumbnail will be\ncreated (e.g., \"projects/*\").",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+parent}/videoThumbnails",
                            "request": {
                                "$ref": "VideoThumbnail"
                            },
                            "response": {
                                "$ref": "VideoThumbnail"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "getPixels": {
                            "description": "Computes an image showing the result of a computation. The\nrequest includes values (an ID and authorisation token) from a\nprevious `CreateVideoThumbnail` request.",
                            "flatPath": "v1alpha/projects/{projectsId}/videoThumbnails/{videoThumbnailsId}:getPixels",
                            "httpMethod": "GET",
                            "id": "earthengine.projects.videoThumbnails.getPixels",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "A video thumbnail name from `VideoThumbnail.name`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/videoThumbnails/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1alpha/{+name}:getPixels",
                            "response": {
                                "$ref": "HttpBody"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud-platform.read-only"
                            ]
                        }
                    }
                }
            }
        }
    },
    "revision": "20190913",
    "rootUrl": "https://staging-earthengine.sandbox.googleapis.com/",
    "schemas": {
        "AffineTransform": {
            "description": "The affine transform. The six values form a 2x3 matrix:\n```\n( ( scale_x, shear_x, translate_x )\n  ( shear_y, scale_y, translate_y ) )\n```\nspecifying a transformation such that given a pixel location `(u, v)`, the\ncorresponding location in the CRS is this matrix times the column vector\n`(u, v, 1)`. Pixel coordinates use the \"PixelIsArea\" raster space, i.e.\n`(0, 0)` is the top-left corner of the top-left pixel, and `(width, height)`\nis the bottom-right corner of the image.\n`(translate_x, translate_y)` is the origin (in the CRS) of the pixel grid. If\nthere is no shear or rotation, then `(scale_x, scale_y)` is the pixel size.\n`scale_y` is often negative so that the `(0, 0)` pixel corner can represent\nthe north-westernmost corner of the image.",
            "id": "AffineTransform",
            "properties": {
                "scaleX": {
                    "description": "The horizontal scale factor.",
                    "format": "double",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale factor.",
                    "format": "double",
                    "type": "number"
                },
                "shearX": {
                    "description": "The horizontal shear factor for some, though not all, transformations.",
                    "format": "double",
                    "type": "number"
                },
                "shearY": {
                    "description": "The vertical shear factor for some, though not all, transformations.",
                    "format": "double",
                    "type": "number"
                },
                "translateX": {
                    "description": "The horizontal offset.",
                    "format": "double",
                    "type": "number"
                },
                "translateY": {
                    "description": "The vertical offset.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Algorithm": {
            "description": "The description of an algorithm available for Expressions.",
            "id": "Algorithm",
            "properties": {
                "arguments": {
                    "description": "Descriptions of the arguments the algorithm takes.",
                    "items": {
                        "$ref": "AlgorithmArgument"
                    },
                    "type": "array"
                },
                "deprecated": {
                    "description": "Whether the algorithm is deprecated.",
                    "type": "boolean"
                },
                "deprecationReason": {
                    "description": "If this algorithm is deprecated, the reason for the deprecation.",
                    "type": "string"
                },
                "description": {
                    "description": "A human-readable description of the algorithm.",
                    "type": "string"
                },
                "hidden": {
                    "description": "Whether this algorithm should be hidden in client applications\nand not shown by default.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the algorithm, in the form \"algorithms/...\".",
                    "type": "string"
                },
                "returnType": {
                    "description": "The name of the type the algorithm returns.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AlgorithmArgument": {
            "description": "The description of an argument to an algorithm.",
            "id": "AlgorithmArgument",
            "properties": {
                "argumentName": {
                    "description": "The name of the argument.",
                    "type": "string"
                },
                "defaultValue": {
                    "description": "The default value the argument takes if a value is not provided.",
                    "type": "any"
                },
                "description": {
                    "description": "A human-readable description of the argument.",
                    "type": "string"
                },
                "optional": {
                    "description": "Whether the argument is optional.",
                    "type": "boolean"
                },
                "type": {
                    "description": "The name of the type of the argument.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ArrayValue": {
            "description": "An array of ValueNodes. Elements are not guaranteed to be of the same\ntype, so for example one of the values may have constant_value set, while\nanother may have value_reference set.",
            "id": "ArrayValue",
            "properties": {
                "values": {
                    "description": "The elements of the array.",
                    "items": {
                        "$ref": "ValueNode"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuditConfig": {
            "description": "Specifies the audit configuration for a service.\nThe configuration determines which permission types are logged, and what\nidentities, if any, are exempted from logging.\nAn AuditConfig must have one or more AuditLogConfigs.\n\nIf there are AuditConfigs for both `allServices` and a specific service,\nthe union of the two AuditConfigs is used for that service: the log_types\nspecified in each AuditConfig are enabled, and the exempted_members in each\nAuditLogConfig are exempted.\n\nExample Policy with multiple AuditConfigs:\n\n    {\n      \"audit_configs\": [\n        {\n          \"service\": \"allServices\"\n          \"audit_log_configs\": [\n            {\n              \"log_type\": \"DATA_READ\",\n              \"exempted_members\": [\n                \"user:jose@example.com\"\n              ]\n            },\n            {\n              \"log_type\": \"DATA_WRITE\",\n            },\n            {\n              \"log_type\": \"ADMIN_READ\",\n            }\n          ]\n        },\n        {\n          \"service\": \"sampleservice.googleapis.com\"\n          \"audit_log_configs\": [\n            {\n              \"log_type\": \"DATA_READ\",\n            },\n            {\n              \"log_type\": \"DATA_WRITE\",\n              \"exempted_members\": [\n                \"user:aliya@example.com\"\n              ]\n            }\n          ]\n        }\n      ]\n    }\n\nFor sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ\nlogging. It also exempts jose@example.com from DATA_READ logging, and\naliya@example.com from DATA_WRITE logging.",
            "id": "AuditConfig",
            "properties": {
                "auditLogConfigs": {
                    "description": "The configuration for logging of each type of permission.",
                    "items": {
                        "$ref": "AuditLogConfig"
                    },
                    "type": "array"
                },
                "service": {
                    "description": "Specifies a service that will be enabled for audit logging.\nFor example, `storage.googleapis.com`, `cloudsql.googleapis.com`.\n`allServices` is a special value that covers all services.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AuditLogConfig": {
            "description": "Provides the configuration for logging a type of permissions.\nExample:\n\n    {\n      \"audit_log_configs\": [\n        {\n          \"log_type\": \"DATA_READ\",\n          \"exempted_members\": [\n            \"user:jose@example.com\"\n          ]\n        },\n        {\n          \"log_type\": \"DATA_WRITE\",\n        }\n      ]\n    }\n\nThis enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting\njose@example.com from DATA_READ logging.",
            "id": "AuditLogConfig",
            "properties": {
                "exemptedMembers": {
                    "description": "Specifies the identities that do not cause logging for this type of\npermission.\nFollows the same format of Binding.members.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "logType": {
                    "description": "The log type that this config enables.",
                    "enum": [
                        "LOG_TYPE_UNSPECIFIED",
                        "ADMIN_READ",
                        "DATA_WRITE",
                        "DATA_READ"
                    ],
                    "enumDescriptions": [
                        "Default case. Should never be this.",
                        "Admin reads. Example: CloudIAM getIamPolicy",
                        "Data writes. Example: CloudSQL Users create",
                        "Data reads. Example: CloudSQL Users list"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Binding": {
            "description": "Associates `members` with a `role`.",
            "id": "Binding",
            "properties": {
                "condition": {
                    "$ref": "Expr",
                    "description": "The condition that is associated with this binding.\nNOTE: An unsatisfied condition will not allow user access via current\nbinding. Different bindings, including their conditions, are examined\nindependently."
                },
                "members": {
                    "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@example.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "role": {
                    "description": "Role that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CancelOperationRequest": {
            "description": "The request message for Operations.CancelOperation.",
            "id": "CancelOperationRequest",
            "properties": {},
            "type": "object"
        },
        "ComputeFeaturesRequest": {
            "description": "Request message for EarthEngineService.ComputeFeatures.",
            "id": "ComputeFeaturesRequest",
            "properties": {
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute."
                },
                "pageSize": {
                    "description": "An optional maximum number of results per page. The server may return fewer\nfeatures than requested. If unspecified, server will pick an appropriate\ndefault.",
                    "format": "int32",
                    "type": "integer"
                },
                "pageToken": {
                    "description": "An optional token identifying a page of results the server should return.\nTypically, this is the value of\nComputeFeaturesResponse.next_page_token\nreturned from the previous call to the `ComputeFeatures` method.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ComputeFeaturesResponse": {
            "description": "Response message for EarthEngineService.ComputeFeatures.",
            "id": "ComputeFeaturesResponse",
            "properties": {
                "features": {
                    "description": "The list of features matching the query, as a list of GeoJSON\nfeature objects (see RFC 7946) containing the string \"Feature\" in\na field named \"type\", the geometry in a field named \"geometry\",\nand key/value properties in a field named \"properties\".",
                    "items": {
                        "$ref": "Feature"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "A token to retrieve the next page of results. Pass this value in the\nComputeFeaturesRequest.page_token\nfield in the subsequent call to the `ComputeFeatures` method\nto retrieve the next page of results.",
                    "type": "string"
                },
                "type": {
                    "description": "Always contains the constant string \"FeatureCollection\", marking\nthis as a GeoJSON FeatureCollection object.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ComputeImagesRequest": {
            "description": "Request message for EarthEngineService.ComputeImages.",
            "id": "ComputeImagesRequest",
            "properties": {
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute."
                },
                "pageSize": {
                    "description": "An optional maximum number of results per page. The server may return fewer\nimages than requested. If unspecified, server will pick an appropriate\ndefault.",
                    "format": "int32",
                    "type": "integer"
                },
                "pageToken": {
                    "description": "An optional token identifying a page of results the server should return.\nTypically, this is the value of\nComputeImagesResponse.next_page_token\nreturned from the previous call to the `ComputeImages` method.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ComputeImagesResponse": {
            "description": "Response message for EarthEngineService.ComputeImages.",
            "id": "ComputeImagesResponse",
            "properties": {
                "images": {
                    "description": "The list of images matching the query.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "A token to retrieve the next page of results. Pass this value in the\nComputeImagesRequest.page_token\nfield in the subsequent call to the `ComputeImages` method\nto retrieve the next page of results.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ComputePixelsRequest": {
            "description": "Request message for EarthEngineService.ComputePixels.",
            "id": "ComputePixelsRequest",
            "properties": {
                "bandIds": {
                    "description": "If present, specifies a specific set of bands that will be\nselected from the result of evaluating `expression`. If not\npresent, all bands resulting from `expression` will be selected.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute."
                },
                "fileFormat": {
                    "description": "The output file format in which to return the pixel values.",
                    "enum": [
                        "IMAGE_FILE_FORMAT_UNSPECIFIED",
                        "JPEG",
                        "PNG",
                        "AUTO_JPEG_PNG",
                        "NPY",
                        "GEO_TIFF",
                        "TF_RECORD_IMAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "JPEG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "PNG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "Automatically select JPEG or PNG depending on whether or not there is any\ntransparency. Intended for display purposes. Only supported for 8-bit RGB\ndata, or data that is converted to 8-bit RGB via `visualization`\nparameters.",
                        "NumPy .npy format.",
                        "GeoTIFF format.",
                        "TFRecord format. Only supported for image exports."
                    ],
                    "type": "string"
                },
                "grid": {
                    "$ref": "PixelGrid",
                    "description": "Optional parameters describing how the image computed by\n`expression` should be reprojected and clipped. If not present, the\nfull computed image is returned in its native projection."
                },
                "visualizationOptions": {
                    "$ref": "VisualizationOptions",
                    "description": "If present, a set of visualization options to apply to produce an\n8-bit RGB visualization of the data."
                }
            },
            "type": "object"
        },
        "ComputeValueRequest": {
            "description": "A request to compute the value of an arbitrary expression.",
            "id": "ComputeValueRequest",
            "properties": {
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute."
                }
            },
            "type": "object"
        },
        "ComputeValueResponse": {
            "description": "The results of an arbitrary computation.",
            "id": "ComputeValueResponse",
            "properties": {
                "result": {
                    "description": "The results of computing the value of the expression.",
                    "type": "any"
                }
            },
            "type": "object"
        },
        "CopyAssetRequest": {
            "description": "Request message for EarthEngineService.CopyAsset.",
            "id": "CopyAssetRequest",
            "properties": {
                "destinationName": {
                    "description": "The destination name to which to copy the asset.\n`name` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                    "type": "string"
                },
                "overwrite": {
                    "description": "An optional flag to allow overwriting an existing asset.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DictionaryValue": {
            "description": "An unordered string-keyed dictionary of ValueNodes. Keys are unique\nand may contain an empty string. Values are not guaranteed to be of the same\ntype, so for example one of the values may have constant_value set, while\nanother may have value_reference set.",
            "id": "DictionaryValue",
            "properties": {
                "values": {
                    "additionalProperties": {
                        "$ref": "ValueNode"
                    },
                    "description": "The elements of the dictionary.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "DoubleRange": {
            "description": "A range of doubles.",
            "id": "DoubleRange",
            "properties": {
                "max": {
                    "description": "The maximum data value, i.e. the upper bound of the range.",
                    "format": "double",
                    "type": "number"
                },
                "min": {
                    "description": "The minimum data value, i.e. the lower bound of the range.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "DriveDestination": {
            "description": "Configuration for a destination in Google Drive.",
            "id": "DriveDestination",
            "properties": {
                "filenamePrefix": {
                    "description": "The string used as the prefix for each output filename. The filenames of\nthe exported files will be constructed from this prefix, the coordinates\nof each file in a mosaic (if any), and a file extension corresponding to\nthe file format.",
                    "type": "string"
                },
                "folder": {
                    "description": "The Google Drive destination folder.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EarthEngineAsset": {
            "description": "Information about an Earth Engine asset.",
            "id": "EarthEngineAsset",
            "properties": {
                "bands": {
                    "description": "Information about the data bands of the image asset. Omitted for\nnon-image assets.",
                    "items": {
                        "$ref": "ImageBand"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "The description of the asset.",
                    "type": "string"
                },
                "endTime": {
                    "description": "For assets that correspond to an interval of time, such as average values\nover a month or year, this timestamp corresponds to the end of that\ninterval (exclusive).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "geometry": {
                    "additionalProperties": {
                        "description": "Properties of the object.",
                        "type": "any"
                    },
                    "description": "The spatial footprint associated with the asset, if any, as a GeoJSON\ngeometry object (see RFC 7946).",
                    "type": "object"
                },
                "id": {
                    "description": "The ID of the asset. Equivalent to `name` without the \"projects/*/assets/\"\nprefix (e.g. \"users/<USER>/<ASSET>\"). Note that this is intended for\ndisplay purposes only. It should not be used as an input to another\noperation. Use `name` instead.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the asset. `name` is of the format \"projects/*/assets/**\"\n(e.g. \"projects/earthengine-legacy/assets/users/<USER>/<ASSET>\").",
                    "type": "string"
                },
                "properties": {
                    "additionalProperties": {
                        "description": "Properties of the object.",
                        "type": "any"
                    },
                    "description": "Key/value properties associated with the asset.",
                    "type": "object"
                },
                "quota": {
                    "$ref": "FolderQuota",
                    "description": "The quota information associated with the folder asset, if any. Returned\nfor top-level user-owned folder assets (e.g. \"users/*\" or \"projects/*\")."
                },
                "sizeBytes": {
                    "description": "The size of a leaf asset (e.g. an image) in bytes.",
                    "format": "int64",
                    "type": "string"
                },
                "startTime": {
                    "description": "The timestamp associated with the asset, if any, e.g. the time at which a\nsatellite image was taken. For assets that correspond to an interval of\ntime, such as average values over a month or year, this timestamp\ncorresponds to the start of that interval.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the asset.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the asset.",
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "IMAGE",
                        "IMAGE_COLLECTION",
                        "TABLE",
                        "FOLDER"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Image.",
                        "Image collection.",
                        "Table.",
                        "Folder."
                    ],
                    "type": "string"
                },
                "updateTime": {
                    "description": "The last-modified time of the asset.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EarthEngineDestination": {
            "description": "Configuration for a destination in Earth Engine.",
            "id": "EarthEngineDestination",
            "properties": {
                "name": {
                    "description": "The name of the asset to be created.\n`name` is of the format \"projects/*/assets/**\"\n(e.g. \"projects/earthengine-legacy/assets/users/<USER>/<ASSET>\").",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EarthEngineMap": {
            "description": "Information about a map.",
            "id": "EarthEngineMap",
            "properties": {
                "bandIds": {
                    "description": "If present, specifies a specific set of bands that will be selected from\nthe result of evaluating the given expression. If not present, all bands\nresulting from the expression will be selected.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute."
                },
                "fileFormat": {
                    "description": "The output file format in which to generate the map tiles.",
                    "enum": [
                        "IMAGE_FILE_FORMAT_UNSPECIFIED",
                        "JPEG",
                        "PNG",
                        "AUTO_JPEG_PNG",
                        "NPY",
                        "GEO_TIFF",
                        "TF_RECORD_IMAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "JPEG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "PNG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "Automatically select JPEG or PNG depending on whether or not there is any\ntransparency. Intended for display purposes. Only supported for 8-bit RGB\ndata, or data that is converted to 8-bit RGB via `visualization`\nparameters.",
                        "NumPy .npy format.",
                        "GeoTIFF format.",
                        "TFRecord format. Only supported for image exports."
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The resource name representing the map, of the form  \"projects/*/maps/**\"\n(e.g. \"projects/earthengine-legacy/maps/<MAP-ID>\").",
                    "type": "string"
                },
                "visualizationOptions": {
                    "$ref": "VisualizationOptions",
                    "description": "If present, a set of visualization options to apply to produce an\n8-bit RGB visualization of the data."
                }
            },
            "type": "object"
        },
        "Empty": {
            "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "id": "Empty",
            "properties": {},
            "type": "object"
        },
        "ExportImageRequest": {
            "description": "Request message for EarthEngineService.ExportImage.",
            "id": "ExportImageRequest",
            "properties": {
                "assetExportOptions": {
                    "$ref": "ImageAssetExportOptions",
                    "description": "If specified, configures export as an Earth Engine asset."
                },
                "description": {
                    "description": "An optional human-readable name of the task.",
                    "type": "string"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "An expression that evaluates to the image to compute and export."
                },
                "fileExportOptions": {
                    "$ref": "ImageFileExportOptions",
                    "description": "If specified, configures export as a file."
                },
                "grid": {
                    "$ref": "PixelGrid",
                    "description": "Optional parameters describing how the image computed by\n`expression` should be reprojected and clipped. If not present, the\nfull computed image is returned in its native projection."
                },
                "maxPixels": {
                    "description": "The maximum number of pixels to compute and export. This is a safety guard\nto prevent you from accidentally starting a larger export than you had\nintended. The default value is 1e8 pixels, but you can set the value\nexplicitly to raise or lower this limit.",
                    "format": "int64",
                    "type": "string"
                },
                "requestId": {
                    "description": "A unique string used to detect duplicated requests. If more than one\nrequest is made by the same user with the same non-empty `request_id`,\nonly one of those requests may successfully start a long-running operation.\n`request_id` may contain the characters a..z, A..Z, 0-9, or '-'.\n`request_id` may be at most 60 characters long.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExportMapRequest": {
            "description": "Request message for EarthEngineService.ExportMap.",
            "id": "ExportMapRequest",
            "properties": {
                "description": {
                    "description": "An optional human-readable name of the task.",
                    "type": "string"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "An expression that evaluates to the image to compute and export. The\nbounds of the image will be used to determine the set of map tiles to\nrender. To control the exported region, clip the image prior to exporting."
                },
                "requestId": {
                    "description": "A unique string used to detect duplicated requests. If more than one\nrequest is made by the same user with the same non-empty `request_id`,\nonly one of those requests may successfully start a long-running operation.\n`request_id` may contain the characters a..z, A..Z, 0-9, or '-'.\n`request_id` may be at most 60 characters long.",
                    "type": "string"
                },
                "tileExportOptions": {
                    "$ref": "ImageFileExportOptions",
                    "description": "Options for where and in what form to export the map tiles. Cloud Storage\nis currently the only supported destination for map exports."
                },
                "tileOptions": {
                    "$ref": "TileOptions",
                    "description": "Options describing the map tiles to generate."
                }
            },
            "type": "object"
        },
        "ExportTableRequest": {
            "description": "Request message for EarthEngineService.ExportTable.",
            "id": "ExportTableRequest",
            "properties": {
                "assetExportOptions": {
                    "$ref": "TableAssetExportOptions",
                    "description": "If specified, configures export as an Earth Engine asset."
                },
                "description": {
                    "description": "An optional human-readable name of the task.",
                    "type": "string"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "An expression that evaluates to the table to compute and export."
                },
                "fileExportOptions": {
                    "$ref": "TableFileExportOptions",
                    "description": "If specified, configures export as a file."
                },
                "maxErrorMeters": {
                    "description": "The max allowed error in meters when transforming geometry between\ncoordinate systems. If empty, the max error is 1 meter by default.",
                    "format": "double",
                    "type": "number"
                },
                "requestId": {
                    "description": "A unique string used to detect duplicated requests. If more than one\nrequest is made by the same user with the same non-empty `request_id`,\nonly one of those requests may successfully start a long-running operation.\n`request_id` may contain the characters a..z, A..Z, 0-9, or '-'.\n`request_id` may be at most 60 characters long.",
                    "type": "string"
                },
                "selectors": {
                    "description": "An optional explicit list of columns to include in the result.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExportVideoMapRequest": {
            "description": "Request message for EarthEngineService.ExportVideoMap.",
            "id": "ExportVideoMapRequest",
            "properties": {
                "description": {
                    "description": "An optional human-readable name of the task.",
                    "type": "string"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "An expression that evaluates to the image collection to compute and export\nas a video. The bounds of the first image will be used to determine the\nset of video map tiles to render. To control the exported region, clip the\nimages prior to exporting."
                },
                "requestId": {
                    "description": "A unique string used to detect duplicated requests. If more than one\nrequest is made by the same user with the same non-empty `request_id`,\nonly one of those requests may successfully start a long-running operation.\n`request_id` may contain the characters a..z, A..Z, 0-9, or '-'.\n`request_id` may be at most 60 characters long.",
                    "type": "string"
                },
                "tileExportOptions": {
                    "$ref": "VideoFileExportOptions",
                    "description": "Options for where and in what form to export the video tiles. Cloud\nStorage is currently the only supported destination for video map exports."
                },
                "tileOptions": {
                    "$ref": "TileOptions",
                    "description": "Options describing the video map tiles to generate."
                },
                "videoOptions": {
                    "$ref": "VideoOptions",
                    "description": "Basic options describing the videos to generate."
                }
            },
            "type": "object"
        },
        "ExportVideoRequest": {
            "description": "Request message for EarthEngineService.ExportVideo.",
            "id": "ExportVideoRequest",
            "properties": {
                "description": {
                    "description": "An optional human-readable name of the task.",
                    "type": "string"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "An expression that evaluates to the video to compute and export,\nrepresented as an image collection."
                },
                "fileExportOptions": {
                    "$ref": "VideoFileExportOptions",
                    "description": "Options for where and in what form to export the video."
                },
                "requestId": {
                    "description": "A unique string used to detect duplicated requests. If more than one\nrequest is made by the same user with the same non-empty `request_id`,\nonly one of those requests may successfully start a long-running operation.\n`request_id` may contain the characters a..z, A..Z, 0-9, or '-'.\n`request_id` may be at most 60 characters long.",
                    "type": "string"
                },
                "videoOptions": {
                    "$ref": "VideoOptions",
                    "description": "Basic options describing the video to generate."
                }
            },
            "type": "object"
        },
        "Expr": {
            "description": "Represents an expression text. Example:\n\n    title: \"User account presence\"\n    description: \"Determines whether the request has a user account\"\n    expression: \"size(request.user) > 0\"",
            "id": "Expr",
            "properties": {
                "description": {
                    "description": "An optional description of the expression. This is a longer text which\ndescribes the expression, e.g. when hovered over it in a UI.",
                    "type": "string"
                },
                "expression": {
                    "description": "Textual representation of an expression in\nCommon Expression Language syntax.\n\nThe application context of the containing message determines which\nwell-known feature set of CEL is supported.",
                    "type": "string"
                },
                "location": {
                    "description": "An optional string indicating the location of the expression for error\nreporting, e.g. a file name and a position in the file.",
                    "type": "string"
                },
                "title": {
                    "description": "An optional title for the expression, i.e. a short string describing\nits purpose. This can be used e.g. in UIs which allow to enter the\nexpression.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Expression": {
            "description": "Specifies an arbitrary expression, of an arbitrary type. The context in\nwhich it is used determines the type of the response.",
            "id": "Expression",
            "properties": {
                "result": {
                    "description": "Which of the ValueNodes in \"values\" is the final result of the\ncomputation.",
                    "type": "string"
                },
                "values": {
                    "additionalProperties": {
                        "$ref": "ValueNode"
                    },
                    "description": "All intermediate values in the computation. The directed graph these form\nmust be acyclic.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Feature": {
            "description": "A GeoJSON feature object (see RFC 7946) containing the string \"Feature\" in\na field named \"type\", the geometry in a field named \"geometry\", and key/value\nproperties in a field named \"properties\".",
            "id": "Feature",
            "properties": {
                "geometry": {
                    "description": "The geometry of the feature.\nThis will contain a `google.protobuf.Struct` if geometry is present for\nthis feature. Otherwise, it will hold a `google.protobuf.NullValue`.",
                    "type": "any"
                },
                "properties": {
                    "description": "The properties of the feature.\nThis will contain a `google.protobuf.Struct` if properties are present for\nthis feature. Otherwise, it will hold a `google.protobuf.NullValue`.",
                    "type": "any"
                },
                "type": {
                    "description": "This string is always present and equal to \"Feature\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FilmstripThumbnail": {
            "description": "Information about a filmstrip thumbnail.",
            "id": "FilmstripThumbnail",
            "properties": {
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute. Must evaluate to an ImageCollection."
                },
                "fileFormat": {
                    "description": "The output encoding in which to generate the resulting image.",
                    "enum": [
                        "IMAGE_FILE_FORMAT_UNSPECIFIED",
                        "JPEG",
                        "PNG",
                        "AUTO_JPEG_PNG",
                        "NPY",
                        "GEO_TIFF",
                        "TF_RECORD_IMAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "JPEG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "PNG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "Automatically select JPEG or PNG depending on whether or not there is any\ntransparency. Intended for display purposes. Only supported for 8-bit RGB\ndata, or data that is converted to 8-bit RGB via `visualization`\nparameters.",
                        "NumPy .npy format.",
                        "GeoTIFF format.",
                        "TFRecord format. Only supported for image exports."
                    ],
                    "type": "string"
                },
                "grid": {
                    "$ref": "PixelGrid",
                    "description": "An optional pixel grid describing how the images computed by\n`expression` are reprojected and clipped."
                },
                "name": {
                    "description": "The resource name representing the filmstrip thumbnail, of the form\n\"projects/*/filmstripThumbnails/**\"\n(e.g. \"projects/earthengine-legacy/filmstripThumbnails/<FILMSTRIP-ID>\").",
                    "type": "string"
                },
                "orientation": {
                    "description": "How the images should be placed to form the filmstrip thumbnail.",
                    "enum": [
                        "ORIENTATION_UNSPECIFIED",
                        "HORIZONTAL",
                        "VERTICAL"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Horizontal: images are laid out side by side, from left to right.",
                        "Vertical: images are laid out from top to bottom."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FolderQuota": {
            "description": "Describes the current usage and limits of a top-level folder.",
            "id": "FolderQuota",
            "properties": {
                "assetCount": {
                    "description": "The number of assets stored in the folder.",
                    "format": "int64",
                    "type": "string"
                },
                "maxAssetCount": {
                    "description": "The maximum number of assets that can be stored in the folder.",
                    "format": "int64",
                    "type": "string"
                },
                "maxSizeBytes": {
                    "description": "The maximum size of the folder in bytes.",
                    "format": "int64",
                    "type": "string"
                },
                "sizeBytes": {
                    "description": "The size of the folder in bytes.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FunctionDefinition": {
            "description": "A custom function definition.",
            "id": "FunctionDefinition",
            "properties": {
                "argumentNames": {
                    "description": "The names of the arguments accepted by this function. These can be referred\nto by the \"argument_reference\" field of ValueNodes within the body.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "body": {
                    "description": "The function body itself, as a reference to one of the ValueNodes in\nthe enclosing Expression.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FunctionInvocation": {
            "description": "An invocation of a function.",
            "id": "FunctionInvocation",
            "properties": {
                "arguments": {
                    "additionalProperties": {
                        "$ref": "ValueNode"
                    },
                    "description": "Arguments to this invocation. Order is insignificant.",
                    "type": "object"
                },
                "functionName": {
                    "description": "A named function from the Earth Engine API.",
                    "type": "string"
                },
                "functionReference": {
                    "description": "A reference to a function-valued value. This is usually a direct\nreference to a FunctionDefinition value, but need not be: it could be a\nreference to a FunctionInvocation whose result is a function, or to a\nfunction-valued argument value.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GcsDestination": {
            "description": "Configuration for a destination in Google Cloud Storage.",
            "id": "GcsDestination",
            "properties": {
                "bucket": {
                    "description": "The Google Cloud Storage destination bucket.",
                    "type": "string"
                },
                "bucketCorsUris": {
                    "description": "Optional list of URIs to whitelist for the CORS settings on the bucket.\nUsed to enable websites to access exported files via JavaScript.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "filenamePrefix": {
                    "description": "The string used as the prefix for each output file. A trailing \"/\"\nindicates a path. The filenames of the exported files will be constructed\nfrom this prefix, the coordinates of each file in a mosaic (if any), and\na file extension corresponding to the file format.",
                    "type": "string"
                },
                "permissions": {
                    "description": "Specifies the permissions to set on the exported tiles. If unspecified,\ndefaults to DEFAULT_OBJECT_ACL.",
                    "enum": [
                        "TILE_PERMISSIONS_UNSPECIFIED",
                        "PUBLIC",
                        "DEFAULT_OBJECT_ACL"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Write public tiles. Requires the caller to be an OWNER of the bucket.",
                        "Write tiles using the bucket's default object ACL."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoTiffImageExportOptions": {
            "description": "Options for encoding images as GeoTIFF files.",
            "id": "GeoTiffImageExportOptions",
            "properties": {
                "cloudOptimized": {
                    "description": "If true, generates 'cloud optimized' GeoTIFF files for more efficient\naccess in cloud environments (see www.cogeo.org).",
                    "type": "boolean"
                },
                "skipEmptyFiles": {
                    "description": "If true, skip writing empty (i.e. fully-masked) image files.",
                    "type": "boolean"
                },
                "tileDimensions": {
                    "$ref": "GridDimensions",
                    "description": "Optional explicit dimensions in pixels into which to split the image if it\nis too large to fit in a single file."
                }
            },
            "type": "object"
        },
        "GetIamPolicyRequest": {
            "description": "Request message for `GetIamPolicy` method.",
            "id": "GetIamPolicyRequest",
            "properties": {
                "options": {
                    "$ref": "GetPolicyOptions",
                    "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to\n`GetIamPolicy`. This field is only used by Cloud IAM."
                }
            },
            "type": "object"
        },
        "GetPixelsRequest": {
            "description": "Request message for EarthEngineService.GetPixels.",
            "id": "GetPixelsRequest",
            "properties": {
                "bandIds": {
                    "description": "If present, specifies a specific set of bands from which to get pixels.\nBands are identified by id, as indicated by the `id` field of an\nImageBand proto.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "fileFormat": {
                    "description": "The output file format in which to return the pixel values.",
                    "enum": [
                        "IMAGE_FILE_FORMAT_UNSPECIFIED",
                        "JPEG",
                        "PNG",
                        "AUTO_JPEG_PNG",
                        "NPY",
                        "GEO_TIFF",
                        "TF_RECORD_IMAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "JPEG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "PNG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "Automatically select JPEG or PNG depending on whether or not there is any\ntransparency. Intended for display purposes. Only supported for 8-bit RGB\ndata, or data that is converted to 8-bit RGB via `visualization`\nparameters.",
                        "NumPy .npy format.",
                        "GeoTIFF format.",
                        "TFRecord format. Only supported for image exports."
                    ],
                    "type": "string"
                },
                "grid": {
                    "$ref": "PixelGrid",
                    "description": "Parameters describing the pixel grid in which to fetch data. Defaults to\nthe native pixel grid of the data."
                },
                "region": {
                    "additionalProperties": {
                        "description": "Properties of the object.",
                        "type": "any"
                    },
                    "description": "If present, the region of data to return, specified as a GeoJSON geometry\nobject (see RFC 7946). Since the returned image is always rectangular,\nthe bounding box of the given geometry in the output coordinate system\nwill actually be used.  If `grid.dimensions` is also specified then the\ngrid will finally be rescaled to the requested size.",
                    "type": "object"
                },
                "visualizationOptions": {
                    "$ref": "VisualizationOptions",
                    "description": "If present, a set of visualization options to apply to produce an\n8-bit RGB visualization of the data, rather than returning the raw data."
                }
            },
            "type": "object"
        },
        "GetPolicyOptions": {
            "description": "Encapsulates settings provided to GetIamPolicy.",
            "id": "GetPolicyOptions",
            "properties": {
                "requestedPolicyVersion": {
                    "description": "Optional. The policy format version to be returned.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nRequests for policies with any conditional bindings must specify version 3.\nPolicies without any conditional bindings may specify any valid value or\nleave the field unset.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GridDimensions": {
            "description": "Specifies the dimensions of a pixel grid.",
            "id": "GridDimensions",
            "properties": {
                "height": {
                    "description": "The height of the grid, in pixels.",
                    "format": "int32",
                    "type": "integer"
                },
                "width": {
                    "description": "The width of the grid, in pixels.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GridPoint": {
            "description": "A two-dimensional point or vector.",
            "id": "GridPoint",
            "properties": {
                "x": {
                    "description": "The x coordinate value.",
                    "format": "double",
                    "type": "number"
                },
                "y": {
                    "description": "The y coordinate value.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "HttpBody": {
            "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.",
            "id": "HttpBody",
            "properties": {
                "contentType": {
                    "description": "The HTTP Content-Type header value specifying the content type of the body.",
                    "type": "string"
                },
                "data": {
                    "description": "The HTTP request/response body as raw binary.",
                    "format": "byte",
                    "type": "string"
                },
                "extensions": {
                    "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs.",
                    "items": {
                        "additionalProperties": {
                            "description": "Properties of the object. Contains field @type with type URL.",
                            "type": "any"
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Image": {
            "description": "Information about an Earth Engine image.",
            "id": "Image",
            "properties": {
                "bands": {
                    "description": "Information about the data bands of the image.",
                    "items": {
                        "$ref": "ImageBand"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "The description of the asset.",
                    "type": "string"
                },
                "endTime": {
                    "description": "For assets that correspond to an interval of time, such as average values\nover a month or year, this timestamp corresponds to the end of that\ninterval (exclusive).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "geometry": {
                    "additionalProperties": {
                        "description": "Properties of the object.",
                        "type": "any"
                    },
                    "description": "The spatial footprint associated with the image, if any, as a GeoJSON\ngeometry object (see RFC 7946).",
                    "type": "object"
                },
                "id": {
                    "description": "The ID of the image, if present. Equivalent to `name` without the\n\"projects/*/assets/\" prefix (e.g. \"users/<USER>/<ASSET>\").\nThis should typically be present for stored images, but will be the empty\nstring for computed ones.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the image, if present. `name` is of the format\n\"projects/*/assets/**\"\n(e.g. \"projects/earthengine-legacy/assets/users/<USER>/<ASSET>\").\nThis should typically be present for stored images, but will be the empty\nstring for computed ones.",
                    "type": "string"
                },
                "properties": {
                    "additionalProperties": {
                        "description": "Properties of the object.",
                        "type": "any"
                    },
                    "description": "Key/value properties associated with the image.",
                    "type": "object"
                },
                "sizeBytes": {
                    "description": "The size of a leaf asset (e.g. an image) in bytes.\nThis should typically be non-zero for stored images, and zero for computed\nones.",
                    "format": "int64",
                    "type": "string"
                },
                "startTime": {
                    "description": "The timestamp associated with the image, if any, e.g. the time at which a\nsatellite image was taken. For assets that correspond to an interval of\ntime, such as average values over a month or year, this timestamp\ncorresponds to the start of that interval.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the asset.",
                    "type": "string"
                },
                "updateTime": {
                    "description": "The last-modified time of the image.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImageAssetExportOptions": {
            "description": "Options for saving images as Earth Engine assets.",
            "id": "ImageAssetExportOptions",
            "properties": {
                "earthEngineDestination": {
                    "$ref": "EarthEngineDestination",
                    "description": "If specified, configures export to Earth Engine."
                },
                "pyramidingPolicy": {
                    "description": "The pyramiding policy to apply by default to all bands.",
                    "enum": [
                        "PYRAMIDING_POLICY_UNSPECIFIED",
                        "MEAN",
                        "SAMPLE",
                        "MIN",
                        "MAX",
                        "MODE"
                    ],
                    "enumDescriptions": [
                        "Not specified.",
                        "Output pixel is the mask-weighted mean of the input pixels. Should be used\nfor direct observation results and continuous quantities like temperature.",
                        "Output pixel is identical to the upper-left input pixel. Should be used for\nQA/bitmask bands or other non-continuous fields like date of pixel\nacquisition.",
                        "Output pixel is the minimum value of the input pixels.",
                        "Output pixel is the maximum value of the input pixels.",
                        "Output pixel is the mask-weighted mode of the input pixels. Should be used\nfor landcover bands."
                    ],
                    "type": "string"
                },
                "pyramidingPolicyOverrides": {
                    "additionalProperties": {
                        "enum": [
                            "PYRAMIDING_POLICY_UNSPECIFIED",
                            "MEAN",
                            "SAMPLE",
                            "MIN",
                            "MAX",
                            "MODE"
                        ],
                        "type": "string"
                    },
                    "description": "Specific per-band pyramid policy overrides.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "ImageBand": {
            "description": "Information about a single data band of an image asset.",
            "id": "ImageBand",
            "properties": {
                "dataType": {
                    "$ref": "PixelDataType",
                    "description": "The numeric type of the band."
                },
                "grid": {
                    "$ref": "PixelGrid",
                    "description": "The pixel grid of the band."
                },
                "id": {
                    "description": "The ID of the band.",
                    "type": "string"
                },
                "missingData": {
                    "$ref": "MissingData",
                    "description": "The value(s) denoting missing data."
                },
                "pyramidingPolicy": {
                    "description": "The pyramiding policy of the band.",
                    "enum": [
                        "PYRAMIDING_POLICY_UNSPECIFIED",
                        "MEAN",
                        "SAMPLE",
                        "MIN",
                        "MAX",
                        "MODE"
                    ],
                    "enumDescriptions": [
                        "Not specified.",
                        "Output pixel is the mask-weighted mean of the input pixels. Should be used\nfor direct observation results and continuous quantities like temperature.",
                        "Output pixel is identical to the upper-left input pixel. Should be used for\nQA/bitmask bands or other non-continuous fields like date of pixel\nacquisition.",
                        "Output pixel is the minimum value of the input pixels.",
                        "Output pixel is the maximum value of the input pixels.",
                        "Output pixel is the mask-weighted mode of the input pixels. Should be used\nfor landcover bands."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImageFileExportOptions": {
            "description": "Options for exporting images as files outside Earth Engine.",
            "id": "ImageFileExportOptions",
            "properties": {
                "driveDestination": {
                    "$ref": "DriveDestination",
                    "description": "If specified, configures export to Google Drive."
                },
                "fileFormat": {
                    "description": "The file format in which to export the image(s).",
                    "enum": [
                        "IMAGE_FILE_FORMAT_UNSPECIFIED",
                        "JPEG",
                        "PNG",
                        "AUTO_JPEG_PNG",
                        "NPY",
                        "GEO_TIFF",
                        "TF_RECORD_IMAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "JPEG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "PNG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "Automatically select JPEG or PNG depending on whether or not there is any\ntransparency. Intended for display purposes. Only supported for 8-bit RGB\ndata, or data that is converted to 8-bit RGB via `visualization`\nparameters.",
                        "NumPy .npy format.",
                        "GeoTIFF format.",
                        "TFRecord format. Only supported for image exports."
                    ],
                    "type": "string"
                },
                "gcsDestination": {
                    "$ref": "GcsDestination",
                    "description": "If specified, configures export to Google Cloud Storage."
                },
                "geoTiffOptions": {
                    "$ref": "GeoTiffImageExportOptions",
                    "description": "File-format-specific options for `GEO_TIFF` exports."
                },
                "tfRecordOptions": {
                    "$ref": "TfRecordImageExportOptions",
                    "description": "File-format-specific options for `TF_RECORD_IMAGE` exports."
                }
            },
            "type": "object"
        },
        "ImageManifest": {
            "description": "Describes how the EarthEngine service should compose an image from a set of\nfiles.",
            "id": "ImageManifest",
            "properties": {
                "bands": {
                    "description": "The bands. The band order of the asset is the same as the order of `bands`.",
                    "items": {
                        "$ref": "TilesetBand"
                    },
                    "type": "array"
                },
                "endTime": {
                    "description": "For assets that correspond to an interval of time, such as average values\nover a month or year, this timestamp corresponds to the end of that\ninterval (exclusive).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "footprint": {
                    "$ref": "PixelFootprint",
                    "description": "The footprint in pixel coordinates (not in lat/lng coordinates).\nIf empty, the footprint is by default the entire image.\nSee `PixelGrid` for a more detailed description of pixel coordinates."
                },
                "maskBands": {
                    "description": "The mask bands.",
                    "items": {
                        "$ref": "TilesetMaskBand"
                    },
                    "type": "array"
                },
                "missingData": {
                    "$ref": "MissingData",
                    "description": "The values which represent no data in all bands of the image. Applies to\nall bands which do not specify their own `missing_data`."
                },
                "name": {
                    "description": "The name of the asset to be created.\n`name` is of the format \"projects/*/assets/**\"\n(e.g. \"projects/earthengine-legacy/assets/users/<USER>/<ASSET>\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g. \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g. \"projects/earthengine-public/assets/LANDSAT\").",
                    "type": "string"
                },
                "properties": {
                    "additionalProperties": {
                        "description": "Properties of the object.",
                        "type": "any"
                    },
                    "description": "Additional properties of the asset. The property names \"system:time_start\"\nand \"system:time_end\" are deprecated. Use the fields `start_time` and\n`end_time` instead.",
                    "type": "object"
                },
                "pyramidingPolicy": {
                    "description": "The pyramiding policy. If unspecified, the policy MEAN is applied by\ndefault. Applies to all bands which do not specify their own\n`pyramiding_policy`.",
                    "enum": [
                        "PYRAMIDING_POLICY_UNSPECIFIED",
                        "MEAN",
                        "SAMPLE",
                        "MIN",
                        "MAX",
                        "MODE"
                    ],
                    "enumDescriptions": [
                        "Not specified.",
                        "Output pixel is the mask-weighted mean of the input pixels. Should be used\nfor direct observation results and continuous quantities like temperature.",
                        "Output pixel is identical to the upper-left input pixel. Should be used for\nQA/bitmask bands or other non-continuous fields like date of pixel\nacquisition.",
                        "Output pixel is the minimum value of the input pixels.",
                        "Output pixel is the maximum value of the input pixels.",
                        "Output pixel is the mask-weighted mode of the input pixels. Should be used\nfor landcover bands."
                    ],
                    "type": "string"
                },
                "startTime": {
                    "description": "The timestamp associated with the asset, if any, e.g. the time at which a\nsatellite image was taken. For assets that correspond to an interval of\ntime, such as average values over a month or year, this timestamp\ncorresponds to the start of that interval.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "tilesets": {
                    "description": "The tilesets. Each tileset must have a unique ID.",
                    "items": {
                        "$ref": "Tileset"
                    },
                    "type": "array"
                },
                "uriPrefix": {
                    "description": "The optional prefix prepended to all `uri`s defined in this\nmanifest.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImageSource": {
            "description": "An image file and its sidecars.",
            "id": "ImageSource",
            "properties": {
                "affineTransform": {
                    "$ref": "AffineTransform",
                    "description": "An optional affine transform. Should only be specified if the data from\n`uris` (including any sidecars) isn't sufficient to place the pixels."
                },
                "uris": {
                    "description": "The URIs of the data to import. Currently, only Google Cloud Storage URIs\nare supported. Each URI must be specified in the following format:\n\"gs://bucket-id/object-id\".\nThe primary object should be the first element of the list, and sidecars\nlisted afterwards. Each URI is prefixed with\n`ImageManifest.uri_prefix` if set.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ImportImageRequest": {
            "description": "Request message for EarthEngineService.ImportImage.",
            "id": "ImportImageRequest",
            "properties": {
                "description": {
                    "description": "An optional human-readable name of the task.",
                    "type": "string"
                },
                "imageManifest": {
                    "$ref": "ImageManifest",
                    "description": "The image manifest."
                },
                "requestId": {
                    "description": "A unique string used to detect duplicated requests. If more than one\nrequest is made by the same user with the same non-empty `request_id`,\nonly one of those requests may successfully start a long-running operation.\n`request_id` may contain the characters a..z, A..Z, 0-9, or '-'.\n`request_id` may be at most 60 characters long.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImportTableRequest": {
            "description": "Request message for EarthEngineService.ImportTable.",
            "id": "ImportTableRequest",
            "properties": {
                "description": {
                    "description": "An optional human-readable name of the task.",
                    "type": "string"
                },
                "requestId": {
                    "description": "A unique string used to detect duplicated requests. If more than one\nrequest is made by the same user with the same non-empty `request_id`,\nonly one of those requests may successfully start a long-running operation.\n`request_id` may contain the characters a..z, A..Z, 0-9, or '-'.\n`request_id` may be at most 60 characters long.",
                    "type": "string"
                },
                "tableManifest": {
                    "$ref": "TableManifest",
                    "description": "The table manifest."
                }
            },
            "type": "object"
        },
        "ListAlgorithmsResponse": {
            "description": "All the algorithms available for use in Expressions.",
            "id": "ListAlgorithmsResponse",
            "properties": {
                "algorithms": {
                    "description": "A list of the available algorithms.",
                    "items": {
                        "$ref": "Algorithm"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListAssetsResponse": {
            "description": "Response message for EarthEngineService.ListAssets.",
            "id": "ListAssetsResponse",
            "properties": {
                "assets": {
                    "description": "The list of assets. Only the `id`, `name`, and `type` fields of each asset\nwill be populated.",
                    "items": {
                        "$ref": "EarthEngineAsset"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "A token to retrieve the next page of results. Pass this value in the\nListAssetsRequest.page_token\nfield in the subsequent call to the `ListAssets` method to\nretrieve the next page of results.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListFeaturesResponse": {
            "description": "Response message for EarthEngineService.ListFeatures.",
            "id": "ListFeaturesResponse",
            "properties": {
                "features": {
                    "description": "The list of features matching the query, as a list of GeoJSON\nfeature objects (see RFC 7946) containing the string \"Feature\" in\na field named \"type\", the geometry in a field named \"geometry\",\nand key/value properties in a field named \"properties\".",
                    "items": {
                        "$ref": "Feature"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "A token to retrieve the next page of results. Pass this value in the\nListFeaturesRequest.page_token\nfield in the subsequent call to the `ListFeatures` method\nto retrieve the next page of results.",
                    "type": "string"
                },
                "type": {
                    "description": "Always contains the constant string \"FeatureCollection\", marking\nthis as a GeoJSON FeatureCollection object.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListImagesResponse": {
            "description": "Response message for EarthEngineService.ListImages.",
            "id": "ListImagesResponse",
            "properties": {
                "images": {
                    "description": "The list of images matching the query.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "A token to retrieve the next page of results. Pass this value in the\nListImagesRequest.page_token\nfield in the subsequent call to the `ListImages` method to retrieve the\nnext page of results.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListOperationsResponse": {
            "description": "The response message for Operations.ListOperations.",
            "id": "ListOperationsResponse",
            "properties": {
                "nextPageToken": {
                    "description": "The standard List next-page token.",
                    "type": "string"
                },
                "operations": {
                    "description": "A list of operations that matches the specified filter in the request.",
                    "items": {
                        "$ref": "Operation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MissingData": {
            "description": "A list of values which represent no data.",
            "id": "MissingData",
            "properties": {
                "values": {
                    "description": "Values which represent no data.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MoveAssetRequest": {
            "description": "Request message for EarthEngineService.MoveAsset.",
            "id": "MoveAssetRequest",
            "properties": {
                "destinationName": {
                    "description": "The destination name to which to move the asset.\n`name` is of the format \"projects/*/assets/**\"\n(e.g., \"projects/earthengine-legacy/assets/users/[USER]/[ASSET]\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g., \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g., \"projects/earthengine-public/assets/LANDSAT\").",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Operation": {
            "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
            "id": "Operation",
            "properties": {
                "done": {
                    "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
                    "type": "boolean"
                },
                "error": {
                    "$ref": "Status",
                    "description": "The error result of the operation in case of failure or cancellation."
                },
                "metadata": {
                    "additionalProperties": {
                        "description": "Properties of the object. Contains field @type with type URL.",
                        "type": "any"
                    },
                    "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
                    "type": "object"
                },
                "name": {
                    "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.",
                    "type": "string"
                },
                "response": {
                    "additionalProperties": {
                        "description": "Properties of the object. Contains field @type with type URL.",
                        "type": "any"
                    },
                    "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "OperationMetadata": {
            "description": "Metadata describing a long running operation.",
            "id": "OperationMetadata",
            "properties": {
                "createTime": {
                    "description": "Time the operation was created.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the operation.",
                    "type": "string"
                },
                "destinationUris": {
                    "description": "The URI(s) pointing to the resources output by this operation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "endTime": {
                    "description": "Time the operation ended, if the operation has ended.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority of the operation. A higher value indicates a higher priority. The\ndefault priority is 0.",
                    "format": "int32",
                    "type": "integer"
                },
                "scriptUri": {
                    "description": "The URI of the script from which this operation originated, if the\noperation was started in the Code Editor.",
                    "type": "string"
                },
                "startTime": {
                    "description": "Time the operation started, if the operation has started.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "state": {
                    "description": "State of the operation.",
                    "enum": [
                        "STATE_UNSPECIFIED",
                        "PENDING",
                        "RUNNING",
                        "CANCELLING",
                        "SUCCEEDED",
                        "CANCELLED",
                        "FAILED"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "The operation is ready but not yet running.",
                        "The operation is running.",
                        "A cancellation request was received.",
                        "The operation was completed successfully.",
                        "The operation was cancelled.",
                        "The operation failed."
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "The type of this task (e.g., EXPORT_IMAGE, EXPORT_FEATURES, etc.).",
                    "type": "string"
                },
                "updateTime": {
                    "description": "Time the operation was last updated.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PixelDataType": {
            "description": "Specifies the numeric type of the pixels in an image band.",
            "id": "PixelDataType",
            "properties": {
                "dimensionsCount": {
                    "description": "The number of dimensions in an array-valued data type, or zero to indicate\nan ordinary scalar type.",
                    "format": "int32",
                    "type": "integer"
                },
                "precision": {
                    "description": "The numeric precision of the type.",
                    "enum": [
                        "PRECISION_UNSPECIFIED",
                        "INT",
                        "FLOAT",
                        "DOUBLE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "The data type has integer precision.\nNote that this could represent differently sized integers.",
                        "The data type has 32-bit floating point precision.",
                        "The data type has 64-bit floating point (double) precision."
                    ],
                    "type": "string"
                },
                "range": {
                    "$ref": "DoubleRange",
                    "description": "The range of the numeric type, if any. Typically absent for floating-point\ntypes."
                }
            },
            "type": "object"
        },
        "PixelFootprint": {
            "description": "A footprint of all valid pixels in an image.",
            "id": "PixelFootprint",
            "properties": {
                "bandId": {
                    "description": "The ID of the band whose CRS defines the coordinates of the footprint.\nIf empty, the first band is used.",
                    "type": "string"
                },
                "points": {
                    "description": "A ring which forms the exterior of a simple polygon that must contain the\ncenters of all valid pixels of the image. This must be a linear ring: the\nlast point must be equal to the first. Coordinates are in the projection of\nthe band specified by `band_id`.\n\nNote: Use non-integer coordinates such as the center of each pixel because\nfootprint is taken to include a pixel iff the pixel (a 1x1 rectangle)\nintersects the footprint. To avoid accidentally selecting neighboring\npixels, don't use integer-valued coordinates, because those are the\nboundaries between pixels. Drawing the footprint along the pixel centers\nprevents including unintended pixels, which can cause errors when\nintended pixels are abutting a map boundary such as the antimeridian\nor a pole.\n\nFor example, for a 2x2 image with all 4 valid pixels the following is one\npossible ring:\n[{\"x\": 0.5, \"y\": 0.5}, {\"x\": 0.5, \"y\": 1.5}, {\"x\": 1.5, \"y\": 1.5},\n {\"x\": 1.5, \"y\": 0.5}, {\"x\": 0.5, \"y\": 0.5}]",
                    "items": {
                        "$ref": "GridPoint"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PixelGrid": {
            "description": "Defines a pixel grid on the surface of the Earth, via a map projection.\nIf the projection has a standard code, then `crs_code` will be set\n(non-empty).\nIf the projection is non-standard, then `crs_wkt` will be set.\nIf the post-projection transformation is affine, then `affine_transform` will\nbe set.",
            "id": "PixelGrid",
            "properties": {
                "affineTransform": {
                    "$ref": "AffineTransform",
                    "description": "The affine transform."
                },
                "crsCode": {
                    "description": "A standard coordinate reference system code (e.g. \"EPSG:4326\").",
                    "type": "string"
                },
                "crsWkt": {
                    "description": "A coordinate reference system in WKT format (\"Well-Known Text\").",
                    "type": "string"
                },
                "dimensions": {
                    "$ref": "GridDimensions",
                    "description": "The dimensions of the pixel grid."
                }
            },
            "type": "object"
        },
        "Policy": {
            "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`. A `binding` binds a list of\n`members` to a `role`, where the members can be user accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named list of permissions\ndefined by IAM.\n\n**JSON Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-other-app@appspot.gserviceaccount.com\"\n          ]\n        },\n        {\n          \"role\": \"roles/viewer\",\n          \"members\": [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\n**YAML Example**\n\n    bindings:\n    - members:\n      - user:mike@example.com\n      - group:admins@example.com\n      - domain:google.com\n      - serviceAccount:my-other-app@appspot.gserviceaccount.com\n      role: roles/owner\n    - members:\n      - user:sean@example.com\n      role: roles/viewer\n\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https://cloud.google.com/iam/docs).",
            "id": "Policy",
            "properties": {
                "auditConfigs": {
                    "description": "Specifies cloud audit logging configuration for this policy.",
                    "items": {
                        "$ref": "AuditConfig"
                    },
                    "type": "array"
                },
                "bindings": {
                    "description": "Associates a list of `members` to a `role`.\n`bindings` with no members will result in an error.",
                    "items": {
                        "$ref": "Binding"
                    },
                    "type": "array"
                },
                "etag": {
                    "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten.",
                    "format": "byte",
                    "type": "string"
                },
                "version": {
                    "description": "Specifies the format of the policy.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nPolicies with any conditional bindings must specify version 3. Policies\nwithout any conditional bindings may specify any valid value or leave the\nfield unset.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "SetIamPolicyRequest": {
            "description": "Request message for `SetIamPolicy` method.",
            "id": "SetIamPolicyRequest",
            "properties": {
                "policy": {
                    "$ref": "Policy",
                    "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them."
                },
                "updateMask": {
                    "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only\nthe fields in the mask will be modified. If no mask is provided, the\nfollowing default mask is used:\npaths: \"bindings, etag\"\nThis field is only used by Cloud IAM.",
                    "format": "google-fieldmask",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Status": {
            "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
            "id": "Status",
            "properties": {
                "code": {
                    "description": "The status code, which should be an enum value of google.rpc.Code.",
                    "format": "int32",
                    "type": "integer"
                },
                "details": {
                    "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
                    "items": {
                        "additionalProperties": {
                            "description": "Properties of the object. Contains field @type with type URL.",
                            "type": "any"
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "message": {
                    "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TableAssetExportOptions": {
            "description": "Options for saving tables as Earth Engine assets.",
            "id": "TableAssetExportOptions",
            "properties": {
                "earthEngineDestination": {
                    "$ref": "EarthEngineDestination",
                    "description": "If specified, configures export to Earth Engine."
                }
            },
            "type": "object"
        },
        "TableFileExportOptions": {
            "description": "Options for exporting tables as files outside Earth Engine.",
            "id": "TableFileExportOptions",
            "properties": {
                "driveDestination": {
                    "$ref": "DriveDestination",
                    "description": "If specified, configures export to Google Drive."
                },
                "fileFormat": {
                    "description": "The file format in which to export the table(s).",
                    "enum": [
                        "TABLE_FILE_FORMAT_UNSPECIFIED",
                        "CSV",
                        "GEO_JSON",
                        "KML",
                        "KMZ",
                        "SHP",
                        "TF_RECORD_TABLE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Comma-separated value format.",
                        "GeoJSON FeatureCollection format. See http://geojson.org/.",
                        "Keyhole Markup Language format.",
                        "Zip-compressed Keyhole Markup Language format.",
                        "Shapefile format.",
                        "TFRecord format."
                    ],
                    "type": "string"
                },
                "gcsDestination": {
                    "$ref": "GcsDestination",
                    "description": "If specified, configures export to Google Cloud Storage."
                }
            },
            "type": "object"
        },
        "TableManifest": {
            "description": "Describes how the EarthEngine service should compose a table from a set of\nfiles.",
            "id": "TableManifest",
            "properties": {
                "endTime": {
                    "description": "For assets that correspond to an interval of time, such as average values\nover a month or year, this timestamp corresponds to the end of that\ninterval (exclusive).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the asset to be created.\n`name` is of the format \"projects/*/assets/**\"\n(e.g. \"projects/earthengine-legacy/assets/users/<USER>/<ASSET>\").\nAll user-owned assets are under the project \"earthengine-legacy\"\n(e.g. \"projects/earthengine-legacy/assets/users/foo/bar\").\nAll other assets are under the project \"earthengine-public\"\n(e.g. \"projects/earthengine-public/assets/LANDSAT\").",
                    "type": "string"
                },
                "properties": {
                    "additionalProperties": {
                        "description": "Properties of the object.",
                        "type": "any"
                    },
                    "description": "Additional properties of the asset. The property names \"system:time_start\"\nand \"system:time_end\" are deprecated. Use the fields `start_time` and\n`end_time` instead.",
                    "type": "object"
                },
                "sources": {
                    "description": "The sources which comprise this table.",
                    "items": {
                        "$ref": "TableSource"
                    },
                    "type": "array"
                },
                "startTime": {
                    "description": "The timestamp associated with the asset, if any, e.g. the time at which a\nsatellite image was taken. For assets that correspond to an interval of\ntime, such as average values over a month or year, this timestamp\ncorresponds to the start of that interval.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "uriPrefix": {
                    "description": "The optional prefix prepended to all `uri`s defined in this\nmanifest.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TableSource": {
            "description": "A table file.",
            "id": "TableSource",
            "properties": {
                "charset": {
                    "description": "The name of the default charset to use for decoding strings. If empty,\nthe charset \"utf-8\" is assumed by default.",
                    "type": "string"
                },
                "crs": {
                    "description": "The default CRS code or WKT string specifying the coordinate reference\nsystem of any geometry that does not have one specified. If left blank, the\ndefault will be EPSG:4326: https://epsg.io/4326. For CSV/TFRecord sources\nonly.",
                    "type": "string"
                },
                "csvDelimiter": {
                    "description": "When ingesting CSV files, a single character used as a delimiter between\ncolumn values in a row. If left blank, defaults to ','. For CSV sources\nonly.",
                    "type": "string"
                },
                "csvQualifier": {
                    "description": "When ingesting CSV files, a character that surrounds column values (a.k.a.\n\"quote character\"). If left blank, defaults to '\"'. For CSV sources\nonly.\n\nIf a column value is not surrounded by qualifiers, leading and tailing\nwhitespace is trimmed.\nFor example:\n   ..., test,...            <== this value is not qualified\nbecomes the string value:\n   \"test\"                   <== whitespace is stripped\n\nwhere:\n   ...,\" test\",...          <== this value IS qualified with quotes\nbecomes the string value:\n   \" test\"                  <== whitespace remains!",
                    "type": "string"
                },
                "dateFormat": {
                    "description": "A format with which to parse fields encoding dates. The format pattern must\nbe as described at\nhttp://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html.\nIf left blank, dates will be imported as strings. For CSV/TFRecord sources\nonly.",
                    "type": "string"
                },
                "geodesic": {
                    "description": "The default strategy for interpreting edges in geometry that do not have\none otherwise specified. If false, edges are straight in the projection. If\ntrue, edges are curved to follow the shortest path on the surface of the\nEarth. When blank, defaults to false if 'crs' is a projected coordinate\nsystem. For CSV/TFRecord sources only.",
                    "type": "boolean"
                },
                "maxErrorMeters": {
                    "description": "The max allowed error in meters when transforming geometry between\ncoordinate systems. If empty, the max error is 1 meter by default.",
                    "format": "double",
                    "type": "number"
                },
                "maxVertices": {
                    "description": "The max number of vertices. If not zero, geometry will be subdivided into\nspatially disjoint pieces which are each under this limit.",
                    "format": "int32",
                    "type": "integer"
                },
                "primaryGeometryColumn": {
                    "description": "The geometry column to use as a row's primary geometry when there is more\nthan one geometry column.\n\nIf left blank and more than one geometry column exists, the first geometry\ncolumn encountered is used. For CSV/TFRecord sources only.",
                    "type": "string"
                },
                "uris": {
                    "description": "The URIs of the data to import. Currently only Google Cloud Storage URIs\nare supported. Each URI must be specified in the following format:\n\"gs://bucket-id/object-id\".\nThe primary object should be the first element of the list, sidecar files\nare inferred from the filepath of the primary object. Only one URI is\ncurrently supported. If more than one URI is specified an\n`INALID_ARGUMENT` error is returned.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "xColumn": {
                    "description": "The name of the numeric x coordinate column for deducing point geometry. If\nthe y_column is also specified, and both columns contain number values,\nthen a point geometry column will be constructed with x,y values in the\ncoordinate system given in 'crs'. If left blank and 'crs' does _not_\nspecify a projected coordinate system, defaults to \"longitude\". If left\nblank and 'crs' _does_ specify a projected coordinate system, defaults to\n\"\" and no point geometry is generated.\n\nA generated point geometry column will be named {x_column}_{y_column}_N\nwhere N is appended such that {x_column}_{y_column}_N is unique if a column\nnamed {x_column}_{y_column} already exists. For CSV/TFRecord sources only.",
                    "type": "string"
                },
                "yColumn": {
                    "description": "The name of the numeric y coordinate column for deducing point geometry. If\nthe x_column is also specified, and both columns contain number values,\nthen a point geometry column will be constructed with x,y values in the\ncoordinate system given in 'crs'. If left blank and 'crs' does _not_\nspecify a projected coordinate system, defaults to \"latitude\". If left\nblank and 'crs' _does_ specify a projected coordinate system, defaults to\n\"\" and no point geometry is generated.\n\nA generated point geometry column will be named {x_column}_{y_column}_N\nwhere N is appended such that {x_column}_{y_column}_N is unique if a column\nnamed {x_column}_{y_column} already exists. For CSV/TFRecord sources only.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TestIamPermissionsRequest": {
            "description": "Request message for `TestIamPermissions` method.",
            "id": "TestIamPermissionsRequest",
            "properties": {
                "permissions": {
                    "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TestIamPermissionsResponse": {
            "description": "Response message for `TestIamPermissions` method.",
            "id": "TestIamPermissionsResponse",
            "properties": {
                "permissions": {
                    "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TfRecordImageExportOptions": {
            "description": "Options for encoding images as TFRecord files.",
            "id": "TfRecordImageExportOptions",
            "properties": {
                "collapseBands": {
                    "description": "If true, all bands will be combined into a single 3D tensor, taking on the\nname of the first band in the image. All bands are promoted to bytes,\nint64s, then floats in that order depending on the type furthest in that\nsequence within all bands. Array bands are allowed as long as tensor_depths\nis specified.",
                    "type": "boolean"
                },
                "compress": {
                    "description": "If true, compresses the .tfrecord files with gzip and appends the \".gz\"\nsuffix.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "The value set in each band of a pixel that is partially or completely\nmasked, and, the value set at each value in an output 3D feature made from\nan array band where the array length at the source pixel was less than the\ndepth of the feature value. The fractional part is dropped for integer type\nbands, and clamped to the range of the band type. Defaults to 0.",
                    "format": "float",
                    "type": "number"
                },
                "marginDimensions": {
                    "$ref": "GridDimensions",
                    "description": "If specified, tiles will be buffered by the margin dimensions both\npositively and negatively, resulting in overlap between neighboring\npatches."
                },
                "maxMaskedRatio": {
                    "description": "Maximum allowed proportion of masked pixels in a patch. Patches which\nexceed this allowance will be dropped rather than written to files. If this\nfield is set to anything but 1, the JSON sidecar will not be produced.\nDefaults to 1.",
                    "format": "double",
                    "type": "number"
                },
                "maxSizeBytes": {
                    "description": "Maximum size, in bytes, for an exported .tfrecord (before compression). A\nsmaller file size will result in greater sharding (and, thus, more output\nfiles). Defaults to 1GiB.",
                    "format": "int64",
                    "type": "string"
                },
                "sequenceData": {
                    "description": "If true, each pixel is output as a SequenceExample mapping scalar bands to\nthe context and array bands to the example\u2019s sequences. The\nSequenceExamples are output in row-major order of pixels in each patch, and\nthen by row-major order of area patches in the file sequence.",
                    "type": "boolean"
                },
                "tensorDepths": {
                    "additionalProperties": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "description": "Mapping from the names of input array bands to the depth of the 3D tensors\nthey create. Arrays will be truncated, or padded with default values to fit\nthe shape specified. For each array band, this must have a corresponding\nentry.",
                    "type": "object"
                },
                "tileDimensions": {
                    "$ref": "GridDimensions",
                    "description": "Dimensions tiled over the export area, covering every pixel in the bounding\nbox exactly once (except when the patch dimensions do not evenly divide the\nbounding box in which case border tiles along the greatest x/y edges will\nbe dropped). Dimensions must be > 0."
                }
            },
            "type": "object"
        },
        "Thumbnail": {
            "description": "Information about a thumbnail.",
            "id": "Thumbnail",
            "properties": {
                "bandIds": {
                    "description": "If present, specifies a specific set of bands that will be\nselected from the result of evaluating `expression`. If not\npresent, all bands resulting from `expression` will be selected.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute. Must evaluate to an Image."
                },
                "fileFormat": {
                    "description": "The output encoding in which to generate the resulting image.",
                    "enum": [
                        "IMAGE_FILE_FORMAT_UNSPECIFIED",
                        "JPEG",
                        "PNG",
                        "AUTO_JPEG_PNG",
                        "NPY",
                        "GEO_TIFF",
                        "TF_RECORD_IMAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "JPEG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "PNG. Intended for display purposes. Only supported for 8-bit RGB data,\nor data that is converted to 8-bit RGB via `visualization` parameters.",
                        "Automatically select JPEG or PNG depending on whether or not there is any\ntransparency. Intended for display purposes. Only supported for 8-bit RGB\ndata, or data that is converted to 8-bit RGB via `visualization`\nparameters.",
                        "NumPy .npy format.",
                        "GeoTIFF format.",
                        "TFRecord format. Only supported for image exports."
                    ],
                    "type": "string"
                },
                "grid": {
                    "$ref": "PixelGrid",
                    "description": "An optional pixel grid describing how the image computed by\n`expression` is reprojected and clipped."
                },
                "name": {
                    "description": "The resource name representing the thumbnail, of the form\n\"projects/*/thumbnails/**\"\n(e.g. \"projects/earthengine-legacy/thumbnails/<THUMBNAIL-ID>\").",
                    "type": "string"
                },
                "visualizationOptions": {
                    "$ref": "VisualizationOptions",
                    "description": "If present, a set of visualization options to apply to produce an\n8-bit RGB visualization of the data."
                }
            },
            "type": "object"
        },
        "TileOptions": {
            "description": "Options describing image or video map tiles to export.",
            "id": "TileOptions",
            "properties": {
                "mapsApiKey": {
                    "description": "Optional Google Maps Platform API Key for generated map tile viewer.",
                    "type": "string"
                },
                "maxZoom": {
                    "description": "The maximum zoom level of the map tiles to export.",
                    "format": "int32",
                    "type": "integer"
                },
                "minZoom": {
                    "description": "The minimum zoom level of the map tiles to export. Defaults to zero.",
                    "format": "int32",
                    "type": "integer"
                },
                "scale": {
                    "description": "The max image resolution in meters per pixel. The scale will be converted\nto the most appropriate maximum zoom level at the equator.",
                    "format": "double",
                    "type": "number"
                },
                "skipEmptyTiles": {
                    "description": "If true, skip writing empty (i.e. fully-transparent) map tiles.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Tileset": {
            "description": "A set of ImageSources that can be referenced with a unique ID.",
            "id": "Tileset",
            "properties": {
                "crs": {
                    "description": "The coordinate reference system of the pixel grid, specified as a\nstandard code where possible, and in WKT format otherwise.",
                    "type": "string"
                },
                "dataType": {
                    "description": "An optional data type for the band. If specified, no check is done\nto verify that the type of every input file matches.\n`data_type` must match the type of every input file, except for cases\nwhere the input type is ambiguous (e.g. `Byte` can be `INT8` or `UINT8`).",
                    "enum": [
                        "DATA_TYPE_UNSPECIFIED",
                        "INT8",
                        "UINT8",
                        "INT16",
                        "UINT16",
                        "INT32",
                        "UINT32",
                        "FLOAT",
                        "DOUBLE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "8-bit signed integer.",
                        "8-bit unsigned integer.",
                        "16-bit signed integer.",
                        "16-bit unsigned integer.",
                        "32-bit signed integer.",
                        "32-bit unsigned integer.",
                        "32-bit float.",
                        "64-bit float."
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the tileset. Must be unique among tilesets specified in the\nImageManifest. This ID is discarded during the processing step; it is\nonly used to link a Tileset to a band. The empty string is a valid ID.",
                    "type": "string"
                },
                "sources": {
                    "description": "The sources which comprise this tileset.",
                    "items": {
                        "$ref": "ImageSource"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TilesetBand": {
            "description": "Represents a single band sourced from a tileset.",
            "id": "TilesetBand",
            "properties": {
                "id": {
                    "description": "The ID of the band.",
                    "type": "string"
                },
                "missingData": {
                    "$ref": "MissingData",
                    "description": "The values which represent no data in the band."
                },
                "pyramidingPolicy": {
                    "description": "The pyramiding policy.",
                    "enum": [
                        "PYRAMIDING_POLICY_UNSPECIFIED",
                        "MEAN",
                        "SAMPLE",
                        "MIN",
                        "MAX",
                        "MODE"
                    ],
                    "enumDescriptions": [
                        "Not specified.",
                        "Output pixel is the mask-weighted mean of the input pixels. Should be used\nfor direct observation results and continuous quantities like temperature.",
                        "Output pixel is identical to the upper-left input pixel. Should be used for\nQA/bitmask bands or other non-continuous fields like date of pixel\nacquisition.",
                        "Output pixel is the minimum value of the input pixels.",
                        "Output pixel is the maximum value of the input pixels.",
                        "Output pixel is the mask-weighted mode of the input pixels. Should be used\nfor landcover bands."
                    ],
                    "type": "string"
                },
                "tilesetBandIndex": {
                    "description": "The zero-based band index from the tileset corresponding to the band.",
                    "format": "int32",
                    "type": "integer"
                },
                "tilesetId": {
                    "description": "The ID of the tileset corresponding to the band.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TilesetMaskBand": {
            "description": "Represents a single mask band sourced from a tileset.",
            "id": "TilesetMaskBand",
            "properties": {
                "bandIds": {
                    "description": "The IDs of bands that the mask band applies to. If empty, the mask band\nis applied to all bands in the asset. Each band may only have one\ncorresponding mask band.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tilesetId": {
                    "description": "The ID of the Tileset corresponding to the mask band. The last band of the\nTileset is always used as the mask band.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateAssetRequest": {
            "description": "Request message for EarthEngineService.UpdateAsset.",
            "id": "UpdateAssetRequest",
            "properties": {
                "asset": {
                    "$ref": "EarthEngineAsset",
                    "description": "The asset resource containing updated field values."
                },
                "updateMask": {
                    "description": "The update mask specifying which fields of the asset to update.",
                    "format": "google-fieldmask",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ValueNode": {
            "description": "Represents a single value or object.",
            "id": "ValueNode",
            "properties": {
                "argumentReference": {
                    "description": "A reference to an argument of some enclosing FunctionDefinition. Only\nvalid inside the subgraph rooted at the \"body\" field of a\nFunctionDefinition.",
                    "type": "string"
                },
                "arrayValue": {
                    "$ref": "ArrayValue",
                    "description": "An array of values."
                },
                "bytesValue": {
                    "description": "An opaque series of bytes.",
                    "format": "byte",
                    "type": "string"
                },
                "constantValue": {
                    "description": "A constant value. This is allowed to be of arbitrary complexity\n(i.e., may contain Structs and ListValues).",
                    "type": "any"
                },
                "dictionaryValue": {
                    "$ref": "DictionaryValue",
                    "description": "A dictionary of values."
                },
                "functionDefinitionValue": {
                    "$ref": "FunctionDefinition",
                    "description": "A function object."
                },
                "functionInvocationValue": {
                    "$ref": "FunctionInvocation",
                    "description": "A function invocation."
                },
                "integerValue": {
                    "description": "An integer value.",
                    "format": "int64",
                    "type": "string"
                },
                "valueReference": {
                    "description": "A reference to a named ValueNode, defined in the enclosing\nExpression's \"values\" field.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VideoFileExportOptions": {
            "description": "Options for exporting videos as files outside Earth Engine.",
            "id": "VideoFileExportOptions",
            "properties": {
                "driveDestination": {
                    "$ref": "DriveDestination",
                    "description": "If specified, configures export to Google Drive."
                },
                "fileFormat": {
                    "description": "The file format in which to export the video(s). Currently only\nMP4 is supported.",
                    "enum": [
                        "VIDEO_FILE_FORMAT_UNSPECIFIED",
                        "MP4",
                        "GIF",
                        "VP9"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "MPEG-4 Part 14 format.",
                        "Animated GIF.",
                        "WEBM/VP9"
                    ],
                    "type": "string"
                },
                "gcsDestination": {
                    "$ref": "GcsDestination",
                    "description": "If specified, configures export to Google Cloud Storage."
                }
            },
            "type": "object"
        },
        "VideoOptions": {
            "description": "Basic options for generating videos.",
            "id": "VideoOptions",
            "properties": {
                "framesPerSecond": {
                    "description": "The frame rate of the exported video. Must be a value between 0.1 and 120.\nDefaults to 5.0.",
                    "format": "double",
                    "type": "number"
                },
                "maxFrames": {
                    "description": "The maximum number of video frames to compute and export. This is a safety\nguard to prevent you from accidentally starting a larger export than you\nhad intended. The default value is 1000 frames, but you can set the value\nexplicitly to raise or lower this limit.",
                    "format": "int32",
                    "type": "integer"
                },
                "maxPixelsPerFrame": {
                    "description": "The maximum number of pixels to compute and export per frame. This is a\nsafety guard to prevent you from accidentally starting a larger export than\nyou had intended. The default value is 1e8 pixels, but you can set the\nvalue explicitly to raise or lower this limit.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VideoThumbnail": {
            "description": "Information about a video thumbnail.",
            "id": "VideoThumbnail",
            "properties": {
                "expression": {
                    "$ref": "Expression",
                    "description": "The expression to compute. Must evaluate to an ImageCollection."
                },
                "fileFormat": {
                    "description": "The output encoding in which to generate the resulting video\nthumbnail. Currently only GIF is supported.",
                    "enum": [
                        "VIDEO_FILE_FORMAT_UNSPECIFIED",
                        "MP4",
                        "GIF",
                        "VP9"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "MPEG-4 Part 14 format.",
                        "Animated GIF.",
                        "WEBM/VP9"
                    ],
                    "type": "string"
                },
                "grid": {
                    "$ref": "PixelGrid",
                    "description": "An optional pixel grid describing how the images computed by\n`expression` are reprojected and clipped."
                },
                "name": {
                    "description": "The resource name representing the video thumbnail, of the form\n\"projects/*/videoThumbnails/**\"\n(e.g. \"projects/earthengine-legacy/videoThumbnails/<THUMBNAIL-ID>\").",
                    "type": "string"
                },
                "videoOptions": {
                    "$ref": "VideoOptions",
                    "description": "Options for the animation."
                }
            },
            "type": "object"
        },
        "VisualizationOptions": {
            "description": "Describes how to produce an 8-bit RGB visualization of the requested data.",
            "id": "VisualizationOptions",
            "properties": {
                "gamma": {
                    "description": "If present, specifies an overall gamma correction factor to apply to the\nimage.",
                    "format": "double",
                    "type": "number"
                },
                "opacity": {
                    "description": "If present, specifies an overall opacity factor to apply to the image, in\nthe range 0.0 to 1.0.",
                    "format": "double",
                    "type": "number"
                },
                "paletteColors": {
                    "description": "If present, specifies sequence of CSS-style RGB color identifiers to apply\nas a color palette. Only allowed when visualizing a single data band.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ranges": {
                    "description": "If present, specifies the range of data values to visualize. This range of\nvalues will be mapped to 0-255 (black to white) in the resulting image, and\nvalues outside this range will be clamped.  May specify as one range for\neach band being visualized or else a single range to be applied to all\nbands.",
                    "items": {
                        "$ref": "DoubleRange"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "WaitOperationRequest": {
            "description": "The request message for Operations.WaitOperation.",
            "id": "WaitOperationRequest",
            "properties": {
                "timeout": {
                    "description": "The maximum duration to wait before timing out. If left blank, the wait\nwill be at most the time permitted by the underlying HTTP/RPC protocol.\nIf RPC context deadline is also specified, the shorter one will be used.",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Google Earth Engine API (Staging)",
    "version": "v1alpha",
    "version_module": true
}