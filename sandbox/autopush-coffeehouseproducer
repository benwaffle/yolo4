{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/cloud-platform": {
                    "description": "View and manage your data across Google Cloud Platform services"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://autopush-coffeehouseproducer.sandbox.googleapis.com/",
    "batchPath": "batch",
    "description": "",
    "discoveryVersion": "v1",
    "documentationLink": "",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "autopush_coffeehouseproducer_sandbox:v1",
    "kind": "discovery#restDescription",
    "name": "autopush_coffeehouseproducer_sandbox",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "projects": {
            "resources": {
                "locations": {
                    "methods": {
                        "get": {
                            "description": "Gets information about a location.",
                            "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
                            "httpMethod": "GET",
                            "id": "autopush_coffeehouseproducer_sandbox.projects.locations.get",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the location.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/locations/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}",
                            "response": {
                                "$ref": "Location"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        },
                        "list": {
                            "description": "Lists information about the supported locations for this service.",
                            "flatPath": "v1/projects/{projectsId}/locations",
                            "httpMethod": "GET",
                            "id": "autopush_coffeehouseproducer_sandbox.projects.locations.list",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "filter": {
                                    "description": "The standard list filter.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The resource that owns the locations collection, if applicable.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "The standard list page size.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The standard list page token.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}/locations",
                            "response": {
                                "$ref": "ListLocationsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                            ]
                        }
                    },
                    "resources": {
                        "coffeeMakers": {
                            "methods": {
                                "get": {
                                    "description": "Gets details of a single coffee maker.",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/coffeeMakers/{coffeeMakersId}",
                                    "httpMethod": "GET",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.coffeeMakers.get",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+/coffeeMakers/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}",
                                    "response": {
                                        "$ref": "ProducerCoffeeMaker"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                },
                                "list": {
                                    "description": "Lists coffee makers in a given project and location.",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/coffeeMakers",
                                    "httpMethod": "GET",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.coffeeMakers.list",
                                    "parameterOrder": [
                                        "parent"
                                    ],
                                    "parameters": {
                                        "filter": {
                                            "location": "query",
                                            "type": "string"
                                        },
                                        "orderBy": {
                                            "location": "query",
                                            "type": "string"
                                        },
                                        "pageSize": {
                                            "format": "int32",
                                            "location": "query",
                                            "type": "integer"
                                        },
                                        "pageToken": {
                                            "location": "query",
                                            "type": "string"
                                        },
                                        "parent": {
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+parent}/coffeeMakers",
                                    "response": {
                                        "$ref": "ListCoffeeMakersResponse"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                },
                                "patch": {
                                    "description": "Updates the parameters of a coffee maker (such as coffee variety/decaf)\nin a given coffee maker.",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/coffeeMakers/{coffeeMakersId}",
                                    "httpMethod": "PATCH",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.coffeeMakers.patch",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+/coffeeMakers/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "updateMask": {
                                            "format": "google-fieldmask",
                                            "location": "query",
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}",
                                    "request": {
                                        "$ref": "ProducerCoffeeMaker"
                                    },
                                    "response": {
                                        "$ref": "Operation"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                },
                                "reboot": {
                                    "description": "Reboots the coffee maker",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/coffeeMakers/{coffeeMakersId}:reboot",
                                    "httpMethod": "POST",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.coffeeMakers.reboot",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+/coffeeMakers/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}:reboot",
                                    "request": {
                                        "$ref": "RebootRequest"
                                    },
                                    "response": {
                                        "$ref": "Operation"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                },
                                "repair": {
                                    "description": "Repairs the coffee maker",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/coffeeMakers/{coffeeMakersId}:repair",
                                    "httpMethod": "POST",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.coffeeMakers.repair",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+/coffeeMakers/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}:repair",
                                    "request": {
                                        "$ref": "RepairRequest"
                                    },
                                    "response": {
                                        "$ref": "Operation"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                }
                            },
                            "resources": {
                                "coffeeBeans": {
                                    "methods": {
                                        "get": {
                                            "description": "Gets the details of a single coffee bean.",
                                            "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/coffeeMakers/{coffeeMakersId}/coffeeBeans/{coffeeBeansId}",
                                            "httpMethod": "GET",
                                            "id": "autopush_coffeehouseproducer_sandbox.projects.locations.coffeeMakers.coffeeBeans.get",
                                            "parameterOrder": [
                                                "name"
                                            ],
                                            "parameters": {
                                                "name": {
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/locations/[^/]+/coffeeMakers/[^/]+/coffeeBeans/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/{+name}",
                                            "response": {
                                                "$ref": "ProducerCoffeeBean"
                                            },
                                            "scopes": [
                                                "https://www.googleapis.com/auth/cloud-platform"
                                            ]
                                        },
                                        "list": {
                                            "description": "Lists producer coffee beans in a given coffee maker.",
                                            "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/coffeeMakers/{coffeeMakersId}/coffeeBeans",
                                            "httpMethod": "GET",
                                            "id": "autopush_coffeehouseproducer_sandbox.projects.locations.coffeeMakers.coffeeBeans.list",
                                            "parameterOrder": [
                                                "parent"
                                            ],
                                            "parameters": {
                                                "filter": {
                                                    "location": "query",
                                                    "type": "string"
                                                },
                                                "orderBy": {
                                                    "location": "query",
                                                    "type": "string"
                                                },
                                                "pageSize": {
                                                    "format": "int32",
                                                    "location": "query",
                                                    "type": "integer"
                                                },
                                                "pageToken": {
                                                    "location": "query",
                                                    "type": "string"
                                                },
                                                "parent": {
                                                    "location": "path",
                                                    "pattern": "^projects/[^/]+/locations/[^/]+/coffeeMakers/[^/]+$",
                                                    "required": true,
                                                    "type": "string"
                                                }
                                            },
                                            "path": "v1/{+parent}/coffeeBeans",
                                            "response": {
                                                "$ref": "ListCoffeeBeansResponse"
                                            },
                                            "scopes": [
                                                "https://www.googleapis.com/auth/cloud-platform"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "operations": {
                            "methods": {
                                "cancel": {
                                    "description": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                                    "httpMethod": "POST",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.operations.cancel",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "description": "The name of the operation resource to be cancelled.",
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}:cancel",
                                    "request": {
                                        "$ref": "CancelOperationRequest"
                                    },
                                    "response": {
                                        "$ref": "Empty"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                },
                                "delete": {
                                    "description": "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                                    "httpMethod": "DELETE",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.operations.delete",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "description": "The name of the operation resource to be deleted.",
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}",
                                    "response": {
                                        "$ref": "Empty"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                },
                                "get": {
                                    "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                                    "httpMethod": "GET",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.operations.get",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "description": "The name of the operation resource.",
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}",
                                    "response": {
                                        "$ref": "Operation"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                },
                                "list": {
                                    "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id.",
                                    "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
                                    "httpMethod": "GET",
                                    "id": "autopush_coffeehouseproducer_sandbox.projects.locations.operations.list",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "filter": {
                                            "description": "The standard list filter.",
                                            "location": "query",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "The name of the operation's parent resource.",
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/locations/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        },
                                        "pageSize": {
                                            "description": "The standard list page size.",
                                            "format": "int32",
                                            "location": "query",
                                            "type": "integer"
                                        },
                                        "pageToken": {
                                            "description": "The standard list page token.",
                                            "location": "query",
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+name}/operations",
                                    "response": {
                                        "$ref": "ListOperationsResponse"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "revision": "20190506",
    "rootUrl": "https://autopush-coffeehouseproducer.sandbox.googleapis.com/",
    "schemas": {
        "CancelOperationRequest": {
            "description": "The request message for Operations.CancelOperation.",
            "id": "CancelOperationRequest",
            "properties": {},
            "type": "object"
        },
        "Empty": {
            "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "id": "Empty",
            "properties": {},
            "type": "object"
        },
        "ListCoffeeBeansResponse": {
            "id": "ListCoffeeBeansResponse",
            "properties": {
                "nextPageToken": {
                    "type": "string"
                },
                "resources": {
                    "items": {
                        "$ref": "ProducerCoffeeBean"
                    },
                    "type": "array"
                },
                "unreachable": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListCoffeeMakersResponse": {
            "id": "ListCoffeeMakersResponse",
            "properties": {
                "nextPageToken": {
                    "type": "string"
                },
                "resources": {
                    "items": {
                        "$ref": "ProducerCoffeeMaker"
                    },
                    "type": "array"
                },
                "unreachable": {
                    "description": "Locations that could not be reached.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListLocationsResponse": {
            "description": "The response message for Locations.ListLocations.",
            "id": "ListLocationsResponse",
            "properties": {
                "locations": {
                    "description": "A list of locations that matches the specified filter in the request.",
                    "items": {
                        "$ref": "Location"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "The standard List next-page token.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListOperationsResponse": {
            "description": "The response message for Operations.ListOperations.",
            "id": "ListOperationsResponse",
            "properties": {
                "nextPageToken": {
                    "description": "The standard List next-page token.",
                    "type": "string"
                },
                "operations": {
                    "description": "A list of operations that matches the specified filter in the request.",
                    "items": {
                        "$ref": "Operation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Location": {
            "description": "A resource that represents Google Cloud Platform location.",
            "id": "Location",
            "properties": {
                "displayName": {
                    "description": "The friendly name for this location, typically a nearby city name.\nFor example, \"Tokyo\".",
                    "type": "string"
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Cross-service attributes for the location. For example\n\n    {\"cloud.googleapis.com/region\": \"us-east1\"}",
                    "type": "object"
                },
                "locationId": {
                    "description": "The canonical id for this location. For example: `\"us-east1\"`.",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {
                        "description": "Properties of the object. Contains field @type with type URL.",
                        "type": "any"
                    },
                    "description": "Service-specific metadata. For example the available capacity at the given\nlocation.",
                    "type": "object"
                },
                "name": {
                    "description": "Resource name for the location, which may vary between implementations.\nFor example: `\"projects/example-project/locations/us-east1\"`",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Operation": {
            "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
            "id": "Operation",
            "properties": {
                "done": {
                    "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
                    "type": "boolean"
                },
                "error": {
                    "$ref": "Status",
                    "description": "The error result of the operation in case of failure or cancellation."
                },
                "metadata": {
                    "additionalProperties": {
                        "description": "Properties of the object. Contains field @type with type URL.",
                        "type": "any"
                    },
                    "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
                    "type": "object"
                },
                "name": {
                    "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.",
                    "type": "string"
                },
                "response": {
                    "additionalProperties": {
                        "description": "Properties of the object. Contains field @type with type URL.",
                        "type": "any"
                    },
                    "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "OperationMetadata": {
            "description": "Represents the producer v1 metadata of the long-running operation.",
            "id": "OperationMetadata",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "cancelRequested": {
                    "type": "boolean"
                },
                "createTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "endTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "statusDetail": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "verb": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProducerCoffeeBean": {
            "description": "Represents a producer coffee bean resource that is nested under a producer\ncoffee maker resource.",
            "id": "ProducerCoffeeBean",
            "properties": {
                "coffeeVariety": {
                    "type": "string"
                },
                "createTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "isAvailable": {
                    "type": "boolean"
                },
                "isDecaf": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "originLocation": {
                    "type": "string"
                },
                "updateTime": {
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProducerCoffeeMaker": {
            "description": "Represents a producer view of the coffee maker resource.\nNext ID: 113",
            "id": "ProducerCoffeeMaker",
            "properties": {
                "coffeeCapacity": {
                    "format": "int32",
                    "type": "integer"
                },
                "coffeeReturned": {
                    "format": "int32",
                    "type": "integer"
                },
                "coffeeSupply": {
                    "format": "int32",
                    "type": "integer"
                },
                "coffeeVariety": {
                    "type": "string"
                },
                "consumerProjectState": {
                    "enum": [
                        "UNKNOWN_STATE",
                        "ON",
                        "OFF",
                        "DELETED"
                    ],
                    "enumDescriptions": [
                        "A project should never be in an unknown state. Receipt of a project with\nthis state is an error.",
                        "CCFE considers the project to be serving or transitioning into serving.",
                        "CCFE considers the project to be in an OFF state. This could occur due\nvarious factors. The state could be triggered by Google-internal audits\n(ex. abuse suspension, billing closed) or cleanups trigged by compliance\nsystems (ex. data governance hide). User-initiated events such as service\nmanagement deactivation trigger a project to an OFF state.\n\nCLHs might choose to do nothing in this case or to turn off costly\nresources. CLHs need to consider the customer experience if an\nON/OFF/ON sequence of state transitions occurs vs. the cost of deleting\nresources, keeping metadata about resources, or even keeping resources\nlive for a period of time.\n\nCCFE will not send any new customer requests to the CLH when the project\nis in an OFF state. However, CCFE will allow all previous customer\nrequests relayed to CLH to complete.",
                        "This state indicates that the project has been (or is being) completely\nremoved. This is often due to a data governance purge request and\ntherefore resources should be deleted when this state is reached."
                    ],
                    "type": "string"
                },
                "createTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "electricityUsage": {
                    "format": "int32",
                    "type": "integer"
                },
                "isDecaf": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "paperCupCapacity": {
                    "format": "int32",
                    "type": "integer"
                },
                "paperCupReturned": {
                    "format": "int32",
                    "type": "integer"
                },
                "paperCupSupply": {
                    "format": "int32",
                    "type": "integer"
                },
                "rebootCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "repairCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "updateTime": {
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProjectState": {
            "description": "ProjectState contains the externally-visible project state that is used to\ncommunicate the state and reasoning for that state to the CLH. This data is\nnot persisted by CCFE, but is instead derived from CCFE's internal\nrepresentation of the project state.",
            "id": "ProjectState",
            "properties": {
                "currentReasons": {
                    "$ref": "Reasons"
                },
                "previousReasons": {
                    "$ref": "Reasons",
                    "description": "The previous and current reasons for a project state will be sent for a\nproject event. CLHs that need to know the signal that caused the project\nevent to trigger (edges) as opposed to just knowing the state can act upon\ndifferences in the previous and current reasons.\n\nReasons will be provided for every system: service management, data\ngovernanace, abuse, and billing.\n\nIf this is a CCFE-triggered event used for reconcilation then the current\nreasons will be set to their *_CONTROL_PLANE_SYNC state. The previous\nreasons will contain the last known set of non-unknown\nnon-control_plane_sync reasons for the state."
                },
                "state": {
                    "description": "The current state of the project. This state is the culmination of all of\nthe opinions from external systems that CCFE knows about of the project.",
                    "enum": [
                        "UNKNOWN_STATE",
                        "ON",
                        "OFF",
                        "DELETED"
                    ],
                    "enumDescriptions": [
                        "A project should never be in an unknown state. Receipt of a project with\nthis state is an error.",
                        "CCFE considers the project to be serving or transitioning into serving.",
                        "CCFE considers the project to be in an OFF state. This could occur due\nvarious factors. The state could be triggered by Google-internal audits\n(ex. abuse suspension, billing closed) or cleanups trigged by compliance\nsystems (ex. data governance hide). User-initiated events such as service\nmanagement deactivation trigger a project to an OFF state.\n\nCLHs might choose to do nothing in this case or to turn off costly\nresources. CLHs need to consider the customer experience if an\nON/OFF/ON sequence of state transitions occurs vs. the cost of deleting\nresources, keeping metadata about resources, or even keeping resources\nlive for a period of time.\n\nCCFE will not send any new customer requests to the CLH when the project\nis in an OFF state. However, CCFE will allow all previous customer\nrequests relayed to CLH to complete.",
                        "This state indicates that the project has been (or is being) completely\nremoved. This is often due to a data governance purge request and\ntherefore resources should be deleted when this state is reached."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Reasons": {
            "description": "Projects transition between and within states based on reasons sent from\nvarious systems. CCFE will provide the CLH with reasons for the current\nstate per system.\n\nThe current systems that CCFE supports are:\n\n - Service Management (Inception)\n - Data Governance (Wipeout)\n - Abuse (Ares)\n - Billing (Internal Cloud Billing API)",
            "id": "Reasons",
            "properties": {
                "abuse": {
                    "enum": [
                        "ABUSE_UNKNOWN_REASON",
                        "ABUSE_CONTROL_PLANE_SYNC",
                        "SUSPEND",
                        "REINSTATE"
                    ],
                    "enumDescriptions": [
                        "An unknown reason indicates that the abuse system has not sent a signal\nfor this project.",
                        "Due to various reasons CCFE might proactively restate a project state\nto a CLH to ensure that the CLH and CCFE are both aware of the project\nstate. This reason can be tied to any of the states.",
                        "If a project is deemed abusive we receive a suspend signal. Suspend is\na reason to put the project into an INTERNAL_OFF state.",
                        "Projects that were once considered abusive can later be deemed\nnon-abusive.  When this happens we must reinstate the project.\nReinstate is a reason to put the project into an ON state."
                    ],
                    "type": "string"
                },
                "billing": {
                    "enum": [
                        "BILLING_UNKNOWN_REASON",
                        "BILLING_CONTROL_PLANE_SYNC",
                        "PROBATION",
                        "CLOSE",
                        "OPEN"
                    ],
                    "enumDescriptions": [
                        "An unknown reason indicates that the billing system has not sent a\nsignal for this project.",
                        "Due to various reasons CCFE might proactively restate a project state\nto a CLH to ensure that the CLH and CCFE are both aware of the project\nstate. This reason can be tied to any of the states.",
                        "Minor infractions cause a probation signal to be sent. Probation is a\nreason to put the project into a ON state even though it is a negative\nsignal. CCFE will block mutations for this project while it is on\nbilling probation, but the CLH is expected to serve non-mutation\nrequests.",
                        "When a billing account is closed, it is a stronger signal about\nnon-payment. Close is a reason to put the project into an INTERNAL_OFF\nstate.",
                        "Consumers can re-open billing accounts and update accounts to pull them\nout of probation. When this happens, we get a signal that the account\nis open. Open is a reason to put the project into an ON state."
                    ],
                    "type": "string"
                },
                "dataGovernance": {
                    "enum": [
                        "DATA_GOVERNANCE_UNKNOWN_REASON",
                        "DATA_GOVERNANCE_CONTROL_PLANE_SYNC",
                        "HIDE",
                        "UNHIDE",
                        "PURGE"
                    ],
                    "enumDescriptions": [
                        "An unknown reason indicates that data governance has not sent a signal\nfor this project.",
                        "Due to various reasons CCFE might proactively restate a project state\nto a CLH to ensure that the CLH and CCFE are both aware of the project\nstate. This reason can be tied to any of the states.",
                        "When a project is deleted we retain some data for a period of time to\nallow the consumer to change their mind. Data governance sends a signal\nto hide the data when this occurs. Hide is a reason to put the project\nin an INTERNAL_OFF state.",
                        "The decision to un-delete a project can be made. When this happens data\ngovernance tells us to unhide any hidden data. Unhide is a reason to\nput the project in an ON state.",
                        "After a period of time data must be completely removed from our\nsystems. When data governance sends a purge signal we need to remove\ndata. Purge is a reason to put the project in a DELETED state. Purge\nis the only event that triggers a delete mutation. All other events\nhave update semantics."
                    ],
                    "type": "string"
                },
                "serviceManagement": {
                    "enum": [
                        "SERVICE_MANAGEMENT_UNKNOWN_REASON",
                        "SERVICE_MANAGEMENT_CONTROL_PLANE_SYNC",
                        "ACTIVATION",
                        "PREPARE_DEACTIVATION",
                        "ABORT_DEACTIVATION",
                        "COMMIT_DEACTIVATION"
                    ],
                    "enumDescriptions": [
                        "An unknown reason indicates that we have not received a signal from\nservice management about this project. Since projects are created by\nrequest of service management, this reason should never be set.",
                        "Due to various reasons CCFE might proactively restate a project state\nto a CLH to ensure that the CLH and CCFE are both aware of the project\nstate. This reason can be tied to any of the states.",
                        "When a customer activates an API CCFE notifies the CLH and sets the\nproject to the ON state.",
                        "When a customer deactivates and API service management starts a\ntwo-step process to perform the deactivation. The first step is to\nprepare. Prepare is a reason to put the project in a EXTERNAL_OFF\nstate.",
                        "If the deactivation is cancelled, service managed needs to abort the\ndeactivation. Abort is a reason to put the project in an ON state.",
                        "If the deactivation is followed through with, service management needs\nto finish deactivation. Commit is a reason to put the project in an OFF\nstate."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RebootRequest": {
            "id": "RebootRequest",
            "properties": {},
            "type": "object"
        },
        "RepairRequest": {
            "id": "RepairRequest",
            "properties": {},
            "type": "object"
        },
        "Status": {
            "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error\nmessage, and error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
            "id": "Status",
            "properties": {
                "code": {
                    "description": "The status code, which should be an enum value of google.rpc.Code.",
                    "format": "int32",
                    "type": "integer"
                },
                "details": {
                    "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
                    "items": {
                        "additionalProperties": {
                            "description": "Properties of the object. Contains field @type with type URL.",
                            "type": "any"
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "message": {
                    "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "CCFE Coffeehouse Producer Demo API (autopush)",
    "version": "v1",
    "version_module": true
}