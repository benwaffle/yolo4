{
    "basePath": "",
    "baseUrl": "https://daily6-meetings.sandbox.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Meetings",
    "description": "Business logic for the Meetings app.",
    "discoveryVersion": "v1",
    "documentationLink": "https://sites.google.com/corp/google.com/getthor/home",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "daily6_meetings_sandbox:v1",
    "kind": "discovery#restDescription",
    "name": "daily6_meetings_sandbox",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "rooms": {
            "methods": {
                "list": {
                    "description": "Lists meeting rooms matching the search criteria. Only rooms the user has\naccess to are included in the response.",
                    "flatPath": "v1/rooms",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.rooms.list",
                    "parameterOrder": [],
                    "parameters": {
                        "meetingSpaceId": {
                            "description": "Optional. The meeting space that the user wants to\njoin the meeting room found by this query. It is the resource name of the\nmeeting space in the MeetingSpaceService. If provided, the server may\nuse it to find the most appropriate meeting room.",
                            "location": "query",
                            "type": "string"
                        },
                        "pageToken": {
                            "description": "Optional. The token for the next page in the result. If page_token is set,\nthe request must have otherwise identical content to have exactly same\ncontents in meeting_space_id and query as they were in the previous\nrequest.",
                            "location": "query",
                            "type": "string"
                        },
                        "query": {
                            "description": "Required. The query entered by the user. It is used to do a case\ninsensitive substring match on the names of meeting rooms.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/rooms",
                    "response": {
                        "$ref": "ListMeetingRoomsResponse"
                    }
                },
                "resolve": {
                    "description": "Finds a meeting room given the device ID of the CfM device\nin the room.\n\nIn the returned MeetingRoom resource, only the meeting_room_id and\ndisplay_name fields are guaranteed to be set.\n\nWhen no meeting room could be found, the response will be NOT_FOUND.\nThis can happen if either the device ID could not be found, or the result\nis not accessible to the user making the request.",
                    "flatPath": "v1/rooms:resolve",
                    "httpMethod": "POST",
                    "id": "daily6_meetings_sandbox.rooms.resolve",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/rooms:resolve",
                    "request": {
                        "$ref": "ResolveMeetingRoomRequest"
                    },
                    "response": {
                        "$ref": "MeetingRoom"
                    }
                }
            }
        },
        "spaces": {
            "methods": {
                "create": {
                    "description": "Creates a new meeting space. This RPC returns a meeting token in HTTP\nresponse. The meeting token should be used in RPCs that mention they\nneed it.",
                    "flatPath": "v1/spaces",
                    "httpMethod": "POST",
                    "id": "daily6_meetings_sandbox.spaces.create",
                    "parameterOrder": [],
                    "parameters": {
                        "creatorRegionCode": {
                            "description": "The CLDR/ISO 3166 region code for the country that the meeting creator is\nin. To be parsed by the i18n RegionCode utility. Example: \"SE\" for Sweden.\nUsed for allocating a phone number for the given country.",
                            "location": "query",
                            "type": "string"
                        },
                        "deviceHint.dasherDeviceId": {
                            "description": "HotRod device id",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/spaces",
                    "request": {
                        "$ref": "MeetingSpace"
                    },
                    "response": {
                        "$ref": "MeetingSpace"
                    }
                },
                "delete": {
                    "description": "Deletes an existing meeting space, given a meeting token that identifies\nthe meeting.\n\nMeeting token MUST be provided in HTTP request header.",
                    "flatPath": "v1/spaces/{spacesId}",
                    "httpMethod": "DELETE",
                    "id": "daily6_meetings_sandbox.spaces.delete",
                    "parameterOrder": [
                        "meetingSpaceId"
                    ],
                    "parameters": {
                        "meetingSpaceId": {
                            "description": "ID of the meeting space. The caller MUST also provide in a HTTP header\na meeting token that has been obtained by meeting.Resolve or\nmeeting.Create call.",
                            "location": "path",
                            "pattern": "^spaces/[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+meetingSpaceId}",
                    "response": {
                        "$ref": "Empty"
                    }
                },
                "echo": {
                    "description": "Responds to ping-like health check request from client to test the\nconnectivity between client and backend server.",
                    "flatPath": "v1/spaces:echo",
                    "httpMethod": "POST",
                    "id": "daily6_meetings_sandbox.spaces.echo",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/spaces:echo",
                    "request": {
                        "$ref": "EchoRequest"
                    },
                    "response": {
                        "$ref": "EchoResponse"
                    }
                },
                "get": {
                    "description": "Retrieves a meeting given a meeting id.\n\nMeeting token MUST be provided in HTTP request header.",
                    "flatPath": "v1/spaces/{spacesId}",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.spaces.get",
                    "parameterOrder": [
                        "meetingSpaceId"
                    ],
                    "parameters": {
                        "meetingSpaceId": {
                            "description": "ID of the meeting space. The caller MUST also provide in a HTTP header\na meeting token that has been obtained by meeting.Resolve or\nmeeting.Create call.",
                            "location": "path",
                            "pattern": "^spaces/[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+meetingSpaceId}",
                    "response": {
                        "$ref": "MeetingSpace"
                    }
                },
                "getGateway_access": {
                    "description": "Returns a gateway access code for a meeting space that has 3rd party\ninterop enabled.",
                    "flatPath": "v1/spaces/{spacesId}/gateway_access",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.spaces.getGateway_access",
                    "parameterOrder": [
                        "meetingSpaceId"
                    ],
                    "parameters": {
                        "meetingSpaceId": {
                            "description": "ID of the meeting space.",
                            "location": "path",
                            "pattern": "^spaces/[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+meetingSpaceId}/gateway_access",
                    "response": {
                        "$ref": "GetGatewayAccessResponse"
                    }
                },
                "getRegionalConfig": {
                    "description": "Returns regional configuration for all regions. This includes\ninternational PSTN numbers for access with universal pins, as well\nas information about regional defaults. Clients should request this\nat most once per day or so, using If-None-Match headers, and then cache\nfor at most three months.",
                    "flatPath": "v1/spaces:getRegionalConfig",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.spaces.getRegionalConfig",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/spaces:getRegionalConfig",
                    "response": {
                        "$ref": "GetRegionalConfigResponse"
                    }
                },
                "list": {
                    "description": "Lists all meetings that the calling user has access to.",
                    "flatPath": "v1/spaces",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.spaces.list",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/spaces",
                    "response": {
                        "$ref": "ListMeetingSpacesResponse"
                    }
                },
                "listPstnOutRegionCodes": {
                    "description": "Lists the CLDR/ISO 3166 region codes to which the client is allowed to make\nPSTN-out calls.\n\nEach region (typically country) has a different set of rules and\nregulations governing dial-in/out and other telephony functionality.\nIf dial-out is not allowed in the client's region, an empty list will be\nreturned.",
                    "flatPath": "v1/spaces:pstnOutRegionCodes",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.spaces.listPstnOutRegionCodes",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/spaces:pstnOutRegionCodes",
                    "response": {
                        "$ref": "ListPstnOutRegionCodesResponse"
                    }
                },
                "listUniversalPhoneNumbers": {
                    "description": "Lists international phone numbers for universal access. Used by\nclients to request international PSTN numbers for access with\nuniversal pins. Clients should request this at most once per day\nor so.\n\nThis is deprecated; clients should move to GetRegionalConfig instead,\nonce that is fully implemented.",
                    "flatPath": "v1/spaces:universalPhoneNumbers",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.spaces.listUniversalPhoneNumbers",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/spaces:universalPhoneNumbers",
                    "response": {
                        "$ref": "ListUniversalPstnNumbersResponse"
                    }
                },
                "resolve": {
                    "description": "Finds a meeting space given a meeting space code. This RPC returns\na meeting token in HTTP response. The meeting token should be used\nin RPCs that mention they need it.",
                    "flatPath": "v1/spaces:resolve",
                    "httpMethod": "POST",
                    "id": "daily6_meetings_sandbox.spaces.resolve",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/spaces:resolve",
                    "request": {
                        "$ref": "ResolveMeetingSpaceRequest"
                    },
                    "response": {
                        "$ref": "MeetingSpace"
                    }
                },
                "resolveforhangoutschat": {
                    "description": "Finds a meeting space given a Hangouts Chat group id. Only members of the\nHangouts Chat group can use this rpc to resolve to the corresponding\nmeeting space. Invocation by non members will result in a response\nindicating there is no such space.\n\nThis RPC returns a meeting token in HTTP response. The meeting token should\nbe used in RPCs that mention they need it.",
                    "flatPath": "v1/spaces:resolveforhangoutschat",
                    "httpMethod": "POST",
                    "id": "daily6_meetings_sandbox.spaces.resolveforhangoutschat",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/spaces:resolveforhangoutschat",
                    "request": {
                        "$ref": "ResolveForHangoutsChatRequest"
                    },
                    "response": {
                        "$ref": "MeetingSpace"
                    }
                },
                "sync": {
                    "description": "Gets a meeting space and certain versioned subcollections.\nThis call will fail unless the caller has created a device and that device\nbelongs to the current conference.\nBy default, the server will respond with all resources supported by this\nrequest. A client that wishes to only receive a subset of resources\nshould use the $field system parmeter to limit the response by a field\nmask.\nIt is recommended that clients supply a $fields parameter to avoid\nreceiving unneceessary data if new subcollections are added to the\nresponse in the future.\nA meeting token MUST be provided in the HTTP request headers.",
                    "flatPath": "v1/spaces/{spacesId}:sync",
                    "httpMethod": "POST",
                    "id": "daily6_meetings_sandbox.spaces.sync",
                    "parameterOrder": [
                        "meetingSpaceId"
                    ],
                    "parameters": {
                        "meetingSpaceId": {
                            "description": "Unique identifier for the meeting space.",
                            "location": "path",
                            "pattern": "^spaces/[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+meetingSpaceId}:sync",
                    "request": {
                        "$ref": "SyncMeetingSpaceCollectionsRequest"
                    },
                    "response": {
                        "$ref": "SyncMeetingSpaceCollectionsResponse"
                    }
                },
                "update": {
                    "description": "Updates meeting space attributes, given a meeting token that identifies\nthe meeting space.\n\nMeeting token MUST be provided in HTTP request header.",
                    "flatPath": "v1/spaces/{spacesId}",
                    "httpMethod": "PUT",
                    "id": "daily6_meetings_sandbox.spaces.update",
                    "parameterOrder": [
                        "meetingSpaceId"
                    ],
                    "parameters": {
                        "meetingSpaceId": {
                            "description": "A unique server-generated ID for the meeting space. This is the\nREST name of the meeting space resource and has the form\n`spaces/<id>`, where <id> is a sequence of characters in the\n[base64url set](https://tools.ietf.org/html/rfc4648#section-5),\nwithout any `=` characters.",
                            "location": "path",
                            "pattern": "^spaces/[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+meetingSpaceId}",
                    "request": {
                        "$ref": "MeetingSpace"
                    },
                    "response": {
                        "$ref": "MeetingSpace"
                    }
                },
                "updateBroadcast": {
                    "description": "Updates properties of a broadcast. Returns a 404 if broadcasting is not\navailable based on the meeting space owner's SKU.",
                    "flatPath": "v1/spaces/{spacesId}/broadcast",
                    "httpMethod": "PATCH",
                    "id": "daily6_meetings_sandbox.spaces.updateBroadcast",
                    "parameterOrder": [
                        "name"
                    ],
                    "parameters": {
                        "name": {
                            "description": "Resource name of the broadcast. It must have the format of\n\"spaces/*/broadcast\".",
                            "location": "path",
                            "pattern": "^spaces/[^/]+/broadcast$",
                            "required": true,
                            "type": "string"
                        },
                        "updateMask": {
                            "description": "Field mask to support partial updates.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/{+name}",
                    "request": {
                        "$ref": "MeetingBroadcast"
                    },
                    "response": {
                        "$ref": "MeetingBroadcast"
                    }
                }
            },
            "resources": {
                "devices": {
                    "methods": {
                        "close": {
                            "description": "Called by browsers when tab is being closed. This does not follow\nthe normal REST rules and does not have authentication credentials\nbecause of browser restrictions.",
                            "flatPath": "v1/spaces/{spacesId}/devices:close",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.devices.close",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting space of the form \"meetings/*\".",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/devices:close",
                            "request": {
                                "$ref": "CloseMeetingDeviceRequest"
                            },
                            "response": {
                                "$ref": "Empty"
                            }
                        },
                        "closedevice": {
                            "description": "Called by browsers when tab is being closed. This does not follow\nthe normal REST rules and does not have authentication credentials\nbecause of browser restrictions.",
                            "flatPath": "v1/spaces/{spacesId}/devices:closedevice",
                            "httpMethod": "GET",
                            "id": "daily6_meetings_sandbox.spaces.devices.closedevice",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting space of the form \"meetings/*\".",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "meetingToken": {
                                    "description": "Device token. This should contain the value of the header\nnormally sent by devices in X-Goog-Meeting-Token, in same format\nas the value of that header, i.e. \"<token timestamp>;<token value>\".\nSee g3doc/communication/meetings/g3doc/api#meeting-token for more\ninformation about the token.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/devices:closedevice",
                            "response": {
                                "$ref": "Empty"
                            }
                        },
                        "create": {
                            "description": "Creates a new meeting device object in the current conference. If there was\nno current conference, this will start a new one.\n\nThe common case is when a client creates a device to represent itself, and\nthe information provided in the request describes the client. The only\nfield that always need to be set in these requests is `join_state` to\nindicate the desired initial join state. For anonymous clients, the\n`display_name` should also be set.\n\nA secondary case is when a client that already is associated with a device\ncreates another device, with the purpose of inviting another client. This\nis used for dialing out to phone numbers, in which case the `join_state`\nfield should be set to `RINGING`, and the `pstn_out` field should contain\nrelevant information. A meeting token MUST be provided in HTTP request\nheader.\n\nA RESOURCE_EXHAUSTED error response (HTTP status code 429) means\nthat the call was full and no more devices can join. It may still\nbe possible to create device in the HIDDEN state. A client may\ntry at again at a later time if some other device left the call,\nbut clients should not retry automatically.",
                            "flatPath": "v1/spaces/{spacesId}/devices",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.devices.create",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "trusted": {
                                    "description": "Meant to be used by interop gateways to signal that they want to be\nregarded as host endpoints. This is needed since interop devices are\ncreated anonymously rather than with user credentials, but also because not\nall devices a certain gateway creates want to be trusted.",
                                    "location": "query",
                                    "type": "boolean"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/devices",
                            "request": {
                                "$ref": "MeetingDevice"
                            },
                            "response": {
                                "$ref": "MeetingDevice"
                            }
                        },
                        "createPairingPhoneAccess": {
                            "description": "Creates a PIN that can be used to pair a phone with a video device.",
                            "flatPath": "v1/spaces/{spacesId}/devices/{devicesId}:createPairingPhoneAccess",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.devices.createPairingPhoneAccess",
                            "parameterOrder": [
                                "deviceId"
                            ],
                            "parameters": {
                                "deviceId": {
                                    "description": "The ID of the meeting device the phone should be paired with.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+/devices/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+deviceId}:createPairingPhoneAccess",
                            "request": {
                                "$ref": "CreatePairingPhoneAccessRequest"
                            },
                            "response": {
                                "$ref": "CreatePairingPhoneAccessResponse"
                            }
                        },
                        "createandpush": {
                            "description": "Called by clients that want to push a meeting space to another\nclient (Thor client pushing to GVC or CfM).  The meeting token\ncontained in the push to another client will pre-approve the\npermission to join the meeting if the caller already has that\npermission.",
                            "flatPath": "v1/spaces/{spacesId}/devices:createandpush",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.devices.createandpush",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/devices:createandpush",
                            "request": {
                                "$ref": "CreateAndPushMeetingDeviceRequest"
                            },
                            "response": {
                                "$ref": "CreateAndPushMeetingDeviceResponse"
                            }
                        },
                        "createtokenforsecondary": {
                            "description": "Called by joined devices to create MeetingToken that a Meet client can\nuse to join as a secondary device in the conference. Typically, it would\nbe the same client.",
                            "flatPath": "v1/spaces/{spacesId}/devices:createtokenforsecondary",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.devices.createtokenforsecondary",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/devices:createtokenforsecondary",
                            "request": {
                                "$ref": "CreateTokenForSecondaryRequest"
                            },
                            "response": {
                                "$ref": "CreateTokenForSecondaryResponse"
                            }
                        },
                        "get": {
                            "description": "Retrieves information about a device.\n\nA meeting token MUST be provided in HTTP request header.",
                            "flatPath": "v1/spaces/{spacesId}/devices/{devicesId}",
                            "httpMethod": "GET",
                            "id": "daily6_meetings_sandbox.spaces.devices.get",
                            "parameterOrder": [
                                "deviceId"
                            ],
                            "parameters": {
                                "deviceId": {
                                    "description": "Unique identifier for the device of the form \"meetings/*/devices/*\".",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+/devices/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+deviceId}",
                            "response": {
                                "$ref": "MeetingDevice"
                            }
                        },
                        "joinAsSecondary": {
                            "description": "Creates a meeting device that has `primary_device_id' set to point to the\nmeeting device owned by the current client session. The new device is known\nas a secondary device.\n\nThe RPC returns a modified meeting token that can be used to update both\nprimary and secondary devices.\n\nThis requires\n1. The primary device to be in the JOINED state,\n2. The primary device does not already have a secondary device.\n\nThe new secondary device will be in the JOINED state.\nDesign doc: go/thor-ddssdd-backend",
                            "flatPath": "v1/spaces/{spacesId}/devices:joinAsSecondary",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.devices.joinAsSecondary",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "The resource name for the meeting space.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/devices:joinAsSecondary",
                            "request": {
                                "$ref": "JoinAsSecondaryRequest"
                            },
                            "response": {
                                "$ref": "JoinAsSecondaryResponse"
                            }
                        },
                        "list": {
                            "description": "Lists all visible devices.\n\nA meeting token MUST be provided in HTTP request header.",
                            "flatPath": "v1/spaces/{spacesId}/devices",
                            "httpMethod": "GET",
                            "id": "daily6_meetings_sandbox.spaces.devices.list",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/devices",
                            "response": {
                                "$ref": "ListMeetingDevicesResponse"
                            }
                        },
                        "senddtmf": {
                            "description": "Called by clients that want to send a DTMF code to another device\nA meeting token MUST be provided in HTTP request header",
                            "flatPath": "v1/spaces/{spacesId}/devices/{devicesId}:senddtmf",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.devices.senddtmf",
                            "parameterOrder": [
                                "deviceId"
                            ],
                            "parameters": {
                                "deviceId": {
                                    "description": "Unique identifier for the recipient device.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+/devices/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+deviceId}:senddtmf",
                            "request": {
                                "$ref": "SendDtmfRequest"
                            },
                            "response": {
                                "$ref": "SendDtmfResponse"
                            }
                        },
                        "update": {
                            "description": "Updates a device.\n\nA meeting token MUST be provided in HTTP request header.\n\nA RESOURCE_EXHAUSTED error response (HTTP status code 429) when\ntrying to change the join state to JOINED means that the call was\nfull and no more devices can join. A client may try at again at a\nlater time if some other device left the call, but clients should\nnot retry automatically.\n\nThe request may fail with an UNAVAILABLE error response (HTTP\nstatus code 503) if a conflicting change was detected while the\nupdate was in progress. In this case, the client needs to retry\nthe request.",
                            "flatPath": "v1/spaces/{spacesId}/devices/{devicesId}",
                            "httpMethod": "PUT",
                            "id": "daily6_meetings_sandbox.spaces.devices.update",
                            "parameterOrder": [
                                "meetingDeviceId"
                            ],
                            "parameters": {
                                "meetingDeviceId": {
                                    "description": "A unique server-generated ID for the meeting device. This is the\nREST name of the meeting device resource and has the form\n`spaces/<id>/devices/<id>`, where <id> is a sequence of\ncharacters in the\n[base64url set](https://tools.ietf.org/html/rfc4648#section-5),\nwithout any `=` characters.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+/devices/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingDeviceId}",
                            "request": {
                                "$ref": "MeetingDevice"
                            },
                            "response": {
                                "$ref": "MeetingDevice"
                            }
                        }
                    }
                },
                "messages": {
                    "methods": {
                        "create": {
                            "description": "Adds new messages to a meeting space. The device adding the messages\nhave to be in the meeting space.\n\nMeeting token MUST be provided in HTTP request header.",
                            "flatPath": "v1/spaces/{spacesId}/messages",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.messages.create",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Id of the meeting space message is added to.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/messages",
                            "request": {
                                "$ref": "MeetingMessage"
                            },
                            "response": {
                                "$ref": "MeetingMessage"
                            }
                        },
                        "list": {
                            "description": "Lists messages sent to a meeting space.\n\nMeeting token MUST be provided in HTTP request header.",
                            "flatPath": "v1/spaces/{spacesId}/messages",
                            "httpMethod": "GET",
                            "id": "daily6_meetings_sandbox.spaces.messages.list",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting space.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/messages",
                            "response": {
                                "$ref": "ListMeetingMessagesResponse"
                            }
                        }
                    }
                },
                "pairingPstnOutRegionCodes": {
                    "methods": {
                        "list": {
                            "description": "Lists the CLDR/ISO 3166 region codes to which the client is allowed to\ndial-out to for pairing with a phone.\n\nEach region (typically country) has a different set of rules and\nregulations governing dial-in/out and other telephony functionality.\nIf dial-out is not allowed in the client's region, an empty list will be\nreturned.\n\nThe main difference from  ListPstnOutRegionCodesRequest is that this\nrequest can only be sent by a device in an ongoing conference, and the list\nof regions is determined by the meeting space owner's identity, not the\nrequester's identity.\n\nUnlike ListPstnOutRegionCodes, this RPC will typically return a non-empty\nlist to out-of-domain participants (because out-of-domain participants are\nalso allowed to pair with phones via PSTN-out).\n\nFor more information, see http://go/cm++mas#bookmark=id.kcz7a8bqdl1b",
                            "flatPath": "v1/spaces/{spacesId}/pairingPstnOutRegionCodes",
                            "httpMethod": "GET",
                            "id": "daily6_meetings_sandbox.spaces.pairingPstnOutRegionCodes.list",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "ID of the meeting space.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/pairingPstnOutRegionCodes",
                            "response": {
                                "$ref": "ListPairingPstnOutRegionCodesResponse"
                            }
                        }
                    }
                },
                "recordings": {
                    "methods": {
                        "create": {
                            "description": "Starts a recording session.\nReturns http code RC_CLIENT_CLOSED_REQUEST (499) which maps to\ncanonical error code CANCELLED if the recording is deleted before\nthe creation finishes.",
                            "flatPath": "v1/spaces/{spacesId}/recordings",
                            "httpMethod": "POST",
                            "id": "daily6_meetings_sandbox.spaces.recordings.create",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "requestedBroadcastAccessPolicy": {
                                    "description": "The access policy of the created broadcast. When application type is\nBROADCAST, this field must be set. If it is left unset, request will fail\nwith INVALID_ARGUMENT error. When the application type is not BROADCAST,\nthe value of this field will be ignored.",
                                    "enum": [
                                        "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
                                        "ORGANIZATION",
                                        "PUBLIC"
                                    ],
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/recordings",
                            "request": {
                                "$ref": "MeetingRecording"
                            },
                            "response": {
                                "$ref": "MeetingRecording"
                            }
                        },
                        "delete": {
                            "description": "Delete a recording entry from the meeting. If the recording hasn't been\nstopped, it will also stop the recording.",
                            "flatPath": "v1/spaces/{spacesId}/recordings/{recordingsId}",
                            "httpMethod": "DELETE",
                            "id": "daily6_meetings_sandbox.spaces.recordings.delete",
                            "parameterOrder": [
                                "recordingId"
                            ],
                            "parameters": {
                                "recordingId": {
                                    "description": "Unique identifier for the recording.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+/recordings/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+recordingId}",
                            "response": {
                                "$ref": "Empty"
                            }
                        },
                        "list": {
                            "description": "Lists recording sessions with a meeting.",
                            "flatPath": "v1/spaces/{spacesId}/recordings",
                            "httpMethod": "GET",
                            "id": "daily6_meetings_sandbox.spaces.recordings.list",
                            "parameterOrder": [
                                "meetingSpaceId"
                            ],
                            "parameters": {
                                "meetingSpaceId": {
                                    "description": "Unique identifier for the meeting.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+meetingSpaceId}/recordings",
                            "response": {
                                "$ref": "ListMeetingRecordingsResponse"
                            }
                        },
                        "update": {
                            "description": "Updates a recording session. Client should use this request to stop a\nrecording.",
                            "flatPath": "v1/spaces/{spacesId}/recordings/{recordingsId}",
                            "httpMethod": "PUT",
                            "id": "daily6_meetings_sandbox.spaces.recordings.update",
                            "parameterOrder": [
                                "recordingId"
                            ],
                            "parameters": {
                                "recordingId": {
                                    "description": "Unique id for recording session for \u201cmeetings/*/recordings/*\u201d.\nGenerated by server.",
                                    "location": "path",
                                    "pattern": "^spaces/[^/]+/recordings/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+recordingId}",
                            "request": {
                                "$ref": "MeetingRecording"
                            },
                            "response": {
                                "$ref": "MeetingRecording"
                            }
                        }
                    },
                    "resources": {
                        "acks": {
                            "methods": {
                                "list": {
                                    "description": "Lists recording acks for JOINED devices.\nOnly the recording producer can access to this API, other clients will get\n403 forbidden. Design doc go/recordingacks.",
                                    "flatPath": "v1/spaces/{spacesId}/recordings/{recordingsId}/acks",
                                    "httpMethod": "GET",
                                    "id": "daily6_meetings_sandbox.spaces.recordings.acks.list",
                                    "parameterOrder": [
                                        "recordingId"
                                    ],
                                    "parameters": {
                                        "recordingId": {
                                            "description": "Recording REST id, unique identifier of the recording.",
                                            "location": "path",
                                            "pattern": "^spaces/[^/]+/recordings/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/{+recordingId}/acks",
                                    "response": {
                                        "$ref": "ListMeetingRecordingAcksResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "users": {
            "methods": {
                "getMe": {
                    "description": "Get information about a user.",
                    "flatPath": "v1/users/me",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.users.getMe",
                    "parameterOrder": [
                        "name"
                    ],
                    "parameters": {
                        "name": {
                            "description": "The resource name for the user to get. The only recognized name is\n\"users/me\".",
                            "location": "path",
                            "pattern": "^users/me$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+name}",
                    "response": {
                        "$ref": "User"
                    }
                }
            },
            "resources": {
                "events": {
                    "methods": {
                        "list": {
                            "description": "Search scheduled events on a user's calendar.\nThe request can be made by a user or CfM device belonging to google.com.\nRequests from unsupported callers will fail with a PERMISSION DENIED error.",
                            "flatPath": "v1/users/{usersId}/events",
                            "httpMethod": "GET",
                            "id": "daily6_meetings_sandbox.users.events.list",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "maxResult": {
                                    "description": "Maximum results to return. Value must be in range [1,10], otherwise it will\nfail with INVALID_ARGUMENT error.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "The resource name for the user. It is either `users/me` to identify the\ncalling user, or `users/{email}` where {email} is the email address for\na user, or `users/{badge_value}` where {badge_value} is the encoded value\nof Google's badge.\nThe user identified by the email address must be a normal user, and not a\nsecondary calendar or service account or similar.",
                                    "location": "path",
                                    "pattern": "^users/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "scenario": {
                                    "description": "The scenario of this request.",
                                    "enum": [
                                        "SCENARIO_UNSPECIFIED",
                                        "JOIN_FLOW"
                                    ],
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}/events",
                            "response": {
                                "$ref": "ListScheduledEventsResponse"
                            }
                        }
                    }
                }
            }
        },
        "v1": {
            "methods": {
                "viewerevent": {
                    "description": "Report an event of a broadcast viewer.",
                    "flatPath": "v1/{v1Id}:viewerevent",
                    "httpMethod": "POST",
                    "id": "daily6_meetings_sandbox.viewerevent",
                    "parameterOrder": [
                        "viewerId"
                    ],
                    "parameters": {
                        "viewerId": {
                            "description": "Identifier of the broadcast viewer who reports this event. This should be a\nunique identifier for one playback generated by client.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+viewerId}:viewerevent",
                    "request": {
                        "$ref": "ReportViewerEventRequest"
                    },
                    "response": {
                        "$ref": "ReportViewerEventResponse"
                    }
                }
            }
        },
        "views": {
            "methods": {
                "get": {
                    "description": "Gets a meeting broadcast.",
                    "flatPath": "v1/views/{viewsId}",
                    "httpMethod": "GET",
                    "id": "daily6_meetings_sandbox.views.get",
                    "parameterOrder": [
                        "name"
                    ],
                    "parameters": {
                        "broadcastSessionToken": {
                            "description": "The token provided for the broadcast session the player just played. This\nfield is not set when playback hasn't started.",
                            "location": "query",
                            "type": "string"
                        },
                        "name": {
                            "description": "Resource name of the broadcast view requested.",
                            "location": "path",
                            "pattern": "^views/[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+name}",
                    "response": {
                        "$ref": "MeetingBroadcastView"
                    }
                }
            }
        }
    },
    "revision": "20190913",
    "rootUrl": "https://daily6-meetings.sandbox.googleapis.com/",
    "schemas": {
        "AudioDebugRecordingState": {
            "description": "Submessage for audio debug recording state.",
            "id": "AudioDebugRecordingState",
            "properties": {
                "durationSeconds": {
                    "description": "The duration of the audio debug recording. After this number of seconds\nhas elapsed, the recording will be done.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "BroadcastPlayerConfig": {
            "description": "Configuration parameters that a client needs to play back a specific\nbroadcast.",
            "id": "BroadcastPlayerConfig",
            "properties": {
                "adaptiveFmts": {
                    "description": "The adaptive_fmts for Youtube players to enable manifestless playback.\nMore details in go/manifestless-live.",
                    "type": "string"
                },
                "dashMpdUrl": {
                    "description": "The dash MPD (media presentation description) URL.",
                    "type": "string"
                },
                "hlsvp": {
                    "description": "The HLS Variable Playlist URL to support HLS playback.",
                    "type": "string"
                },
                "youtubeContentId": {
                    "description": "The unique identifier of the broadcast in YouTube backend.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BroadcastSettings": {
            "description": "Broadcast settings of a meeting space.",
            "id": "BroadcastSettings",
            "properties": {
                "accessPolicy": {
                    "description": "The policy that controls the broadcast's viewer access.",
                    "enum": [
                        "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
                        "ORGANIZATION",
                        "PUBLIC"
                    ],
                    "enumDescriptions": [
                        "Used only when broadcast is not enabled, or an unknown enum value is used.",
                        "Only authenticated Google accounts belonging to the same organization\nas the meeting organizer can access the broadcast.",
                        "Anyone with the broadcast view URL can access the broadcast."
                    ],
                    "type": "string"
                },
                "editors": {
                    "description": "Information about broadcast settings editors. The list will be empty if\nthe meeting broadcast does not have an editor, or if the caller is not\nauthorized to see the editors info, or if server failes to retrieving the\ncomplete list of editors.",
                    "items": {
                        "$ref": "Editor"
                    },
                    "type": "array"
                },
                "viewUrl": {
                    "description": "A URL that can be used to access the broadcast of the meeting. This field\nwill be empty if the broadcast is disabled. It will be populated by the\nbackend. Clients cannot modify the value.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CallInfo": {
            "description": "Contains information regarding an ongoing conference (aka call) for a\nmeeting space.",
            "id": "CallInfo",
            "properties": {
                "calendarEventId": {
                    "description": "If the meeting space is associated with an event in Google Calendar,\nthen this field is the event id of that event. For recurring events,\nit refers to the recurring instance associated with the current call, as\ndetermined by the server. Can not be set by the client.",
                    "type": "string"
                },
                "maxJoinedDevices": {
                    "description": "The maximum number of devices that may be in the joined state\nsimultaneously in this conference. This can be used by clients\nto guess whether it will be possible to join, but the only way\nto know is to try to join. It can also be used to inform users\nabout the limit that is in effect.\n\nThis limit is normally set when the conference is created and\nnot changed during the lifetime of the conference. But there\nare some cases where it may change, so clients should be aware\nthat the information may be stale.",
                    "format": "int32",
                    "type": "integer"
                },
                "mediaBackendInfo": {
                    "description": "Information about the media backend for the currently ongoing conference\nin the meeting space. The media backend information will only be filled\nin for clients that are supposed to present the information. The\ninformation should be displayed in a debug panel and is only intended for\ninternal debugging purposes. If the string is empty nothing should be\ndisplayed about the media backend.",
                    "type": "string"
                },
                "organizationName": {
                    "description": "The name or description of the organization or domain that the\norganizer belongs to. The expected use of this in clients is to\npresent messages like \"John Doe (outside of Google.com) is\ntrying to join this call\", where \"Google.com\" is the\norganization name. The field will be empty if the organization\nname could not be determined, possibly because of a backend\nerror. Output only.",
                    "type": "string"
                },
                "presenter": {
                    "$ref": "Presenter",
                    "description": "The current presenter in the call, or unset if there is no current\npresenter."
                },
                "recordingInfo": {
                    "$ref": "RecordingInfo",
                    "description": "Info about recording for this conference. This will always be\nset in server responses, with a valid recording status.\n\nThis is the superceded by streaming_sessions field, which contains the\nsame information about this recording as well as additional information\nabout other application type at the same time. This will be deprecated\nand removed at some point."
                },
                "streamingSessions": {
                    "description": "Info about streaming sessions (recording, broadcast, etc.) for\nthis conference. This should contain all active sessions.\nCurrently, it's guaranteed to have at most one recording and at most one\nbroadcast (at most two sessions in total). For each application type\n(recording or broadcast), latest inactive session is included if there's\nno active one.",
                    "items": {
                        "$ref": "StreamingSessionInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CloseMeetingDeviceRequest": {
            "description": "Used by devices to quickly leave a meeting. This is called by JS\nclients through browser beacon request API\n(https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon).\nBeacon requests have a limitation that they only support HTTP POST\nand clients can not add custom HTTP headers to the requests.  This\nRPC will transition the device to LEFT state. No further\ncommunication with the device is expected.",
            "id": "CloseMeetingDeviceRequest",
            "properties": {
                "meetingToken": {
                    "description": "Device token. This should contain the value of the header\nnormally sent by devices in X-Goog-Meeting-Token, in same format\nas the value of that header, i.e. \"<token timestamp>;<token value>\".\nSee g3doc/communication/meetings/g3doc/api#meeting-token for more\ninformation about the token.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Content": {
            "description": "Submessage for actual content payload to be delivered to other clients.",
            "id": "Content",
            "properties": {
                "audioDebugRecordingState": {
                    "$ref": "AudioDebugRecordingState",
                    "description": "The audio debug recording state content. This field must be set when the\nmessage's content_type is AUDIO_DEBUG_RECORDING_STATE."
                },
                "isTest": {
                    "description": "Indicates this is a test message, to not to be shown on UI.",
                    "type": "boolean"
                },
                "textMessage": {
                    "description": "The content of a plain text message. The text_message may be at\nmost 500 unicode code units long. Normal characters are 1\nunicode code unit, however certain emojis can be encoded as\nmultiple code units, and thus the maximum number of emojis is\nsmaller. This field must be set when content type is CHAT or\nCHAT_TEST.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreateAndPushMeetingDeviceRequest": {
            "description": "Used by a device to push the meeting onto another device in the\ncall. The HTTP header of the request should also contain meeting\ntoken.",
            "id": "CreateAndPushMeetingDeviceRequest",
            "properties": {
                "copresenceToken": {
                    "description": "Ephemeral token received from the CfM by the issuer of this request.\nIt is used to prove the device is in the same room, to skip showing\nthe flinging confirmation dialog in the room.",
                    "format": "byte",
                    "type": "string"
                },
                "meetingName": {
                    "description": "Name of the meeting to be displayed in receiving CfM UI where\nuser in the room confirms that the CfM can join the meeting.",
                    "type": "string"
                },
                "targetMeetingRoomId": {
                    "description": "The meeting room identifier for the target device. This should be taken\nfrom the meeting_room_id field in the MeetingRoom resource retrieved\nthrough the MeetingRoomService API.",
                    "type": "string"
                },
                "targetResourceName": {
                    "description": "Name of the resource associated with the CfM unit calendar or\nJamboard (jamboard email).",
                    "type": "string"
                },
                "targetUserId": {
                    "description": "obfuscated gaia id of the user. Used only for Jam boards for now.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreateAndPushMeetingDeviceResponse": {
            "description": "Response to CreateAndPushMeetingDeviceRequest.",
            "id": "CreateAndPushMeetingDeviceResponse",
            "properties": {
                "meetingDeviceId": {
                    "description": "The id of the target device if it joins the call as a result of\nthis push.  Receiving this response does not mean the device has\nactually been created in meetingDevices collection, that takes\nplace only after the target device calls meetingDevices.Create.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreatePairingPhoneAccessRequest": {
            "description": "Request to create a PIN for pairing a phone with a video device.",
            "id": "CreatePairingPhoneAccessRequest",
            "properties": {
                "languageCode": {
                    "description": "The BCP 47/LDML language code for the language the client wishes to have\nthe phone access associated with. This is just a suggestion for the backend\nwhich may choose to ignore it. To be parsed by the i18n LanguageCode\nutility. Examples: \"es-419\" for Latin American Spanish, \"fr-CA\" for\nCanadian French.",
                    "type": "string"
                },
                "regionCode": {
                    "description": "The CLDR/ISO 3166 region code for the country the client wishes to get a\nphone access in. This is just a suggestion for the backend which may choose\nto ignore it. To be parsed by the i18n RegionCode utility. Example: \"SE\"\nfor Sweden.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreatePairingPhoneAccessResponse": {
            "description": "The response to a `CreatePairingPhoneAccess` request.",
            "id": "CreatePairingPhoneAccessResponse",
            "properties": {
                "otherPhoneAccesses": {
                    "description": "Other pairing phone accesses that were created in earlier requests.",
                    "items": {
                        "$ref": "PhoneAccess"
                    },
                    "type": "array"
                },
                "phoneAccess": {
                    "$ref": "PhoneAccess",
                    "description": "The phone access created/retrieved in response to the request made."
                }
            },
            "type": "object"
        },
        "CreateTokenForSecondaryRequest": {
            "description": "A request to return a meeting token valid for creating a new device with the\nprimary device ID set to the device making this request. The new meeting\ntoken inherits the access rights of the meeting token used when sending\nthis request.\n\nWhen a client with a joined device and a valid meeting token wants to create\na secondary device, it issues this request and can then use the returned\nmeeting token as a valid token in the API calls to create and manage the\nsecondary meeting device. Care needs to be taken to always use the right\nmeeting token for the right meeting device.",
            "id": "CreateTokenForSecondaryRequest",
            "properties": {},
            "type": "object"
        },
        "CreateTokenForSecondaryResponse": {
            "description": "Response to CreateTokenForSecondaryRequest.",
            "id": "CreateTokenForSecondaryResponse",
            "properties": {
                "meetingToken": {
                    "description": "Meeting token that a meeting client can use to join the conference in the\nmeeting space specified as a secondary device.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DasherDeviceHint": {
            "description": "Used to hint the backend about what device is sending the RPC. Must always\nbe validated against DDS.",
            "id": "DasherDeviceHint",
            "properties": {
                "dasherDeviceId": {
                    "description": "HotRod device id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DevicesCollection": {
            "description": "A full device collection and its sync metadata.",
            "id": "DevicesCollection",
            "properties": {
                "devices": {
                    "description": "The full list of devices in the requesting device's view of the\ndevices collection.",
                    "items": {
                        "$ref": "MeetingDevice"
                    },
                    "type": "array"
                },
                "syncMetadata": {
                    "$ref": "SyncMetadata",
                    "description": "Sync metadata representing the returned version of the collection."
                }
            },
            "type": "object"
        },
        "DevicesRequest": {
            "description": "A request message for the devices collection.",
            "id": "DevicesRequest",
            "properties": {
                "syncMetadata": {
                    "$ref": "SyncMetadata",
                    "description": "Optionally set to a known version."
                }
            },
            "type": "object"
        },
        "DevicesResponse": {
            "description": "A response message for the devices collection.",
            "id": "DevicesResponse",
            "properties": {
                "full": {
                    "$ref": "DevicesCollection",
                    "description": "Populated if the collection was modified compared to the client version."
                },
                "unmodified": {
                    "$ref": "UnmodifiedResource",
                    "description": "Populated if the server collection is the same as the client provided\nversion."
                }
            },
            "type": "object"
        },
        "DisplayNameInfo": {
            "description": "Meta information about the display name.",
            "id": "DisplayNameInfo",
            "properties": {
                "displayNameType": {
                    "description": "The type of the name in the display_name field. It can be used to hint\non-screen rendering or screen readers.",
                    "enum": [
                        "DISPLAY_NAME_TYPE_UNSPECIFIED",
                        "PHONE_NUMBER"
                    ],
                    "enumDescriptions": [
                        "The default type, with no special interpretation.",
                        "A phone number, or an obfuscated phone number where some of the digits\nhave been replaced by placeholders."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EchoRequest": {
            "description": "A request message that client send to MAS service for connectivity checking.",
            "id": "EchoRequest",
            "properties": {
                "message": {
                    "description": "A message with no semantical meaning, but expected to be echoed from\nresponse for verification.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EchoResponse": {
            "description": "A response message for the Echo RPC.",
            "id": "EchoResponse",
            "properties": {
                "message": {
                    "description": "A message that echos the EchoRequest payload.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Editor": {
            "description": "User who can modify broadcast settings.",
            "id": "Editor",
            "properties": {
                "displayName": {
                    "description": "Name of the broadcast settings editor.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Empty": {
            "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "id": "Empty",
            "properties": {},
            "type": "object"
        },
        "ExternalJoinInformation": {
            "description": "A message representing information to be used for external (non-host) users\nwhen joining via a 3rd party interop gateway.",
            "id": "ExternalJoinInformation",
            "properties": {
                "gatewayAddress": {
                    "description": "A DNS address pointing to a gateway that can be used to join the meeting.\nOnly set if an address has been specified for the domain.",
                    "type": "string"
                },
                "gatewayIp": {
                    "description": "An IP pointing to a gateway that can be used to join the meeting.\nOnly set if an IP has been specified for the domain.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Feature": {
            "description": "Room features such as GVC, Jamboard or Wheelchair accessible.",
            "id": "Feature",
            "properties": {
                "displayProminence": {
                    "description": "Where this feature should be displayed.",
                    "enum": [
                        "DEFAULT_PROMINENCE",
                        "PROMINENT"
                    ],
                    "enumDescriptions": [
                        "Display this feature only in a room details view or pop-up.",
                        "Display this feature prominently, i.e. in the room tile used in\nlistings."
                    ],
                    "type": "string"
                },
                "equipmentType": {
                    "description": "Type of equipment the feature involves. Optional.",
                    "enum": [
                        "UNSPECIFIED_EQUIPMENT_TYPE",
                        "VIDEO",
                        "AUDIO"
                    ],
                    "enumDescriptions": [
                        "For equipment that is not used for communication.",
                        "For video equipment.",
                        "For audio-only equipment."
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The name of this feature as shown in Calendar.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GatewayAccess": {
            "description": "Details on the third-party interoperability settings for the meeting space.",
            "id": "GatewayAccess",
            "properties": {
                "enabled": {
                    "description": "Whether third-party gateway accesses are enabled for this meeting space.\nIf enabled, the actual access code can be retrieved by calling the\nGetGatewayAccess RPC method.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GatewayAccessCode": {
            "description": "A message representing information used by 3rd party interop gateways to\nresolve a meeting.",
            "id": "GatewayAccessCode",
            "properties": {
                "accessCode": {
                    "description": "An access code can be used as an alternative way of resolving a meeting\nusing the ResolveMeetingSpace RPC.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetGatewayAccessResponse": {
            "description": "A response message for the GetGatewayAccess RPC.",
            "id": "GetGatewayAccessResponse",
            "properties": {
                "externalJoinInformation": {
                    "$ref": "ExternalJoinInformation",
                    "description": "Information needed to provide full join instructions to external\nparticipants."
                },
                "gatewayAccess": {
                    "$ref": "GatewayAccessCode",
                    "description": "This is set only if 3rd party interop was enabled for the meeting."
                }
            },
            "type": "object"
        },
        "GetRegionalConfigResponse": {
            "description": "A response message for the GetRegionalConfig RPC.",
            "id": "GetRegionalConfigResponse",
            "properties": {
                "config": {
                    "additionalProperties": {
                        "$ref": "RegionalConfig"
                    },
                    "description": "The key is the region (typically country) per ISO 3166-1 alpha-2.\nThe value is the config for that region.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "JoinAsSecondaryRequest": {
            "description": "A request to create a secondary device of the given primary device.",
            "id": "JoinAsSecondaryRequest",
            "properties": {
                "mediaCaptureType": {
                    "description": "The capture type of the secondary device.",
                    "enum": [
                        "UNSPECIFIED",
                        "CAMERA_MIC",
                        "SCREENCAST_PRESENT",
                        "HDMI_PRESENT",
                        "WHITEBOARD_PRESENT"
                    ],
                    "enumDescriptions": [
                        "Unspecified should be treated as CAMERA_MIC.",
                        "Regular video participants (including PSTN devices) are expected to use\nthis enum value.\n\nTo keep backward compatibility meeting devices with this source, will\nalso be allowed to be set as presenter in the conference. Once all the\nclients start providing the value the backend might choose to start\nrequiring that the presenter device has a _PRESENT capture type.",
                        "Devices sending screen share media are expected to use this enum\nvalue. The media could include audio from the application but not from\nthe mic.\n\nNote that the loudest speaker indication logic in the cloud will *not*\nconsider/treat screen share devices any different.",
                        "Devices sending video from hdmi capture, that want to be treated as\npresentations should use this enum.",
                        "Whiteboard video feeds that want to be treated as presentations are\nexpected to use this type."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JoinAsSecondaryResponse": {
            "description": "Response to JoinAsSecondaryRequest.",
            "id": "JoinAsSecondaryResponse",
            "properties": {
                "secondaryDeviceId": {
                    "description": "Unique identifier for the secondary device.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListMeetingDevicesResponse": {
            "description": "MeetingDeviceListResponse is returned when clients want to list the\ndevices ACLd to a specific meeting.",
            "id": "ListMeetingDevicesResponse",
            "properties": {
                "meetingDevices": {
                    "description": "The retrieved meeting devices.",
                    "items": {
                        "$ref": "MeetingDevice"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListMeetingMessagesResponse": {
            "description": "ListMeetingMessagesResponse is used to return the meeting_messages that\nhave been stored in the call. At most 20 latest meeting_messages will be\nreturned.",
            "id": "ListMeetingMessagesResponse",
            "properties": {
                "meetingMessages": {
                    "description": "The retrieved meeting messages.",
                    "items": {
                        "$ref": "MeetingMessage"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListMeetingRecordingAcksResponse": {
            "description": "Response of the list of recording ack status for JOINED devices.",
            "id": "ListMeetingRecordingAcksResponse",
            "properties": {
                "recordingAcks": {
                    "description": "Retrieved ack status.",
                    "items": {
                        "$ref": "MeetingRecordingAck"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListMeetingRecordingsResponse": {
            "description": "Response for collection of meeting recordings.",
            "id": "ListMeetingRecordingsResponse",
            "properties": {
                "recordings": {
                    "description": "Retrieved recordings.",
                    "items": {
                        "$ref": "MeetingRecording"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListMeetingRoomsResponse": {
            "description": "A response to list meeting room requests. The criteria for relevance is\nbackend implementation specific.",
            "id": "ListMeetingRoomsResponse",
            "properties": {
                "listingResults": {
                    "description": "The rooms matching the search criteria, in alphabetical order.\nNote that this list will include unavailable/booked rooms. The results may\nbe paginated using the page_token field.",
                    "items": {
                        "$ref": "MeetingRoom"
                    },
                    "type": "array"
                },
                "pageToken": {
                    "description": "Token to be used for the next page in the result.  If this is\nempty string, there are no more pages.",
                    "type": "string"
                },
                "recommendationResults": {
                    "description": "List of room recommendations from Rendezvous matching the search criteria\nordered by relevance. This will only include available/un-booked rooms.\n\nThis is not paginated and will only contain a small number of results.",
                    "items": {
                        "$ref": "MeetingRoom"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListMeetingSpacesResponse": {
            "description": "MeetingListResponse is returned when clients list meetings they\nhave access to.",
            "id": "ListMeetingSpacesResponse",
            "properties": {
                "meetingSpaces": {
                    "description": "The retrieved meeting.",
                    "items": {
                        "$ref": "MeetingSpace"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListPairingPstnOutRegionCodesResponse": {
            "description": "A response message for the ListPairingPstnOutRegionCodes RPC.",
            "id": "ListPairingPstnOutRegionCodesResponse",
            "properties": {
                "regionCodes": {
                    "description": "The CLDR/ISO 3166 region codes to which the client is allowed to dial-out\nto for pairing with a phone.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListPstnOutRegionCodesResponse": {
            "description": "A response message for the ListPstnOutRegionCodes RPC.",
            "id": "ListPstnOutRegionCodesResponse",
            "properties": {
                "regionCodes": {
                    "description": "The CLDR/ISO 3166 region codes to which the client is allowed to dial-out.\nThis is used by client to avoid user entering region code directly and\nmaking disallowed calls. If an empty list is returned, client should not\nshow PSTN-out feature.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListScheduledEventsResponse": {
            "description": "Response to ListScheduledEventsRequest.",
            "id": "ListScheduledEventsResponse",
            "properties": {
                "events": {
                    "description": "Events found for the user.",
                    "items": {
                        "$ref": "ScheduledEvent"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ListUniversalPstnNumbersResponse": {
            "description": "A response to a ListUniversalPstnNumbers request.",
            "id": "ListUniversalPstnNumbersResponse",
            "properties": {
                "numbers": {
                    "description": "The list of international PSTN numbers that the current user can\nuse with universal pins to dial in. For anonymous users, it will\nhave some default content. The list may be empty.",
                    "items": {
                        "$ref": "UniversalPstnNumber"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MediaState": {
            "description": "High level information about media originating from the device.\nThis is used to provide UI hints to other clients to indicate\nthat the device is sending working media etc.\n\nSince this is not at the granularity of individual streams, it\nonly provides an aggregate or approximation in the case of a\ndevice with multiple streams of the same media type.\n\nThis is fully under the control of the owning client, and will\nnever be changed by the server and can not be changed by other\nclients. For PSTN participants, this is will be set by the PSTN\nclient code in the backend.",
            "id": "MediaState",
            "properties": {
                "health": {
                    "description": "The current health of this media.",
                    "enum": [
                        "HEALTH_UNSPECIFIED",
                        "WORKING",
                        "BROKEN"
                    ],
                    "enumDescriptions": [
                        "Not used.",
                        "Media is working as expected. As long as it isn't muted, the\nmedia path should contain useful data.",
                        "There is a problem getting media from the hardware source,\nfor example when a microphone is not able to record any\naudio, or that the signal is so low that it should be\nconsidered broken. Media may still be unmuted when this is\nset, but there will probably not be any useful media data."
                    ],
                    "type": "string"
                },
                "muteability": {
                    "description": "The remote muteability of this media for this device. This is an\nindication to other clients whether they can mute this device. This field\nis set by the owning client, but can not be changed after the device has\nentered the JOINED state.",
                    "enum": [
                        "MUTEABILITY_UNSPECIFIED",
                        "NOT_MUTEABLE",
                        "MUTEABLE",
                        "BEST_EFFORT"
                    ],
                    "enumDescriptions": [
                        "Not used. If a device is created with this, it will receive a default\nvalue from the backend. If a client receives an unknown value, it\nshould handle it in a reasonable way, for example defaulting to\nMUTEABLE.",
                        "The device does not support automatic remote mute and will not respond\nto mute requests. Viewing clients should indicate this in the UI, and\navoid sending mute requests.",
                        "The device supports remote mute, and viewing clients should show an\naffordance to mute media in their UI, as long as the device has a\ncorresponding media stream.",
                        "The device does not support automatic remote mute, but will accept\nrequests to mute and make a best effort to mute, for example by\nprompting the end user to mute the hardware device."
                    ],
                    "type": "string"
                },
                "mutedByDeviceId": {
                    "description": "The device resource name of a device that caused media to be muted. When\nthis is set, it means that media should be seen as muted, and\nwhen it is unset, media should be seen as not muted. The actual\nmute state of individual streams is part of the media streams\nAPI.\n\nWhen a client mutes its own media (stops sending media), it\nshould set this string to point to the meeting device that\noriginally requested the change. If mute was not requested by\nanother device but initiated by the user controlling this\ndevice, then this should be set to the device's own meeting\ndevice resource name.\n\nWhen media sending resumes, the client should clear this field.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MeetingBroadcast": {
            "description": "Information about the broadcast of a meeting space.",
            "id": "MeetingBroadcast",
            "properties": {
                "enabled": {
                    "description": "Whether broadcasting is enabled. When false, all other fields will have\ntheir default values.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Resource name of the broadcast. It must have the format of\n\"spaces/*/broadcast\".",
                    "type": "string"
                },
                "viewUrl": {
                    "description": "A URL that can be used to access the broadcast of the meeting. This field\nis readonly.",
                    "type": "string"
                },
                "viewerAccessPolicy": {
                    "description": "The policy that controls who can view the broadcast. Some options may be\nrestricted by the domain admin via dasher policies.",
                    "enum": [
                        "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
                        "ORGANIZATION",
                        "PUBLIC"
                    ],
                    "enumDescriptions": [
                        "Used only when broadcast is not enabled, or an unknown enum value is used.",
                        "Only authenticated Google accounts belonging to the same organization\nas the meeting organizer can access the broadcast.",
                        "Anyone with the broadcast view URL can access the broadcast."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MeetingBroadcastView": {
            "description": "Information for watch page to playback a meeting broadcast and display\nbroadcast information.",
            "id": "MeetingBroadcastView",
            "properties": {
                "latestViewSession": {
                    "$ref": "MeetingBroadcastViewSession",
                    "description": "The latest session for this broadcast view. A broadcast view can have\nseveral sessions over time, but only the latest can be active. If there is\nno latest session created, This will be empty."
                },
                "name": {
                    "description": "The resource name of this meeting broadcast view.",
                    "type": "string"
                },
                "noMoreViewSession": {
                    "description": "True if there won't be any updated MeetingBroadcastViewSession. The client\ncan stop polling.\n\nThis field is deprecated and will be removed.",
                    "type": "boolean"
                },
                "pollingInterval": {
                    "description": "The time that clients must wait between request to read this resource. The\nvalue may change and clients should update its polling interval when it\nsees an update value in a response.",
                    "format": "google-duration",
                    "type": "string"
                },
                "viewSessions": {
                    "description": "All the sessions for this broadcast view, which includes the latest\nsession. It is sorted by time with the latest view session at the last.\nThis field will eventually replace the latest_view_session field.\nBut during transition both fields will be set to make sure the old clients\ncontinue to work until fully migrated.\n\nThis field is deprecated and will be removed.",
                    "items": {
                        "$ref": "MeetingBroadcastViewSession"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MeetingBroadcastViewSession": {
            "description": "A session in a MeetingBroadcastView.",
            "id": "MeetingBroadcastViewSession",
            "properties": {
                "broadcastPlayerConfig": {
                    "$ref": "BroadcastPlayerConfig",
                    "description": "The Streaming URLs for content playback. Set for all the existing broadcast\nview sessions."
                },
                "broadcastSessionToken": {
                    "description": "The token provided for this broadcast session.",
                    "type": "string"
                },
                "sessionStatus": {
                    "description": "The current status of this broadcast view session.",
                    "enum": [
                        "SESSION_STATUS_UNSPECIFIED",
                        "INACTIVE",
                        "STARTING",
                        "LIVE"
                    ],
                    "enumDescriptions": [
                        "This should be never used.",
                        "The broadcast view session is no longer active. It can't be played except\nin DVR mode.",
                        "Resource for the broadcast view session is being prepared. Content cannot\nbe played.",
                        "Resource for the broadcast view session is ready. Content can be played."
                    ],
                    "type": "string"
                },
                "startTime": {
                    "description": "The start time of the broadcast session.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "stopTime": {
                    "description": "The stop time of the broadcast session. Active sessions have no stop time.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MeetingDevice": {
            "description": "A device connected to a conference. A device represents a client session in\nthe context of a conference belonging to a meeting space.\n\nA MeetingDevice is bound to the conference it connects to, and if the\nconference ends prematurely for some reason, the device will be deleted.",
            "id": "MeetingDevice",
            "properties": {
                "anonymous": {
                    "description": "This flag is used by clients which want to display a specific UI for users\nwhich have gone through the anonymous join flow. Generally this means that\nusers which are not authenticated will have this flag set to true, but\nsince PSTN clients do not use the same join flow, they will have this flag\nset to false. Note that the guest flag will always be true if this flag is\ntrue.",
                    "type": "boolean"
                },
                "audioMuteRequest": {
                    "$ref": "MuteRequest",
                    "description": "This represents a desire to mute the audio from a meeting device\nother than the owner of the audio stream. A device other than the\nowner of the audio stream will request remote mute by filling in\nits own meeting device resource name in\naudio_mute_request.by_meeting_device_id.\n\nThe owner may either approve this request (by changing the actual\nmute state) or reject it (by keeping the mute state intact).\n\nAfter handling the request, the owner should clear this field by\nsetting audio_mute_request.by_meeting_device_id to the empty\nstring.\n\nA client must not rely on seeing this set for any other device\nthan its own."
                },
                "audioState": {
                    "$ref": "MediaState",
                    "description": "The audio state for this device."
                },
                "audioUnmuteRequest": {
                    "$ref": "UnmuteRequest",
                    "description": "This represents a desire to unmute the audio from a meeting device\nother than the owner of the audio stream. A device other than the\nowner of the audio stream requests a remote unmute by\nfilling in its own meeting device resource name in\naudio_unmute_request.by_meeting_device_id.\n\nThe owner may either approve this request (by changing the actual\nmute state) or reject it (by keeping the mute state intact).\n\nAfter handling the request, the owner should clear this field by\nsetting audio_unmute_request.by_meeting_device_id to the empty\nstring.\n\nA client must not rely on seeing this set for any other device\nthan its own.\n\naudio_mute_request and audio_unmute_request will never be set at the same\ntime. Requests attempting to do so are deemed invalid and will fail.\nIf a device update sets either of the fields, the other is automatically\ncleared by the backend.\n\nCurrently, this is only supported for paired PSTN devices (CallMe++) and\ncan only be set by the Hotlane device the phone is paired with."
                },
                "avatarUrl": {
                    "description": "A URL for an avatar image. The avatar can be used to represent\nthe device when there is no video feed. This is a FIFE URL\n(go/fife-urls) that points to a square 192\u00d7192 pixel image that\nis either a profile picture or an automatically generated image.\nCannot be set by the client.",
                    "type": "string"
                },
                "clientType": {
                    "description": "The type of client used by this device. This can be used by\nother clients, for instance, to differentiate PSTN participants and\nprovide different UI (e.g. ability to send DTMF).\nThis must not be filled in by clients. The backend will fill this out\nusing information clients provide in standard RTC headers.",
                    "enum": [
                        "CLIENT_TYPE_UNSPECIFIED",
                        "OTHER",
                        "WEB",
                        "MOBILE",
                        "PSTN",
                        "VC_EQUIPMENT",
                        "TEST_BOT",
                        "INTEROP_GATEWAY",
                        "NATIVE_DESKTOP"
                    ],
                    "enumDescriptions": [
                        "Not used.",
                        "Type not covered by remaining options.",
                        "A browser client.",
                        "A mobile native client.",
                        "A phone (using PSTN connection). This is used both for incoming and\noutgoing calls.",
                        "Videoconferencing equipment, such as a GVC installation in a conference\nroom or a personal Hotrod unit",
                        "A Meetings test bot.",
                        "An gateway that lets users connect from other kinds of VC\nequipment. Clients can show this similar to VC_EQUIPMENT.",
                        "A native desktop client. Even though this may embed a browser / webviews\nfor UI, it is different from the WEB client type above in that it depends\non things outside of the browser environment, and is deployed as such."
                    ],
                    "type": "string"
                },
                "cloudSessionId": {
                    "description": "The id of an ongoing cloud media session with which this device is\nassociated.",
                    "type": "string"
                },
                "createdBy": {
                    "description": "The device resource name of the device that created this device, or\nempty if this device was created by a client with no previous device\naffiliation. It is equal to the meeting_device_id field of that device,\nalthough there is no guarantee that that device still exists.\n\nThis is used for invitations and will be set when a PSTN-out device is\ncreated to dial out to a phone number. There may be second screen uses in\nthe future as well.\n\nClients must not set it themselves, it is set by the server.",
                    "type": "string"
                },
                "deleted": {
                    "description": "The device has reached one of the final states and is no longer part\nof the call. Output only.",
                    "type": "boolean"
                },
                "deletedBy": {
                    "description": "This field is never set.",
                    "type": "string"
                },
                "displayName": {
                    "description": "For a PSTN-out device, the display name will be the full, unobfuscated,\nphone number only when viewed by the device that created the PSTN-out\ndevice and the reverse phone number lookup for the dialed number failed.",
                    "type": "string"
                },
                "displayNameInfo": {
                    "$ref": "DisplayNameInfo",
                    "description": "Meta information about the display name of this device."
                },
                "features": {
                    "description": "During the rollout phase of a new feature, clients must use this\nfeature list to determine if the feature should be enabled or\ndisabled. After the feature has been fully launched, clients\nshould be updated to no longer look at this field for that\nfeature, and when all clients are updated, the backend may stop\nsetting it.",
                    "enumDescriptions": [
                        "Not used, ever.",
                        "Meeting messages are to be supported.",
                        "Meeting recordings are to be supported."
                    ],
                    "items": {
                        "enum": [
                            "FEATURE_UNUSED",
                            "FEATURE_MEETING_MESSAGES",
                            "FEATURE_MEETING_RECORDING"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "finalStateReason": {
                    "description": "An optional reason for why the\ndevice is in its current final join state.\nThis is an output-only field only seen by the device itself.",
                    "enum": [
                        "FINAL_STATE_REASON_UNSPECIFIED",
                        "OUTDATED_CLIENT",
                        "CONFERENCE_LENGTH_LIMIT_EXCEEDED",
                        "CONNECTIVITY_LOST",
                        "CONFERENCE_FULL"
                    ],
                    "enumDescriptions": [
                        "Unspecified reason.",
                        "The device is in the ERROR state because\nthe client owning it is outdated.\nThe client has to update to be able to rejoin the meeting.",
                        "The device is in the ERROR state because the conference\nit was in was terminated for having gone on for too long.",
                        "The device is in the ERROR state because the backend\nlost contact with the client owning the device.",
                        "The device is in the DENIED state because the conference\nbecame full before it was allowed into the meeting."
                    ],
                    "type": "string"
                },
                "guest": {
                    "description": "A flag that is set to true by the backend if the device owner\ndoes not belong to the same domain as the organizer. Also set to\ntrue for anonymous devices. Output only.",
                    "type": "boolean"
                },
                "isPresentation": {
                    "description": "Indicates whether this device should be treated as a presentation.  This\nflag is expected to be set by the backend based on the value of the\nmedia_capture_type of the MeetingDevice.\n\nThis value is read-only to the client, it is a future-proof way for clients\nto know if a device should be treated as a presentation.",
                    "type": "boolean"
                },
                "joinState": {
                    "description": "The current state of joining the call. The client must set it to either\nJOINED or HIDDEN on create to indicate the desired starting state. The\nserver may change it to KNOCKING or LOBBY in the create response. State\nchanges are performed either by client or server according to the state\ndefinitions.\n\nNOTE: New join states may be added in future versions of this API. If a\nclient encounters a join state it doesn't recognize, it should use the\nfollowing list to determine a fallback join state for the device:\n\n- If the deleted flag is set, the device should be treated as if it were\n  in the LEFT join state.\n\n- Otherwise, if the joined flag is set, it should treat the device as if\n  it were in the JOINED state.\n\n- Otherwise, this device should be treated as yet not having joined the\n  call and not be shown in a user interface.",
                    "enum": [
                        "JOIN_STATE_UNSPECIFIED",
                        "JOINED",
                        "HIDDEN",
                        "KNOCKING",
                        "DENIED",
                        "LOBBY",
                        "LEFT",
                        "EJECTED",
                        "ERROR",
                        "MISSING_PREREQUISITES",
                        "RINGING",
                        "DENIED_FULL",
                        "VIEWING"
                    ],
                    "enumDescriptions": [
                        "Not used, but may show up if an unknown enum value is used.",
                        "The JOINED state is used for devices that are in the call and\nmay send or receive media. Clients should always request this\nstate when trying to join a call.\n\nVisibility: Visible to all other JOINED, HIDDEN and VIEWING devices.\n\nTransitions: Clients can change the join state to one of the final\nstates LEFT (if the client represents the modified device) or EJECTED\n(if the client represents another device and the MAY_EJECT privilege\nis set on the client's own device).",
                        "The HIDDEN state is a semi-joined state. It means that the\ndevice has been accepted into the call and the other devices in\nthe call are now visible, but it can not send or receive media.\n\nThis can be used to implement a \"green room\" where the client\nlets the user confirm that it actually wants to join and open\nthe camera and microphone. Participants that need to knock to\njoin will not be able to use this state, since it is only\navailable to devices that can join.\n\nVisibility: A HIDDEN device is not visible to other devices.\n\nTransitions: The client in the HIDDEN state can request to transition\nto VIEWING, JOINED states. The request to JOINED state will result in\none of the following states\n  * JOINED, if all the join conditions are met.\n  * MISSING_PREREQUISITES, if the device needs to fulfill some\n    prerequisites, e.g. acknowledge a recording notice.",
                        "A device is put in the KNOCKING state when it is not allowed to\njoin immediately. A knocking device does not have access to the\ncall and can not send or receive media.\n\nWhen trying to join, clients should always request the JOINED\nstate, and the response to the create request may indicate that\nit was instead put in the KNOCKING state.\n\nVisibility: A KNOCKING device is visible only to devices that\nhave the ability to accept it into the call.\n\nTransitions: The KNOCKING state can be changed by either server or\nanother device to one of the following states:\n  * JOINED, if accepted, and no other confirmations are needed.\n  * MISSING_PREREQUISITES, if the device needs to fulfill some\n    prerequisites, e.g. acknowledge a recording notice.\n  * DENIED, if the knocking request was denied",
                        "The DENIED state indicates that joining the call was denied for\nthis device, in response to knocking.\n\nVisibility: The visibility for devices in the DENIED state is\nidentical to the KNOCKING state.\n\nTransitions: This is a final state.\n\nNOTE: This is usually set by other clients, but may be set by\nthe server if the conference becomes full. However, the\nDENIED_FULL join state is designed to cover that use case and\nthe server will switch to setting that as soon as it is\nconfirmed that all clients can handle it.",
                        "The LOBBY state is similar to the HIDDEN state, but with the\ndifference that the client is not able to join the call without\nknocking. Devices in this state may not send or receive media.\n\nVisibility: Devices in the LOBBY state are not visible to any\nother devices than itself.\n\nTransitions: The LOBBY state can be changed by the client to the JOINED\nstate, but that will usually result in actually changing it to the\nKNOCKING state. If the meeting ACL was changed while the client was in\nthe LOBBY state, the request to change to JOINED may succeed.",
                        "The LEFT state is used for devices that were once in the JOINED,\nRINGING or VIEWING state but have since voluntarily left the call.\n\nVisibility: Visible to all JOINED, HIDDEN, VIEWING devices that existed\nbefore this device entered this state.\n\nTransitions: This is a final state.",
                        "The EJECTED state is used for devices that were once in the JOINED\nstate but have since been removed from the call by another device.\nA device can also enter EJECTED from RINGING, when cancelling a PSTN-out\ncall before it successfully connected.\n\nVisibility: Visible to all JOINED or HIDDEN devices that existed before\nthis device entered this state.\n\nTransitions: This is a final state.",
                        "The ERROR state is used for devices that have been detected by the\nserver to no longer exist.\n\nVisibility: Visible to all JOINED, HIDDEN, VIEWING devices that existed\nbefore this device entered this state.\n\nTransitions: This is a final state. Devices in this state may be\ncompletely removed from the device collection by the server.",
                        "The MISSING_PREREQUISITES state is used for devices that need to fulfill\ncertain prerequisites to join (e.g. acknowledge that the call is being\nrecorded). Currently only used for recording/streaming cases.\n\n\nVisibility: Visible to all JOINED devices.\n\nTransitions: The client can change the state to JOINED once all\nprerequisites have been met. If they have not been met, the update will\nresult in the device staying in the MISSING_PREREQUISITES state.",
                        "A device in the RINGING state represents an invitation where the\nrecipient of the invitation has not yet responded to the invitation.\n\nVisibility: Visible to all JOINED devices.\n\nTransitions: The invited party can accept or decline, which will\ntransition to JOINED and LEFT, respectively. If there was a problem, the\nbackend will transition this to ERROR. PSTN-out devices that are still\nRINGING may instead transition to EJECTED if ejected before the call\nsuccessfully connects.",
                        "The DENIED_FULL state indicates that the conference became full\nwhile the device was in the KNOCKING state. It is set by the server.\n\nVisibility: The visibility for devices in the DENIED_FULL state\nis identical to the KNOCKING state.\n\nTransitions: This is a final state.",
                        "The VIEWING state can be used by devices that would be able to enter the\nJOINED state but do not want to join the conference, and are interested\nin receiving the media content.\n\nThis state is currently (Aug '17) being used for live streaming Thor\nconferences using YouTube Live infrastructure to ACLed users. See\ngo/thor-viewers\n\nVisibility: These devices have the same visibility as JOINED devices -\nare visible to all other JOINED, HIDDEN and VIEWING state devices.\n\nTransitions: Devices in the VIEWING state can request to transition to\nJOINED state. The request will result in one of the following states\n  * JOINED, if all the join conditions are met.\n  * MISSING_PREREQUISITES, if the device needs to fulfill some\n    prerequisites, e.g. acknowledge a recording notice."
                    ],
                    "type": "string"
                },
                "joined": {
                    "description": "Indicates whether this device should be treated as part of the call by\nother devices. At present, this flag corresponds 1:1 to the JOINED\njoin_state, but it is a future-proof way for clients to know when to show\nanother device in the UI even if we add new states which should also be\ntreated as joined. Output only.",
                    "type": "boolean"
                },
                "mediaCaptureType": {
                    "description": "Clients are expected to provide the value for this field when requesting to\njoin a conference (JOINED state). This field value will be unmodifiable\npost join.",
                    "enum": [
                        "UNSPECIFIED",
                        "CAMERA_MIC",
                        "SCREENCAST_PRESENT",
                        "HDMI_PRESENT",
                        "WHITEBOARD_PRESENT"
                    ],
                    "enumDescriptions": [
                        "Unspecified should be treated as CAMERA_MIC.",
                        "Regular video participants (including PSTN devices) are expected to use\nthis enum value.\n\nTo keep backward compatibility meeting devices with this source, will\nalso be allowed to be set as presenter in the conference. Once all the\nclients start providing the value the backend might choose to start\nrequiring that the presenter device has a _PRESENT capture type.",
                        "Devices sending screen share media are expected to use this enum\nvalue. The media could include audio from the application but not from\nthe mic.\n\nNote that the loudest speaker indication logic in the cloud will *not*\nconsider/treat screen share devices any different.",
                        "Devices sending video from hdmi capture, that want to be treated as\npresentations should use this enum.",
                        "Whiteboard video feeds that want to be treated as presentations are\nexpected to use this type."
                    ],
                    "type": "string"
                },
                "mediaSessionId": {
                    "description": "The ids of ongoing media sessions with which this device is associated.\nThis field is superceded by the cloud_session_id and p2p_session_id fields\nand clients are recommended to switch to that.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "meetingDeviceId": {
                    "description": "A unique server-generated ID for the meeting device. This is the\nREST name of the meeting device resource and has the form\n`spaces/<id>/devices/<id>`, where <id> is a sequence of\ncharacters in the\n[base64url set](https://tools.ietf.org/html/rfc4648#section-5),\nwithout any `=` characters.",
                    "type": "string"
                },
                "p2pSessionId": {
                    "description": "The id of an optional P2P session with which this device is associated.",
                    "type": "string"
                },
                "primaryDeviceId": {
                    "description": "The *primary meeting device* this meeting device is associated with, which\nalso means that the current device is a *secondary meeting device*. Clients\nshould adapt their UI to show that the primary device and secondary devices\nassociated with it are parts of a cluster, forming a larger \"virtual\"\nmeeting device. A typical use case is a secondary device carrying a\npresentation together with a primary device with the meeting room camera.\n\nThe value, if set, is a REST ID of another meeting device and is set by the\nclient when creating the meeting device, or upon modification prior to\njoining the meeting. If the referenced primary device is removed during the\nconference, the backend will clear this field.",
                    "type": "string"
                },
                "privileges": {
                    "description": "List of privileges. This is only provided for the current device.",
                    "enumDescriptions": [
                        "Not used.",
                        "This device may eject other devices in the call.",
                        "This device may initiate recording.",
                        "This device may create new meeting devices by dialing out to phone\nnumbers.",
                        "This device may initiate broadcast.",
                        "This device may send invitations to people to join the conference.",
                        "This device may update broadcast viewer access policy.",
                        "This device may pair with a PSTN-in device.",
                        "This device may pair with a PSTN-out device."
                    ],
                    "items": {
                        "enum": [
                            "PRIVILEGE_UNSPECIFIED",
                            "MAY_EJECT",
                            "MAY_INITIATE_RECORDING",
                            "MAY_DIAL_OUT",
                            "MAY_INITIATE_BROADCAST",
                            "MAY_SEND_INVITES",
                            "MAY_UPDATE_BROADCAST_ACCESS_POLICY",
                            "MAY_PAIR_WITH_PSTN_IN",
                            "MAY_PAIR_WITH_PSTN_OUT"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "pstnInfo": {
                    "$ref": "PstnInfo",
                    "description": "PSTN-related information about the device if it has `client_type` set to\n`PSTN`. It is not used for other devices.\n\nThis is set by the client when creating a device for an outbound call, and\nset by the server for inbound calls."
                },
                "recordingAcks": {
                    "description": "Client acknowledgments on receiving recording update, invisible to\nother devices. Note only two updates are supported for this\nfield:\n  * Insert ACK to active recordings\n  * Flip ACK_STATUS_REQUESTED -> ACK_STATUS_ACKED for an active recording.\nOther actions from client side is no-op.",
                    "items": {
                        "$ref": "RecordingAck"
                    },
                    "type": "array"
                },
                "recordingPrivileges": {
                    "description": "Recording privileges the device has. Always set by server.",
                    "items": {
                        "$ref": "RecordingPrivilege"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MeetingMessage": {
            "description": "A message sent to a meeting space.",
            "id": "MeetingMessage",
            "properties": {
                "clientDedupeId": {
                    "description": "Unique id set by client that is used to eliminate client retries.\nClient should use its own local timestamp here, and use the same\ntimestamp for all retries of the same message.\nThis field is not present when viewing messages from other\nmeeting devices.",
                    "format": "int64",
                    "type": "string"
                },
                "contentType": {
                    "description": "The type of the message contents.",
                    "enum": [
                        "CONTENT_TYPE_UNSPECIFIED",
                        "CHAT",
                        "CHAT_TEST",
                        "AUDIO_DEBUG_RECORDING_STATE"
                    ],
                    "enumDescriptions": [
                        "The content type of the message wasn't specified.",
                        "An ephemeral text chat message.",
                        "A test chat message. Not to be shown on UI.",
                        "An audio debug recording status message. Indicates a client-side audio\ndebug recording is in progress so that all endpoints can show a badge\non the UI."
                    ],
                    "type": "string"
                },
                "meetingMessageId": {
                    "description": "Unique id for the meeting message, in format \"meetings/*/messages/*\".",
                    "type": "string"
                },
                "messageContent": {
                    "$ref": "Content",
                    "description": "Actual content of message."
                },
                "senderDeviceId": {
                    "description": "Id of the device that sent the message.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp when the message was received by client.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MeetingRecording": {
            "description": "Information about a recording session in a meeting space.",
            "id": "MeetingRecording",
            "properties": {
                "allowForTranscriptionTraining": {
                    "description": "Consent to use recorded audio for training transcription models. When\nthis field is true, the audio in the conference may be sent to a\ntranscription service where new speech transcription models will be\ntrained.\n\n- In CreateRecording, the client can set this to true.\n- In UpdateRecording, the client will be able to disallow transcription\n  training by updating this field to false for meeting recordings that were\n  created with this field initially set to true.\n- In UpdateRecording, the client will NOT be allowed to change it to\n  true for recordings that are created with this field set to false.",
                    "type": "boolean"
                },
                "controlPrivileges": {
                    "description": "List of control privileges. This tells a requesting client what operations\nit is permitted to do with a MeetingRecording. Set by server.",
                    "enumDescriptions": [
                        "Not used.",
                        "This client has full control on this MeetingRecording."
                    ],
                    "items": {
                        "enum": [
                            "PRIVILEGE_UNSPECIFIED",
                            "FULL_CONTROL"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "documentUrl": {
                    "description": "The recording document URL in drive. Set by server once the video is\nuploaded to drive. This field is read only to the client.",
                    "type": "string"
                },
                "externalId": {
                    "description": "An external ID for the recording. This is provided by the client when\ncreating a GLIVE_STREAMING session, and must be empty otherwise.",
                    "type": "string"
                },
                "producerDeviceId": {
                    "description": "The device resource name of the device to produce the recording layout.\nA moderator/owner device can override it through the update action,\nby setting to its own device resource name. Leaving it empty in the update\naction would be a no-op.",
                    "type": "string"
                },
                "recordingApplicationType": {
                    "description": "The application type of the recording. Set at creation by the client,\nwith a default value of RECORDING.",
                    "enum": [
                        "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
                        "RECORDING",
                        "GLIVE_STREAM",
                        "BROADCAST"
                    ],
                    "enumDescriptions": [
                        "This is never used.",
                        "A meeting recording saved to a video file in Google Drive.",
                        "A *Google Live* managed stream. See go/thor-managed-streaming.",
                        "A meeting broadcast. See go/thor-streaming-prd."
                    ],
                    "type": "string"
                },
                "recordingId": {
                    "description": "Unique id for recording session for \u201cmeetings/*/recordings/*\u201d.\nGenerated by server.",
                    "type": "string"
                },
                "recordingOwnerEmail": {
                    "description": "The email address of the recording owner. Provided by the client\nwhen creating a GLIVE_STREAM with recording enabled.\nMust be empty otherwise.",
                    "type": "string"
                },
                "resolution": {
                    "description": "Output video resolution.",
                    "enum": [
                        "RESOLUTION_UNSPECIFIED",
                        "RESOLUTION_640X360",
                        "RESOLUTION_854X480",
                        "RESOLUTION_1280X720"
                    ],
                    "enumDescriptions": [
                        "Output resolution not specified.",
                        "360p.",
                        "480p.",
                        "720p."
                    ],
                    "type": "string"
                },
                "sessionStatus": {
                    "description": "Recording session status.\n- In CreateRecording, the client can set this to INITIALIZED if the client\n  just wants to prepare the ingestion. It can also set this to STARTED to\n  start the recording.\n- In UpdateRecording, if the ingestion has been initialized, the client can\n  set this to STARTED to start the recording.\n- In UpdateRecording, if the recording has started, the client can set this\n  to STOPPED to stop the recording.",
                    "enum": [
                        "SESSION_STATUS_UNSPECIFIED",
                        "INITIALIZING",
                        "INITIALIZED",
                        "STARTED",
                        "STOPPED",
                        "PROCESSING",
                        "PROCESSED",
                        "PROCESS_FAILED"
                    ],
                    "enumDescriptions": [
                        "Unspecified session state.",
                        "Recording session is initializing.",
                        "Recording session is initialized with live ingestion.",
                        "Recorder has started.",
                        "Recorder has stopped.",
                        "Deprecated. Recorded media data is",
                        "being processed.\nRecorded media data is processed.",
                        "Recorded media data process failed."
                    ],
                    "type": "string"
                },
                "startTimestamp": {
                    "description": "Start recording timestamps in UTC Epoch time. These values are set by\nserver during handling the request.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "stopTimestamp": {
                    "description": "Stop recording timestamps in UTC Epoch time. These values are set by\nserver during handling the request.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "title": {
                    "description": "Drive document title, limited to max length of 256 unicode characters.\nExceeding the limit will result in a BAD_REQUEST error.\nCan only be set at the recording creation time. No update is allowed.",
                    "type": "string"
                },
                "videoLayout": {
                    "$ref": "VideoLayout",
                    "description": "Layout of the recording. Only the recording producer can set/update the\nvideo layout."
                }
            },
            "type": "object"
        },
        "MeetingRecordingAck": {
            "description": "The device ACK status to a specific recording.",
            "id": "MeetingRecordingAck",
            "properties": {
                "meetingDeviceId": {
                    "description": "The device resource name of the device.",
                    "type": "string"
                },
                "meetingRecordingId": {
                    "description": "The rest id of the recording.",
                    "type": "string"
                },
                "status": {
                    "description": "The Ack status of the device to the recording. Set by server.",
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "NOT_ACKED",
                        "ACKED"
                    ],
                    "enumDescriptions": [
                        "Default value. Not used.",
                        "The device hasn't ACKed to the current recording.",
                        "The client has ACKed."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MeetingRoom": {
            "description": "A meeting room, physical room that a meeting can be held in.",
            "id": "MeetingRoom",
            "properties": {
                "availability": {
                    "description": "The availability of the room, as reported by Rendezvous.",
                    "enum": [
                        "UNKNOWN",
                        "AVAILABLE",
                        "UNAVAILABLE"
                    ],
                    "enumDescriptions": [
                        "Default value. Used for lookup errors by Rendezvous, clients should\nregard this too as not AVAILABLE.",
                        "The room is available.",
                        "The room is unavailable."
                    ],
                    "type": "string"
                },
                "buildingName": {
                    "description": "Name of the building in which this room is located, if known.",
                    "type": "string"
                },
                "calendarId": {
                    "description": "The calendar resource ID for the room, in email format. This may be empty,\nfor example when resolving the device ID for a CfM that is not linked to a\ncalendar.",
                    "type": "string"
                },
                "capacity": {
                    "description": "The number of people the room is specified to fit, if known. Zero if\nunknown.",
                    "format": "int32",
                    "type": "integer"
                },
                "category": {
                    "description": "Which kind of resource this room represents. Has semantic bearing on how\nthe resource is displayed in UI, and whether it appears in contexts where\nonly conference rooms are suggested.",
                    "enum": [
                        "CATEGORY_UNKNOWN",
                        "CONFERENCE_ROOM",
                        "OTHER"
                    ],
                    "enumDescriptions": [
                        "unknown whether this is or isn't a meeting room.",
                        "meeting room or equivalent, e.g. phone booth",
                        "known to be a non-meeting-room resource."
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "A short description of the meeting room.\n\nExample: \"This conference room is in New York city, building 14,\nfloor 12, Boardroom\"",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display name of the meeting room. This may contain information\nsuch as building and capacity (eg: \"NYC-9TH-9A232-Boardroom\").\nThis is always present.",
                    "type": "string"
                },
                "features": {
                    "description": "The features this room has, if known.",
                    "items": {
                        "$ref": "Feature"
                    },
                    "type": "array"
                },
                "floorName": {
                    "description": "The name of the floor on which this room is located, if known.",
                    "type": "string"
                },
                "meetingRoomId": {
                    "description": "The unique id for the meeting room.  This can be passed in to\nCreateAndPushMeetingDeviceRequest.",
                    "type": "string"
                },
                "shortName": {
                    "description": "The abbreviated resource name, eg: \"Boardroom\", if defined.",
                    "type": "string"
                },
                "suitability": {
                    "description": "The suitability of this room, as reported by Rendezvous.",
                    "enum": [
                        "UNKNOWN_SUITABILITY",
                        "IDEAL",
                        "EXTRA_IDEAL",
                        "LESS_THAN_IDEAL"
                    ],
                    "enumDescriptions": [
                        "Fallback.",
                        "This room satisfies all perceived requirements and can be presented\nwith confidence.",
                        "This room not only satisfies all perceived requirements, but it also has\nsomething more going for it, like being the same room as the previous\nmeeting. It can be presented extra confidently (or just confidently).",
                        "This room has one of more drawbacks which means it may or may not be\na good fit for this meeting location. We should bring attention to these\nand let the user decide if they can use it."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MeetingSpace": {
            "description": "A meeting space is a persistent object that is the context for one\nor more calls. The meeting space is what makes users find each\nother when they want to meet and to find shared resources.\n\nWith two exceptions, all the fields in the meeting space resource are\nvisible publicly to any client, even anonymous users. The exceptions\nare that\n* The call_info field is only visible to clients that have a\n  device (as indicated by the meeting token) in the JOINED, HIDDEN, or\nVIEWING state\n* The meeting_alias field will only be set for users who are in the\n  same domain as the meeting space.\n\nThe meeting space resource (outside call_info) should only contain\ninformation necessary to join a call in the meeting space, and not any other\nmetadata about the meeting space, such as what organization it belongs to or\nthings related to ongoing calls.",
            "id": "MeetingSpace",
            "properties": {
                "acceptedNumberClass": {
                    "description": "Which number classes are accepted by this meeting at the moment?\nWhen there is no ongoing conference, this field may change independent\nof the version number of the MeetingSpace. When a conference starts, this\nfield will be locked to the value at that time, and then will be unlocked\nagain at the end of the conference.",
                    "enumDescriptions": [
                        "No number class has been specified.",
                        "The number has a low cost to receive calls on.",
                        "The number has a high cost to receive calls on.",
                        "Class for legacy numbers."
                    ],
                    "items": {
                        "enum": [
                            "NUMBER_CLASS_UNSPECIFIED",
                            "LOW_COST",
                            "HIGH_COST",
                            "LEGACY"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "broadcastSettings": {
                    "$ref": "BroadcastSettings",
                    "description": "Settings of a broadcast in a meeting space."
                },
                "callInfo": {
                    "$ref": "CallInfo",
                    "description": "Information relevant to an ongoing conference. This field will be set in\nresponses if the client requesting the meeting space has a device in one\nof the JOINED, HIDDEN, MISSING_PREREQUISITES, or VIEWING states. The field\nwill also be set without a created device if the client requesting the\nmeeting space is eligible to directly create a device in the JOINED state\nwithout knocking, eg a same-domain joiner.\n\nCan also only be updated by clients with a device in the JOINED state."
                },
                "gatewayAccess": {
                    "$ref": "GatewayAccess",
                    "description": "The interop gateway access information for the meeting space..\n\nA gateway access can be used when joining conferences from non-Google\nequipment through an interop gateway."
                },
                "meetingAlias": {
                    "description": "An optional alias for the meeting space. The alias can in some cases be\nresolved to the meeting space, similar to the meeting code. The limitation\nis that the user needs to be in the same meeting domain as the meeting\nspace. See go/thor-backend/meeting-alias for more details.",
                    "type": "string"
                },
                "meetingCode": {
                    "description": "A meeting code is a globally unique code which points to a meeting space.\nNote: Meeting codes may be regenerated, which will cause old meeting codes\nto become invalid.",
                    "type": "string"
                },
                "meetingSpaceId": {
                    "description": "A unique server-generated ID for the meeting space. This is the\nREST name of the meeting space resource and has the form\n`spaces/<id>`, where <id> is a sequence of characters in the\n[base64url set](https://tools.ietf.org/html/rfc4648#section-5),\nwithout any `=` characters.",
                    "type": "string"
                },
                "meetingUrl": {
                    "description": "A URL to identify and access the meeting space. Output only.",
                    "type": "string"
                },
                "moreJoinUrl": {
                    "description": "A URL that clients (e.g. Calendar) can use to show the web page with all\njoin methods available for this meeting space. This link is also used in\niOS universal links and Android intents, used for opening the \"More ways to\njoin\" view in the Thor mobile apps.\n\nExample: https://tel.meet/mee-ting-cod?pin=1234567891011\n\nHere, \"pin\" is the universal phone PIN. We include it explicitly to better\nsupport the offline case on the mobile.\n\nThis is set when the meeting space has either a universal PIN or an\ninterop PIN and clients who can show a \"more ways to join\" button should\nshow it whenever this field is set.",
                    "type": "string"
                },
                "phoneAccess": {
                    "description": "All regional phone access methods for this meeting space. Can be empty.",
                    "items": {
                        "$ref": "PhoneAccess"
                    },
                    "type": "array"
                },
                "universalPhoneAccess": {
                    "$ref": "UniversalPhoneAccess",
                    "description": "A universal phone access method for this meeting space. Can be unset."
                }
            },
            "type": "object"
        },
        "MeetingSpaceResource": {
            "description": "A full meeting space resource and its sync metadata.",
            "id": "MeetingSpaceResource",
            "properties": {
                "space": {
                    "$ref": "MeetingSpace",
                    "description": "The meeting space resource."
                },
                "syncMetadata": {
                    "$ref": "SyncMetadata",
                    "description": "Sync metadata representing the returned version of the resource."
                }
            },
            "type": "object"
        },
        "MessagesCollection": {
            "description": "A full message collection and its sync metadata.",
            "id": "MessagesCollection",
            "properties": {
                "messages": {
                    "description": "The full list of resources in the messages collection.",
                    "items": {
                        "$ref": "MeetingMessage"
                    },
                    "type": "array"
                },
                "syncMetadata": {
                    "$ref": "SyncMetadata",
                    "description": "Sync metadata representing the returned version of the resource."
                }
            },
            "type": "object"
        },
        "MessagesRequest": {
            "description": "A request message for the messages collection.",
            "id": "MessagesRequest",
            "properties": {
                "syncMetadata": {
                    "$ref": "SyncMetadata",
                    "description": "Optionally set to a known version."
                }
            },
            "type": "object"
        },
        "MessagesResponse": {
            "description": "A response message for the messages collection.",
            "id": "MessagesResponse",
            "properties": {
                "full": {
                    "$ref": "MessagesCollection",
                    "description": "Populated if the collection was modified compared to the client version."
                },
                "unmodified": {
                    "$ref": "UnmodifiedResource",
                    "description": "Populated if the server collection is the same as the client provided\nversion."
                }
            },
            "type": "object"
        },
        "MuteRequest": {
            "description": "Remote devices can only request muting of other devices. It is up\nto the muted device to accept or reject the mute as described below.",
            "id": "MuteRequest",
            "properties": {
                "byMeetingDeviceId": {
                    "description": "The device resource name of the device that added the mute request.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PhoneAccess": {
            "description": "Phone access contains information required to dial into a conference using\na regional phone number and a PIN that is specific to that phone number.",
            "id": "PhoneAccess",
            "properties": {
                "languageCode": {
                    "description": "The BCP 47/LDML language code for the language associated with this phone\naccess. To be parsed by the i18n LanguageCode utility. Examples: \"es-419\"\nfor Latin American Spanish, \"fr-CA\" for Canadian French.",
                    "type": "string"
                },
                "phoneNumber": {
                    "description": "The phone number to dial for this meeting space. The phone number will be\nE.164 formatted full phone number with a leading '+' character.",
                    "type": "string"
                },
                "pin": {
                    "description": "The PIN that users must enter after dialing the given number. The PIN\nconsists of only decimal digits and the length may vary.",
                    "type": "string"
                },
                "regionCode": {
                    "description": "The CLDR/ISO 3166 region code for the country associated with this phone\naccess. To be parsed by the i18n RegionCode utility. Example: \"SE\" for\nSweden.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Presenter": {
            "description": "Presenter contains information about which device is currently presenting\nas well as which device requested the presenter to be set.",
            "id": "Presenter",
            "properties": {
                "byDeviceId": {
                    "description": "The device resource name of the device which requested the current\npresenter to be set. This field can not be modified by clients.",
                    "type": "string"
                },
                "presenterDeviceId": {
                    "description": "The device resource name of the currently presenting device.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PstnInfo": {
            "description": "PSTN-related information.",
            "id": "PstnInfo",
            "properties": {
                "endCallReason": {
                    "description": "The end call reason of the PSTN call for this device.",
                    "enum": [
                        "END_CALL_REASON_UNSPECIFIED",
                        "USER_ENDED",
                        "CALLER_ENDED",
                        "BLOCKED",
                        "BUSY",
                        "DECLINE",
                        "UNKNOWN",
                        "CONNECTIVITY_LOST",
                        "FAILOVER_FAILED",
                        "PAYMENT_REQUIRED",
                        "KICKED",
                        "TPAPI_ERROR",
                        "ALONE_TIMEOUT",
                        "OUT_OF_QUOTA",
                        "NO_LICENSE",
                        "NUMBER_NOT_ALLOWED",
                        "PSTN_PAIRING_ENDED",
                        "PSTN_INITIATE_FAILED"
                    ],
                    "enumDescriptions": [
                        "No end call reason specified when device is removed.",
                        "The call was ended by the phone user (caller in PSTN-in or callee in\nPSTN-out).",
                        "The call was ended by the caller in a PSTN-out call.",
                        "The call was blocked due to policy constraints (PSTN-out only), e.g.\nabuse or account delinquency",
                        "The callee was busy (PSTN-out only).",
                        "The callee declined (PSTN-out only).",
                        "Unknown reasons or errors.",
                        "The media channel unexpectedly died.",
                        "Tinkerbell failover (handover) failed.",
                        "The caller needs to buy more GV credits in order to make the call\n(PSTN-out only).",
                        "The phone user was kicked out of the conference by another user.",
                        "Unknown TPAPI error",
                        "The phone user was removed because no one else joined the conference\nwithin the deadline.",
                        "The customer has run out of Google Voice quota.",
                        "The user does not have a Google Voice enterprise license.",
                        "The PSTN-out number being called is not allowed, for example because\nit is a premium-rate number.",
                        "The PSTN device was kicked by the video device it was paired with.",
                        "The call could not be started due to a problem on the telephony/carrier\nside."
                    ],
                    "type": "string"
                },
                "mediaRouterShard": {
                    "description": "If non-empty, then the given media router shard should be\nused for the PSTN-out call.\nExample valid values: \"dev\", \"staging\", \"preprod\", \"prod\".\nOther values will be ignored by the media backend.\nThis is write-only - it is used by the client to communicate\nthe value of its \"media_router\" URL parameter to control the\nmedia router shard used for a PSTN-out call.",
                    "type": "string"
                },
                "pairedVideoDeviceId": {
                    "description": "The ID of the video device this PSTN device is paired with.\n\nIn the request to start an outbound paired PSTN call, the initiating\nclient sets this field to be its own REST ID.\n\nFor PSTN-in, the backend sets this field to the ID of the meeting device\nthe phone is paired with.",
                    "type": "string"
                },
                "phoneNumber": {
                    "description": "The phone number in E.164 format.\n\nIn the request for starting an outbound call, this is provided by the\ninitiating client and is used in the server as the phone number to dial.\n\nIn responses or push notifications from server, this will only be visible\nfor outbound calls when the receiving device is the creator of the PSTN\ndevice (as indicated by the created_by field). For paired inbound calls,\nthis will only be visible when the receiving device is the video device\nthis PSTN device is paired with. In other cases this field will be empty.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RecordingAck": {
            "description": "This message contains the acknowledgement the device sends after it\nreceives the recording status update. The server side would start recording\nonly after it gathers acknowledgments from all devices.",
            "id": "RecordingAck",
            "properties": {
                "ackStatus": {
                    "description": "ACK status. Changed when server requests or client ACKs. If the value is\nACK_STATUS_REQUESTED, the client needs to ack with this field set to\nACK_STATUS_ACKED_FOR_<ack_type>.",
                    "enum": [
                        "ACK_STATUS_UNSPECIFIED",
                        "ACK_STATUS_REQUESTED",
                        "ACK_STATUS_ACKED",
                        "ACK_STATUS_ACKED_FOR_RECORDING",
                        "ACK_STATUS_ACKED_FOR_BROADCAST",
                        "ACK_STATUS_ACKED_FOR_PUBLIC_BROADCAST",
                        "ACK_STATUS_ACKED_FOR_RECORDING_WITH_TRAINING_ENABLED"
                    ],
                    "enumDescriptions": [
                        "Default value. Not used.",
                        "The server is requesting the client to ACK. Only set by the server\nin device creation, or blocked from join.",
                        "Deprecated. The client has ACKed. Set by client.",
                        "The client has ACKed that a recording is active. Set by client.",
                        "The client has ACKed that a broadcast is active. Set by client.",
                        "The client has ACKed that a public broadcast is active. Set by client.",
                        "The client has ACKed that the recording may be used for training. Set\nby client."
                    ],
                    "type": "string"
                },
                "applicationType": {
                    "description": "Application type that needs to be ACKed.\nOnly set by server along with ACK_REQUESTED in device creation or blocked\nfrom join.",
                    "enum": [
                        "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
                        "RECORDING",
                        "GLIVE_STREAM",
                        "BROADCAST"
                    ],
                    "enumDescriptions": [
                        "This is never used.",
                        "A meeting recording saved to a video file in Google Drive.",
                        "A *Google Live* managed stream. See go/thor-managed-streaming.",
                        "A meeting broadcast. See go/thor-streaming-prd."
                    ],
                    "type": "string"
                },
                "recordingId": {
                    "description": "ID of the streaming session.",
                    "type": "string"
                },
                "trainingEnabled": {
                    "description": "When true, this recording will be used for training. Clients should\nupdate this recording ack to\nACK_STATUS_ACKED_FOR_RECORDING_WITH_TRAINING_ENABLED once recording and\ntraining notifications have been displayed.",
                    "type": "boolean"
                },
                "viewerAccessPolicy": {
                    "description": "The policy that controls who can view the broadcast. This setting is only\nfor broadcast session.",
                    "enum": [
                        "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
                        "ORGANIZATION",
                        "PUBLIC"
                    ],
                    "enumDescriptions": [
                        "Used only when broadcast is not enabled, or an unknown enum value is used.",
                        "Only authenticated Google accounts belonging to the same organization\nas the meeting organizer can access the broadcast.",
                        "Anyone with the broadcast view URL can access the broadcast."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RecordingEvent": {
            "description": "A recording event is something that happens to the recording in a\nconference.",
            "id": "RecordingEvent",
            "properties": {
                "deviceId": {
                    "description": "The initiator of the latest event of the recording. It will be set for\nall user events (`type` is 100-199) and unset for all server events\n(`type` is 200-299).",
                    "type": "string"
                },
                "type": {
                    "description": "The type of event.",
                    "enum": [
                        "RECORDING_EVENT_UNSPECIFIED",
                        "USER_ACTION",
                        "STARTED_BY_USER",
                        "STOPPED_BY_USER",
                        "CANCELLED_BY_USER",
                        "CANCELLED_INITIALIZATION_FAILED",
                        "CANCELLED_INITIATOR_LEFT",
                        "ACTIVE_ABOUT_TO_STOP_TOO_LONG",
                        "STOPPED_TOO_LONG",
                        "STOPPED_ALL_DEVICES_LEFT",
                        "STOPPED_INTERNAL_FAILURES"
                    ],
                    "enumDescriptions": [
                        "This is never used.",
                        "Deprecated, use detailed user actions instead.",
                        "Recording was started or is being started by a user.",
                        "Recording was stopped by a user.",
                        "Recording was cancelled by a user.",
                        "Recording was cancelled by the server because of a failure during\nrecording initialization.",
                        "Recording was cancelled by the server because the recording initiator\nleft the conference during initialization. When the initiator leaves\nafter the recording is started, no event is triggered.",
                        "Recording is about to be stopped by the server because the recording\nis about to reach the maximum duration.",
                        "Recording was stopped because the recording reached the maximum\nduration.",
                        "Recording was stopped because there were no devices left in the\nconference.",
                        "Recording was stopped because of an internal error."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RecordingInfo": {
            "description": "Information about recording in the current conference.\nStreamingSessionInfo is the replacement of this which can represent more\napplication type.",
            "id": "RecordingInfo",
            "properties": {
                "latestRecordingEvent": {
                    "$ref": "RecordingEvent",
                    "description": "The latest recording event. This can be used by clients to help explain\nwhat is going on, why recording stopped, etc. This will always be set if\nthere is or was an active recording, which means there can be latest\nevent when recording is INACTIVE."
                },
                "ownerDisplayName": {
                    "description": "The display name of the owner of the recording output. Email\nnotifications about uploaded recordings will also be sent to this owner.",
                    "type": "string"
                },
                "producerDeviceId": {
                    "description": "The device resource name of the producer device for the currently active\nrecording. Note that, after the producer drops/leaves the conference,\nthis field will be cleaned up by the server after a delay.",
                    "type": "string"
                },
                "recordingApplicationType": {
                    "description": "The application type of the current active recording.\n`RECORDING_APPLICATION_TYPE_UNSPECIFIED` if `recording_status` is\ninactive.",
                    "enum": [
                        "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
                        "RECORDING",
                        "GLIVE_STREAM",
                        "BROADCAST"
                    ],
                    "enumDescriptions": [
                        "This is never used.",
                        "A meeting recording saved to a video file in Google Drive.",
                        "A *Google Live* managed stream. See go/thor-managed-streaming.",
                        "A meeting broadcast. See go/thor-streaming-prd."
                    ],
                    "type": "string"
                },
                "recordingId": {
                    "description": "An identifier for the current recording, if any. This is\nreturned whenever recording_status is either\n`RECORDING_STARTING` or `RECORDING_STARTED`.",
                    "type": "string"
                },
                "recordingStatus": {
                    "description": "The current status of the recording. This can be used by\nclients to show a recording dot or similar to indicated to the\nuser that a recording is taking place.",
                    "enum": [
                        "RECORDING_UNSPECIFIED",
                        "RECORDING_INACTIVE",
                        "RECORDING_STARTING",
                        "RECORDING_STARTED"
                    ],
                    "enumDescriptions": [
                        "This value is never used.",
                        "The conference is not being recorded. This can mean either that\nno recording has been started, or that a previous recording\nhas stopped.",
                        "Recording is about to begin. The status will be updated to\nRECORDING_STARTED when the recording actually starts, which\nhappens when all the backend plumbing is set up.",
                        "The recording is started. Any media sent to the conference\nmay be included in the resulting recording."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RecordingPrivilege": {
            "description": "This message contains control type the device has over a recording. Devices\nin moderator role are granted control over the recording. Always set by\nserver.",
            "id": "RecordingPrivilege",
            "properties": {
                "controlType": {
                    "description": "Control type the device has over the recording. Set by the server.",
                    "enum": [
                        "CONTROL_UNSPECIFIED",
                        "NO_CONTROL",
                        "FULL_CONTROL"
                    ],
                    "enumDescriptions": [
                        "Control type is not set.",
                        "This client has no control on the recording.",
                        "This client has full control on the recording."
                    ],
                    "type": "string"
                },
                "recordingId": {
                    "description": "ID of the recording.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RegionalConfig": {
            "description": "Configuration for one region that defines what universal phone numbers to use\nfor that region.",
            "id": "RegionalConfig",
            "properties": {
                "additionalPhoneNumbers": {
                    "description": "See phone_numbers.",
                    "items": {
                        "$ref": "UniversalPstnNumberForRegion"
                    },
                    "type": "array"
                },
                "fallbackRegion": {
                    "description": "The region (typically country) to fall back to as per regional\ndefault logic if no PSTN numbers are available for the current region.",
                    "type": "string"
                },
                "phoneNumbers": {
                    "description": "This holds the PSTN numbers to be used with universal pin numbers for\nthis region, if any. There is no guarantee that there will be only one\nper language_code.\nThe phone_numbers and additional_phone_numbers fields together\nhold the per-number configuration. They should always be\nconsidered in union. Older clients that do not understand\nDialInNumberClass will only read the phone_numbers field, but for\nup-to-date clients there is no distinction between the two sets\nof number configurations.",
                    "items": {
                        "$ref": "UniversalPstnNumberForRegion"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ReportViewerEventRequest": {
            "description": "Used by clients to report broadcast viewer events.",
            "id": "ReportViewerEventRequest",
            "properties": {
                "broadcastSessionToken": {
                    "description": "The token provided for the BroadcastViewSession in which this event\nhappens.",
                    "type": "string"
                },
                "event": {
                    "description": "Viewer event type that needs to be reported.",
                    "enum": [
                        "VIEWER_EVENT_UNSPECIFIED",
                        "VIEWER_START",
                        "VIEWER_LEAVE"
                    ],
                    "enumDescriptions": [
                        "This value is never used.",
                        "Report when a viewer starts to watch a broadcast session on the view\npage.",
                        "Report when a viewer leaves the broadcast view page."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ReportViewerEventResponse": {
            "description": "The response to a ReportViewerEvent request.",
            "id": "ReportViewerEventResponse",
            "properties": {},
            "type": "object"
        },
        "ResolveForHangoutsChatRequest": {
            "description": "Used by clients to find a meeting space for a Hangouts Chat group.",
            "id": "ResolveForHangoutsChatRequest",
            "properties": {
                "hangoutsChatGroupId": {
                    "description": "The id for the Hangouts Chat group.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResolveMeetingRoomRequest": {
            "description": "A request to look up a meeting room using the associated CfM device ID.",
            "id": "ResolveMeetingRoomRequest",
            "properties": {
                "cfmDeviceId": {
                    "description": "Required. The device ID of a CfM device.",
                    "type": "string"
                },
                "meetingSpaceId": {
                    "description": "Optional. The meeting space that the user wants to join from the meeting\nroom found by this query. It is the resource name of the meeting space in\nthe MeetingSpaceService. If provided, the server may use it to find the\nmost appropriate meeting room.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResolveMeetingSpaceRequest": {
            "description": "Used by clients to find a meeting space given a meeting code. Exactly one of\n`meeting_code`, `meeting_url`, or `gateway_pin` should be specified in the\nrequest.",
            "id": "ResolveMeetingSpaceRequest",
            "properties": {
                "creatorRegionCode": {
                    "description": "The CLDR/ISO 3166 region code for the country that the meeting creator is\nin. To be parsed by the i18n RegionCode utility. Example: \"SE\" for Sweden.\nUsed for allocating a phone number for the given country. Only used when\ncreating a MeetingSpace for a nonexistent #alias.",
                    "type": "string"
                },
                "deviceHint": {
                    "$ref": "DasherDeviceHint",
                    "description": "Hint for which device is sending the request. This will be validated\nagainst the authenticated user. Required for HotRods."
                },
                "doNotTreatAsAlias": {
                    "description": "Clients/callers that do not want the 'meeting_code'/'meeting_url' field\nvalue to be treated as an alias should set this value to true.\n\nAn example use case where this would be set to true would be that we want\nmeet.google.com/<meet-code> to only resolve meeting codes (as supporting\nmeet.google.com/<alias> would result in all of the top level paths being\ntaken and not usable - prohibiting a meet.google.com/help page in the\nfuture for example).\n\nThe default is false which means that 'meeting_code'/'meeting_url' field\nvalue if is not an existing meeting code, will be treated as an alias.",
                    "type": "boolean"
                },
                "meetingCode": {
                    "description": "The meeting code to resolve. This will be used both to match against the\nmeeting code and the meeting alias, depending on the form of the string.\n\nA client that accepts user input should use this field to send the user\ninput unmodified to be resolved by the server.\n\nIf the code starts with a hash character (#), the code is interpreted as a\nmeeting alias, and meeting spaces belonging to the same organization as the\nrequester are searched. If no meeting space was found, a new one is\ncreated automatically, as if the requester had called CreateMeetingSpace\ninstead.\n\nOtherwise, the code is normalized to a canonical form and matched globally\nagainst the meeting code in all meeting spaces. If there was no match, the\nresponse will be 404 (not found).\n\nWhen resolving an alias, this request must carry the credentials of a user\nthat is enabled to use aliases. If the alias is not found, the user must\nalso be enabled to create meeting spaces.\n\nTODO (b/110847195) Update the description here for #less alias as well as\nthe do_not_treat_as_alias flag.",
                    "type": "string"
                },
                "meetingUrl": {
                    "description": "An URL that identifies the meeting. It will contain the same information as\nthe `meeting_code` field, but encoded in a URL.\n\nA client that accepts URLs should use this field to pass in the original\nURL, and let the server decode it, rather than trying to extract\ninformation to put in the `meeting_code` field.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ScheduledEvent": {
            "description": "Information for a scheduled calendar event.",
            "id": "ScheduledEvent",
            "properties": {
                "end": {
                    "description": "The end time of the event (exclusive) in UTC. For an all-day event, it is\nthe next midnight of the last day in the event (only the date part matters\nin this case).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "endOffsetMs": {
                    "description": "Offset from UTC in millis for converting end time to the calendar's\ntimezone. Set to 0 if it's an all-day event.",
                    "format": "int32",
                    "type": "integer"
                },
                "eventTitle": {
                    "description": "Title of the event from calendar.",
                    "type": "string"
                },
                "hangoutLink": {
                    "description": "The link for a Classic Hangout conference.",
                    "type": "string"
                },
                "isAllDayEvent": {
                    "description": "Whether it is an all-day event.",
                    "type": "boolean"
                },
                "meetingSpace": {
                    "$ref": "MeetingSpace",
                    "description": "The meeting space for a Hangout Meet conference."
                },
                "start": {
                    "description": "The start time of the event (inclusive) in UTC. For an all-day event, it is\nthe midnight of the first day (only the date part matters in this case).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "startOffsetMs": {
                    "description": "Offset from UTC in millis for converting start time to the calendar's\ntimezone. Set to 0 if it's an all-day event.",
                    "format": "int32",
                    "type": "integer"
                },
                "streamUri": {
                    "description": "URL for livestream viewing.",
                    "type": "string"
                },
                "visibility": {
                    "description": "Visibility of the event.",
                    "enum": [
                        "VISIBILITY_UNSPECIFIED",
                        "DEFAULT",
                        "PUBLIC",
                        "PRIVATE",
                        "CONFIDENTIAL",
                        "SECRET",
                        "SHADOW"
                    ],
                    "enumDescriptions": [
                        "This should be never used.",
                        "Uses the default visibility for events on the calendar.",
                        "The event is public and event details are visible to all readers.",
                        "The event is private and only event attendees may view event details.",
                        "The event is private. This value is provided for compatibility reasons.",
                        "See go/secret-events.",
                        "See http://shortn/_KjOApVbc6y."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SendDtmfRequest": {
            "description": "Request to send DTMF code to the recipient device.",
            "id": "SendDtmfRequest",
            "properties": {
                "dtmf": {
                    "description": "DTMF code to send.",
                    "enum": [
                        "DTMF_CODE_UNSPECIFIED",
                        "ZERO",
                        "ONE",
                        "TWO",
                        "THREE",
                        "FOUR",
                        "FIVE",
                        "SIX",
                        "SEVEN",
                        "EIGHT",
                        "NINE",
                        "ASTERISK",
                        "POUND",
                        "A",
                        "B",
                        "C",
                        "D"
                    ],
                    "enumDescriptions": [
                        "Never used.",
                        "DTMF zero key.",
                        "DTMF one key.",
                        "DTMF two key.",
                        "DTMF tree key.",
                        "DTMF four key.",
                        "DTMF five key.",
                        "DTMF six key.",
                        "DTMF seven key.",
                        "DTMF eight key.",
                        "DTMF nine key.",
                        "DTMF asterisk key.",
                        "DTMF octothorpe key.",
                        "DTMF A key.",
                        "DTMF B key.",
                        "DTMF C key.",
                        "DTMF D key."
                    ],
                    "type": "string"
                },
                "timestamp": {
                    "description": "The locally determined timestamp when sending the DTMF.\nWhen sending a sequence of DTMF requests, client needs to ensure the\ntimestamp in each request reflects the right order of the DTMF in the\nsequence. So if Tinkerbell receives duplicate or disordered requests, it\ncan use the timestamp to rebuild the original sequence. So note that:\n1. when retry a request, this should be the original timestamp when sending\n   the DTMF at first time, NOT the current time.\n2. if multiple requests are sent with the same timestamp, Tinkerbell will\n   dedup and only accept the first one it receives.\n3. the timestamp will not be used to compare with other timestamps, so\n   local time is fine.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SendDtmfResponse": {
            "description": "The response to a `SendDtmf` request.",
            "id": "SendDtmfResponse",
            "properties": {},
            "type": "object"
        },
        "SessionEvent": {
            "description": "A session event is something that happens to the streaming session in a\nconference.",
            "id": "SessionEvent",
            "properties": {
                "deviceId": {
                    "description": "The initiator of the latest event of the streaming session. It will be\nset for all user events (`type` is 100-199) and unset for all server\nevents(`type` is 200-299).",
                    "type": "string"
                },
                "type": {
                    "description": "The type of event.",
                    "enum": [
                        "EVENT_UNSPECIFIED",
                        "STARTED_BY_USER",
                        "STOPPED_BY_USER",
                        "CANCELLED_BY_USER",
                        "CANCELLED_INITIALIZATION_FAILED",
                        "CANCELLED_INITIATOR_LEFT",
                        "ACTIVE_ABOUT_TO_STOP_TOO_LONG",
                        "STOPPED_TOO_LONG",
                        "STOPPED_ALL_DEVICES_LEFT",
                        "STOPPED_INTERNAL_FAILURES"
                    ],
                    "enumDescriptions": [
                        "This is never used.",
                        "Streaming session was started or is being started by a user.",
                        "Streaming session was stopped by a user.",
                        "Streaming session was cancelled by a user.",
                        "Streaming session was cancelled by the server because of a failure\nduring session initialization.",
                        "Streaming session was cancelled by the server because the session\ninitiator left the conference during initialization. When the\ninitiator leaves after the session is started, no event is triggered.",
                        "Streaming session is about to be stopped by the server because the\nsession is about to reach the maximum duration.",
                        "Streaming session was stopped because the session reached the maximum\nduration.",
                        "Streaming session was stopped because there were no devices left in\nthe conference.",
                        "Streaming session was stopped because of an internal error."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SpaceRequest": {
            "description": "A request message for the meeting space resource.",
            "id": "SpaceRequest",
            "properties": {
                "syncMetadata": {
                    "$ref": "SyncMetadata",
                    "description": "Optionally set to a known version."
                }
            },
            "type": "object"
        },
        "SpaceResponse": {
            "description": "A response message for the meeting space resource.",
            "id": "SpaceResponse",
            "properties": {
                "full": {
                    "$ref": "MeetingSpaceResource",
                    "description": "Populated if the resource was modified compared to the client version."
                },
                "unmodified": {
                    "$ref": "UnmodifiedResource",
                    "description": "Populated if the server resource is the same as the client provided\nversion."
                }
            },
            "type": "object"
        },
        "StreamingSessionInfo": {
            "description": "Information about a streaming session in conference.",
            "id": "StreamingSessionInfo",
            "properties": {
                "applicationType": {
                    "description": "The application type of the current streaming session.",
                    "enum": [
                        "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
                        "RECORDING",
                        "GLIVE_STREAM",
                        "BROADCAST"
                    ],
                    "enumDescriptions": [
                        "This is never used.",
                        "A meeting recording saved to a video file in Google Drive.",
                        "A *Google Live* managed stream. See go/thor-managed-streaming.",
                        "A meeting broadcast. See go/thor-streaming-prd."
                    ],
                    "type": "string"
                },
                "latestSessionEvent": {
                    "$ref": "SessionEvent",
                    "description": "The latest streaming session event. This can be used by clients to help\nexplain what is going on, why recording stopped, etc. This will always be\nset to a valid event and consistent with the status. It can be set when\ncurrent session is inactive to indicate latest event that makes current\nsession to become inactive."
                },
                "ownerDisplayName": {
                    "description": "The display name of the owner of the recording output.\nIt\u2019s only set when there will be uploaded recordings.\nCurrently, it's only set when application type is RECORDING or\nGLIVE_STREAM.",
                    "type": "string"
                },
                "sessionId": {
                    "description": "This is the REST name and unique identifier of this streaming session and\nhas the form `spaces/<id>/recordings/<id>` This is returned whenever\nstatus is either `STARTING` or `STARTED`.",
                    "type": "string"
                },
                "status": {
                    "description": "The current status of this streaming session. This can be used by clients\nto show session status indicator and/or notification.",
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "INACTIVE",
                        "STARTING",
                        "LIVE"
                    ],
                    "enumDescriptions": [
                        "This value is never used.",
                        "The streaming session is inactive. This means either it's not\nstarted yet or it\u2019s already stopped.",
                        "The streaming session is about to begin. The status will be updated to\nLIVE when the streaming session actually starts, which happens when\nall the backend plumbing is set up.",
                        "The streaming session is live. Any media sent to the conference may\nbe included in the resulting recording/broadcast."
                    ],
                    "type": "string"
                },
                "trainingEnabled": {
                    "description": "When true, this recording may be used for training new transcription\nmodels.",
                    "type": "boolean"
                },
                "viewerAccessPolicy": {
                    "description": "The policy that controls who can view the broadcast. This setting applies\nfor broadcast session.",
                    "enum": [
                        "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
                        "ORGANIZATION",
                        "PUBLIC"
                    ],
                    "enumDescriptions": [
                        "Used only when broadcast is not enabled, or an unknown enum value is used.",
                        "Only authenticated Google accounts belonging to the same organization\nas the meeting organizer can access the broadcast.",
                        "Anyone with the broadcast view URL can access the broadcast."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SyncMeetingSpaceCollectionsRequest": {
            "description": "A request message sent by clients for getting a meeting space resource\nand certain subcollections.",
            "id": "SyncMeetingSpaceCollectionsRequest",
            "properties": {
                "devicesRequest": {
                    "$ref": "DevicesRequest",
                    "description": "Optional request of the devices collection."
                },
                "messagesRequest": {
                    "$ref": "MessagesRequest",
                    "description": "Optional request of the messages collection."
                },
                "spaceRequest": {
                    "$ref": "SpaceRequest",
                    "description": "Optional request of the meeting space resource."
                }
            },
            "type": "object"
        },
        "SyncMeetingSpaceCollectionsResponse": {
            "description": "A response message for the SyncMeetingSpaceCollections RPC.",
            "id": "SyncMeetingSpaceCollectionsResponse",
            "properties": {
                "devices": {
                    "$ref": "DevicesResponse",
                    "description": "Response for the devices request."
                },
                "messages": {
                    "$ref": "MessagesResponse",
                    "description": "Response for the messages request."
                },
                "space": {
                    "$ref": "SpaceResponse",
                    "description": "Response for the space request."
                }
            },
            "type": "object"
        },
        "SyncMetadata": {
            "description": "A message containing information required for clients to sync their view of\nmeeting collections with the server.",
            "id": "SyncMetadata",
            "properties": {
                "version": {
                    "description": "The version of the collection. This can be used to get reliability of push\nnotifications. See http://go/thorpush and http://go/hangoutpushv2 for\ndesign documents.\n\nThe server maintains the current collection version and clients\nmaintain a local collection as well with version (L). When an update\noccurs, the server will send a push notification with the new version (S)\nto all clients. These pushes are unreliable so clients need to check the\nversion in the push notification to check if they're out of sync.\n  If S = L then drop the update\n  Else if S = L + 1 the client can directly apply the update to their local\n     collection\n  Else, the client has gotten out of sync and will need to re-sync with\n     the server by making a request for the full current version of the\n     collection.\nThe version number will always be > 0",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UniversalPhoneAccess": {
            "description": "Universal phone access contains information required to dial into a\nconference using one of a static list of phone numbers and a universal\nPIN. The phone number list is distributed separately.",
            "id": "UniversalPhoneAccess",
            "properties": {
                "pin": {
                    "description": "The PIN that users must enter after dialing a universal number. The pin\nconsists of only decimal digits and the length may vary, though\nit generally is longer than a PhoneAccess.pin.",
                    "type": "string"
                },
                "pstnInfoUrl": {
                    "description": "This field has the same contents as the MeetingSpace.more_join_url\nfield, and is included for compatibility reasons. Clients should use the\nother field instead.\n\nThis field is deprecated and will be removed.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UniversalPstnNumber": {
            "description": "Contains information about a single international PSTN number for access\nwith universal pins.",
            "id": "UniversalPstnNumber",
            "properties": {
                "availability": {
                    "description": "The availability level for this number.",
                    "enum": [
                        "AVAILABILITY_UNSPECIFIED",
                        "NONE",
                        "PSTN_FISHFOOD",
                        "PSTN_DOGFOOD",
                        "PUBLIC"
                    ],
                    "enumDescriptions": [
                        "Never used.",
                        "Do not show this number to anyone.",
                        "User should be in a fishfood experiment in order to see the number.",
                        "User should be in a fishfood or a dogfood experiment in order to see the\nnumber.",
                        "Show the number to everyone."
                    ],
                    "type": "string"
                },
                "e164": {
                    "description": "The E164-formatted phone number.",
                    "type": "string"
                },
                "languageCode": {
                    "description": "The language used in voice prompts on this number, per BCP 47/LDML.",
                    "type": "string"
                },
                "regionCode": {
                    "description": "The region (typically country) for which this number is valid,\nper ISO 3166-1 alpha-2.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UniversalPstnNumberForRegion": {
            "description": "One phone number with information about when and where it should be used.",
            "id": "UniversalPstnNumberForRegion",
            "properties": {
                "availability": {
                    "description": "The availability level for this number.",
                    "enum": [
                        "AVAILABILITY_UNSPECIFIED",
                        "NONE",
                        "PSTN_FISHFOOD",
                        "PSTN_DOGFOOD",
                        "PUBLIC"
                    ],
                    "enumDescriptions": [
                        "Never used.",
                        "Do not show this number to anyone.",
                        "User should be in a fishfood experiment in order to see the number.",
                        "User should be in a fishfood or a dogfood experiment in order to see the\nnumber.",
                        "Show the number to everyone."
                    ],
                    "type": "string"
                },
                "e164": {
                    "description": "The E164-formatted phone number.",
                    "type": "string"
                },
                "languageCode": {
                    "description": "The language used in voice prompts for this number, per BCP 47/LDML.",
                    "type": "string"
                },
                "numberClass": {
                    "description": "Phone number class for this number.",
                    "enum": [
                        "NUMBER_CLASS_UNSPECIFIED",
                        "LOW_COST",
                        "HIGH_COST",
                        "LEGACY"
                    ],
                    "enumDescriptions": [
                        "No number class has been specified.",
                        "The number has a low cost to receive calls on.",
                        "The number has a high cost to receive calls on.",
                        "Class for legacy numbers."
                    ],
                    "type": "string"
                },
                "subregionId": {
                    "description": "Really optional: any sub-national entity for which we may want to store a\nsub-pool of numbers, e.g. \"SWEDEN_STAGING\"\nAn empty string is interpreted as \"Default subregion\"",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnmodifiedResource": {
            "description": "Represents a resource or collection that was not modified compared to the\nsync metadate provided by the client.",
            "id": "UnmodifiedResource",
            "properties": {
                "syncMetadata": {
                    "$ref": "SyncMetadata",
                    "description": "The current version of the resource on the server."
                }
            },
            "type": "object"
        },
        "UnmuteRequest": {
            "description": "A request to remotely unmute a device.",
            "id": "UnmuteRequest",
            "properties": {
                "byMeetingDeviceId": {
                    "description": "The resource name of the device that added the unmute request.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "User": {
            "description": "A user account using a device to create a call. Used only in\n/v1/users/me response.",
            "id": "User",
            "properties": {
                "adminSendBandwidth": {
                    "description": "The send bandwidth restriction specified by domain admins for this user.",
                    "enum": [
                        "RESTRICTION_UNSPECIFIED",
                        "NO_RESTRICTION",
                        "VGA",
                        "AUDIO_ONLY"
                    ],
                    "enumDescriptions": [
                        "Not used.",
                        "No bandwidth restriction (the video will be in HD).",
                        "The video is restricted to VGA.",
                        "The camera will be off when joining each call.  If the user turns it on,\nthe video will be restricted to VGA."
                    ],
                    "type": "string"
                },
                "audioDscp": {
                    "description": "Desired prioritization of audio and metadata packets.",
                    "enum": [
                        "AUDIO_DEFAULT",
                        "AUDIO_HIGH"
                    ],
                    "enumDescriptions": [
                        "Default DSCP priority for audio",
                        "High DSCP priority for audio"
                    ],
                    "type": "string"
                },
                "avatarUrl": {
                    "description": "The URL of the avatar image used for meeting devices connected to\nthis user. For anonymous users, this will be different from the\nin-conference avatar if the user provides a display name when\njoining. Output only.\n\nThis is a FIFE URL (go/fife-urls) that points to a square 192\u00d7192\npixel image that is either a profile picture or an automatically\ngenerated image.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display name of the user account. Empty for an anonymous user.",
                    "type": "string"
                },
                "logUploadPolicy": {
                    "description": "Client log upload policy for this user.",
                    "enum": [
                        "NEVER",
                        "ALWAYS",
                        "CLIENT_DECIDES"
                    ],
                    "enumDescriptions": [
                        "This user should not upload client logs. Default value.",
                        "This user should always upload client logs.",
                        "Client may have a separate setting for uploading client logs."
                    ],
                    "type": "string"
                },
                "mayAccessDelve": {
                    "description": "True if the user is allowed to access delve media stats page.",
                    "type": "boolean"
                },
                "mayAccessDomainQualityDashboard": {
                    "description": "True if the user is allowed to access delve domain admin meeting quality\ndashboard.",
                    "type": "boolean"
                },
                "mayCreateMeetingDevice": {
                    "description": "True if the user is allowed to create a new meeting device using\nMeetingDeviceService.CreateMeetingDevice.",
                    "type": "boolean"
                },
                "mayCreateMeetingSpace": {
                    "description": "True if the user is allowed to create a new meeting space using\nMeetingSpaceService.CreateMeetingSpace.",
                    "type": "boolean"
                },
                "mayResolveMeetingSpaceByAlias": {
                    "description": "True if the user is allowed to resolve a meeting space by alias. If false,\nthere is no support for alias in the domain and so people can't join by\nalias. This setting reflects the behavior of ResolveMeetingSpace for that\nuser.",
                    "type": "boolean"
                },
                "maySendToRoom": {
                    "description": "True if the user is allowed to use the\nMeetingDeviceService.CreateAndPushMeetingDevice API to make a meeting room\ndevice join a conference, also known as flinging.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Resource name of the user. This will always be \"users/me\".",
                    "type": "string"
                },
                "organizationName": {
                    "description": "The name or description of the organization or domain that the user belongs\nto. The field will be empty if the user does not belong to an organization,\nor if the organization name could not be determined, possibly because of a\nbackend error.",
                    "type": "string"
                },
                "videoDscp": {
                    "description": "Desired prioritization of video packets.",
                    "enum": [
                        "VIDEO_DEFAULT",
                        "VIDEO_HIGH",
                        "VIDEO_LOW"
                    ],
                    "enumDescriptions": [
                        "Default DSCP priority for video",
                        "High DSCP priority for video",
                        "Low DSCP priority for video"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VideoFeed": {
            "description": "Represents a single video feed on UI and how the video stream for that\nfeed is decided.",
            "id": "VideoFeed",
            "properties": {
                "algorithmType": {
                    "description": "The algorithm to be used for this feed.",
                    "enum": [
                        "ALGORITHM_TYPE_UNSPECIFIED",
                        "AUTO_SPEAKER_SWITCH",
                        "CLIENT_SELECTED"
                    ],
                    "enumDescriptions": [
                        "Default value. Not used.",
                        "This feed is selected automatically by the server (\nbased on the current speaker).",
                        "Use the client selected (device_id) to populate the feed."
                    ],
                    "type": "string"
                },
                "deviceId": {
                    "description": "The device resource name of the device that populate the feed.\nShould be non-empty if and only if type == CLIENT_SELECTED.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VideoLayout": {
            "description": "The layout of video feeds for the recording.",
            "id": "VideoLayout",
            "properties": {
                "videoFeeds": {
                    "description": "The main video feeds in the layout.\n\nNote that this field does NOT include the video feeds in the film strip.\nFor now, we only have one main feed, which means there should be only one\nitem in this repeated field.",
                    "items": {
                        "$ref": "VideoFeed"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Meetings Sunday API",
    "version": "v1",
    "version_module": true
}