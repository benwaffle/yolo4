{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/userinfo.email": {
                    "description": "View your email address"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://dev-workfront-pa.sandbox.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Workfront",
    "description": "Internal Google API for accessing Workfront, i.e., an external project management tool.",
    "discoveryVersion": "v1",
    "documentationLink": "http://g3doc/corp/plan/g3doc/esb/workfront",
    "fullyEncodeReservedExpansion": true,
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "dev_workfront_pa_sandbox:v1",
    "kind": "discovery#restDescription",
    "name": "dev_workfront_pa_sandbox",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "bulkCreate": {
            "methods": {
                "parameterOptions": {
                    "description": "Create a set of new ParameterOptions.",
                    "flatPath": "v1/bulkCreate/parameterOptions",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.bulkCreate.parameterOptions",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/bulkCreate/parameterOptions",
                    "request": {
                        "$ref": "BulkCreateParameterOptionsRequest"
                    },
                    "response": {
                        "$ref": "BulkCreateParameterOptionsResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "tasks": {
                    "description": "Create a set of new Tasks.",
                    "flatPath": "v1/bulkCreate/tasks",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.bulkCreate.tasks",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/bulkCreate/tasks",
                    "request": {
                        "$ref": "BulkCreateTasksRequest"
                    },
                    "response": {
                        "$ref": "BulkCreateTasksResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "bulkUpdate": {
            "methods": {
                "parameterOptions": {
                    "description": "Update a set of existing ParameterOptions.",
                    "flatPath": "v1/bulkUpdate/parameterOptions",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.bulkUpdate.parameterOptions",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/bulkUpdate/parameterOptions",
                    "request": {
                        "$ref": "BulkUpdateParameterOptionsRequest"
                    },
                    "response": {
                        "$ref": "BulkUpdateParameterOptionsResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "tasks": {
                    "description": "Update a set of existing Tasks.",
                    "flatPath": "v1/bulkUpdate/tasks",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.bulkUpdate.tasks",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/bulkUpdate/tasks",
                    "request": {
                        "$ref": "BulkUpdateTasksRequest"
                    },
                    "response": {
                        "$ref": "BulkUpdateTasksResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "count": {
            "methods": {
                "users": {
                    "description": "Counts the Users for a specified SearchQuery.",
                    "flatPath": "v1/count/users",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.count.users",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/count/users",
                    "request": {
                        "$ref": "CountUsersRequest"
                    },
                    "response": {
                        "$ref": "CountUsersResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "groups": {
            "methods": {
                "create": {
                    "description": "Create a new Group.",
                    "flatPath": "v1/groups",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.groups.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/groups",
                    "request": {
                        "$ref": "CreateGroupRequest"
                    },
                    "response": {
                        "$ref": "CreateGroupResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Group.",
                    "flatPath": "v1/groups/{groupsId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.groups.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Group as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/groups/{+id}",
                    "response": {
                        "$ref": "DeleteGroupResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "issues": {
            "methods": {
                "create": {
                    "description": "Create a new Issue.",
                    "flatPath": "v1/issues",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.issues.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/issues",
                    "request": {
                        "$ref": "CreateIssueRequest"
                    },
                    "response": {
                        "$ref": "CreateIssueResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Issue.",
                    "flatPath": "v1/issues/{issuesId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.issues.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Issue as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/issues/{+id}",
                    "response": {
                        "$ref": "DeleteIssueResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a Issue.",
                    "flatPath": "v1/issues/{issuesId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.issues.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying Issue fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a Issue as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/issues/{+id}",
                    "response": {
                        "$ref": "GetIssueResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "notes": {
            "methods": {
                "create": {
                    "description": "Create a new Note.",
                    "flatPath": "v1/notes",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.notes.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/notes",
                    "request": {
                        "$ref": "CreateNoteRequest"
                    },
                    "response": {
                        "$ref": "CreateNoteResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Note.",
                    "flatPath": "v1/notes/{notesId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.notes.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Note as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/notes/{+id}",
                    "response": {
                        "$ref": "DeleteNoteResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a Note.",
                    "flatPath": "v1/notes/{notesId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.notes.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying Note fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a Note as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/notes/{+id}",
                    "response": {
                        "$ref": "GetNoteResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "projects": {
            "methods": {
                "create": {
                    "description": "Create a new Project.",
                    "flatPath": "v1/projects",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.projects.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/projects",
                    "request": {
                        "$ref": "CreateProjectRequest"
                    },
                    "response": {
                        "$ref": "CreateProjectResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Project.",
                    "flatPath": "v1/projects/{projectsId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.projects.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Project as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/projects/{+id}",
                    "response": {
                        "$ref": "DeleteProjectResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a Project.",
                    "flatPath": "v1/projects/{projectsId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.projects.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying Project fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a Project as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/projects/{+id}",
                    "response": {
                        "$ref": "GetProjectResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "reservedTimes": {
            "methods": {
                "create": {
                    "description": "Create a new ReservedTime.",
                    "flatPath": "v1/reservedTimes",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.reservedTimes.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/reservedTimes",
                    "request": {
                        "$ref": "CreateReservedTimeRequest"
                    },
                    "response": {
                        "$ref": "CreateReservedTimeResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a ReservedTime.",
                    "flatPath": "v1/reservedTimes/{reservedTimesId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.reservedTimes.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a ReservedTime as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/reservedTimes/{+id}",
                    "response": {
                        "$ref": "DeleteReservedTimeResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a ReservedTime.",
                    "flatPath": "v1/reservedTimes/{reservedTimesId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.reservedTimes.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying ReservedTime fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a ReservedTime as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/reservedTimes/{+id}",
                    "response": {
                        "$ref": "GetReservedTimeResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "schedules": {
            "methods": {
                "create": {
                    "description": "Create a new Schedule.",
                    "flatPath": "v1/schedules",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.schedules.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/schedules",
                    "request": {
                        "$ref": "CreateScheduleRequest"
                    },
                    "response": {
                        "$ref": "CreateScheduleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Schedule.",
                    "flatPath": "v1/schedules/{schedulesId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.schedules.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Schedule as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/schedules/{+id}",
                    "response": {
                        "$ref": "DeleteScheduleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a Schedule.",
                    "flatPath": "v1/schedules/{schedulesId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.schedules.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying Schedule fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a Schedule as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/schedules/{+id}",
                    "response": {
                        "$ref": "GetScheduleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "search": {
            "methods": {
                "baselineTasks": {
                    "description": "Search for BaselineTasks.",
                    "flatPath": "v1/search/baselineTasks",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.baselineTasks",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/baselineTasks",
                    "request": {
                        "$ref": "SearchBaselineTaskRequest"
                    },
                    "response": {
                        "$ref": "SearchBaselineTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "baselines": {
                    "description": "Search for Baselines.",
                    "flatPath": "v1/search/baselines",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.baselines",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/baselines",
                    "request": {
                        "$ref": "SearchBaselineRequest"
                    },
                    "response": {
                        "$ref": "SearchBaselineResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "budgetedHours": {
                    "description": "Search for BudgetedHours.",
                    "flatPath": "v1/search/budgetedHours",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.budgetedHours",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/budgetedHours",
                    "request": {
                        "$ref": "SearchBudgetedHourRequest"
                    },
                    "response": {
                        "$ref": "SearchBudgetedHourResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "categories": {
                    "description": "Search for Categories.",
                    "flatPath": "v1/search/categories",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.categories",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/categories",
                    "request": {
                        "$ref": "SearchCategoryRequest"
                    },
                    "response": {
                        "$ref": "SearchCategoryResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "groups": {
                    "description": "Search for Groups.",
                    "flatPath": "v1/search/groups",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.groups",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/groups",
                    "request": {
                        "$ref": "SearchGroupRequest"
                    },
                    "response": {
                        "$ref": "SearchGroupResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "issues": {
                    "description": "Search for Issues.",
                    "flatPath": "v1/search/issues",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.issues",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/issues",
                    "request": {
                        "$ref": "SearchIssueRequest"
                    },
                    "response": {
                        "$ref": "SearchIssueResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "jobRoles": {
                    "description": "Search for JobRoles.",
                    "flatPath": "v1/search/jobRoles",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.jobRoles",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/jobRoles",
                    "request": {
                        "$ref": "SearchJobRoleRequest"
                    },
                    "response": {
                        "$ref": "SearchJobRoleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "milestonePaths": {
                    "description": "Search for MilestonePaths.",
                    "flatPath": "v1/search/milestonePaths",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.milestonePaths",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/milestonePaths",
                    "request": {
                        "$ref": "SearchMilestonePathRequest"
                    },
                    "response": {
                        "$ref": "SearchMilestonePathResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "milestones": {
                    "description": "Search for Milestones.",
                    "flatPath": "v1/search/milestones",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.milestones",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/milestones",
                    "request": {
                        "$ref": "SearchMilestoneRequest"
                    },
                    "response": {
                        "$ref": "SearchMilestoneResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "notes": {
                    "description": "Search for Notes.",
                    "flatPath": "v1/search/notes",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.notes",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/notes",
                    "request": {
                        "$ref": "SearchNoteRequest"
                    },
                    "response": {
                        "$ref": "SearchNoteResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "parameters": {
                    "description": "Search for Parameters.",
                    "flatPath": "v1/search/parameters",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.parameters",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/parameters",
                    "request": {
                        "$ref": "SearchParameterRequest"
                    },
                    "response": {
                        "$ref": "SearchParameterResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "portfolios": {
                    "description": "Search for Portfolios.",
                    "flatPath": "v1/search/portfolios",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.portfolios",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/portfolios",
                    "request": {
                        "$ref": "SearchPortfolioRequest"
                    },
                    "response": {
                        "$ref": "SearchPortfolioResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "programs": {
                    "description": "Search for Programs.",
                    "flatPath": "v1/search/programs",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.programs",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/programs",
                    "request": {
                        "$ref": "SearchProgramRequest"
                    },
                    "response": {
                        "$ref": "SearchProgramResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "projects": {
                    "description": "Search for Projects.",
                    "flatPath": "v1/search/projects",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.projects",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/projects",
                    "request": {
                        "$ref": "SearchProjectRequest"
                    },
                    "response": {
                        "$ref": "SearchProjectResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "schedules": {
                    "description": "Search for Schedules.",
                    "flatPath": "v1/search/schedules",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.schedules",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/schedules",
                    "request": {
                        "$ref": "SearchScheduleRequest"
                    },
                    "response": {
                        "$ref": "SearchScheduleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "tasks": {
                    "description": "Search for Tasks.",
                    "flatPath": "v1/search/tasks",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.tasks",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/tasks",
                    "request": {
                        "$ref": "SearchTaskRequest"
                    },
                    "response": {
                        "$ref": "SearchTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "teams": {
                    "description": "Search for Teams.",
                    "flatPath": "v1/search/teams",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.teams",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/teams",
                    "request": {
                        "$ref": "SearchTeamRequest"
                    },
                    "response": {
                        "$ref": "SearchTeamResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "templateTasks": {
                    "description": "Search for TemplateTasks.",
                    "flatPath": "v1/search/templateTasks",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.templateTasks",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/templateTasks",
                    "request": {
                        "$ref": "SearchTemplateTaskRequest"
                    },
                    "response": {
                        "$ref": "SearchTemplateTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "templates": {
                    "description": "Search for Templates.",
                    "flatPath": "v1/search/templates",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.templates",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/templates",
                    "request": {
                        "$ref": "SearchTemplateRequest"
                    },
                    "response": {
                        "$ref": "SearchTemplateResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "users": {
                    "description": "Search for Users.",
                    "flatPath": "v1/search/users",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.search.users",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/search/users",
                    "request": {
                        "$ref": "SearchUserRequest"
                    },
                    "response": {
                        "$ref": "SearchUserResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "tasks": {
            "methods": {
                "create": {
                    "description": "Create a new Task.",
                    "flatPath": "v1/tasks",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.tasks.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tasks",
                    "request": {
                        "$ref": "CreateTaskRequest"
                    },
                    "response": {
                        "$ref": "CreateTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Task.",
                    "flatPath": "v1/tasks/{tasksId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.tasks.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Task as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/tasks/{+id}",
                    "response": {
                        "$ref": "DeleteTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Autogenerated rpc endpoints.\nRetrieve a Task.",
                    "flatPath": "v1/tasks/{tasksId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.tasks.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying Task fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a Task as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/tasks/{+id}",
                    "response": {
                        "$ref": "GetTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "teams": {
            "methods": {
                "create": {
                    "description": "Create a new Team.",
                    "flatPath": "v1/teams",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.teams.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/teams",
                    "request": {
                        "$ref": "CreateTeamRequest"
                    },
                    "response": {
                        "$ref": "CreateTeamResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Team.",
                    "flatPath": "v1/teams/{teamsId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.teams.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Team as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/teams/{+id}",
                    "response": {
                        "$ref": "DeleteTeamResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "templateTasks": {
            "methods": {
                "create": {
                    "description": "Create a new TemplateTask.",
                    "flatPath": "v1/templateTasks",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.templateTasks.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/templateTasks",
                    "request": {
                        "$ref": "CreateTemplateTaskRequest"
                    },
                    "response": {
                        "$ref": "CreateTemplateTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a TemplateTask.",
                    "flatPath": "v1/templateTasks/{templateTasksId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.templateTasks.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a TemplateTask as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/templateTasks/{+id}",
                    "response": {
                        "$ref": "DeleteTemplateTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a TemplateTask.",
                    "flatPath": "v1/templateTasks/{templateTasksId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.templateTasks.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying TemplateTask fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a TemplateTask as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/templateTasks/{+id}",
                    "response": {
                        "$ref": "GetTemplateTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "templates": {
            "methods": {
                "create": {
                    "description": "Create a new Template.",
                    "flatPath": "v1/templates",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.templates.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/templates",
                    "request": {
                        "$ref": "CreateTemplateRequest"
                    },
                    "response": {
                        "$ref": "CreateTemplateResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a Template.",
                    "flatPath": "v1/templates/{templatesId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.templates.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a Template as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/templates/{+id}",
                    "response": {
                        "$ref": "DeleteTemplateResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a Template.",
                    "flatPath": "v1/templates/{templatesId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.templates.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying Template fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a Template as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/templates/{+id}",
                    "response": {
                        "$ref": "GetTemplateResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "users": {
            "methods": {
                "create": {
                    "description": "Create a new User.",
                    "flatPath": "v1/users",
                    "httpMethod": "POST",
                    "id": "dev_workfront_pa_sandbox.users.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/users",
                    "request": {
                        "$ref": "CreateUserRequest"
                    },
                    "response": {
                        "$ref": "CreateUserResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "delete": {
                    "description": "Delete a User.",
                    "flatPath": "v1/users/{usersId}",
                    "httpMethod": "DELETE",
                    "id": "dev_workfront_pa_sandbox.users.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "String id of a User as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/users/{+id}",
                    "response": {
                        "$ref": "DeleteUserResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "get": {
                    "description": "Retrieve a User.",
                    "flatPath": "v1/users/{usersId}",
                    "httpMethod": "GET",
                    "id": "dev_workfront_pa_sandbox.users.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "fieldMask": {
                            "description": "Field mask specifying User fields to be retrieved.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "id": {
                            "description": "String id of a User as understood by Workfront.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMetadata.serviceAccount": {
                            "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/users/{+id}",
                    "response": {
                        "$ref": "GetUserResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        },
        "v1": {
            "methods": {
                "updateGroups": {
                    "description": "Update an existing Group.",
                    "flatPath": "v1/groups",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateGroups",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/groups",
                    "request": {
                        "$ref": "UpdateGroupRequest"
                    },
                    "response": {
                        "$ref": "UpdateGroupResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateIssues": {
                    "description": "Update an existing Issue.",
                    "flatPath": "v1/issues",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateIssues",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/issues",
                    "request": {
                        "$ref": "UpdateIssueRequest"
                    },
                    "response": {
                        "$ref": "UpdateIssueResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateNotes": {
                    "description": "Update an existing Note.",
                    "flatPath": "v1/notes",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateNotes",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/notes",
                    "request": {
                        "$ref": "UpdateNoteRequest"
                    },
                    "response": {
                        "$ref": "UpdateNoteResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updatePortfolios": {
                    "description": "Update an existing Portfolio.",
                    "flatPath": "v1/portfolios",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updatePortfolios",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/portfolios",
                    "request": {
                        "$ref": "UpdatePortfolioRequest"
                    },
                    "response": {
                        "$ref": "UpdatePortfolioResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updatePrograms": {
                    "description": "Update an existing Program.",
                    "flatPath": "v1/programs",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updatePrograms",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/programs",
                    "request": {
                        "$ref": "UpdateProgramRequest"
                    },
                    "response": {
                        "$ref": "UpdateProgramResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateProjects": {
                    "description": "Update an existing Project.",
                    "flatPath": "v1/projects",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateProjects",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/projects",
                    "request": {
                        "$ref": "UpdateProjectRequest"
                    },
                    "response": {
                        "$ref": "UpdateProjectResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateReservedTimes": {
                    "description": "Update an existing ReservedTime.",
                    "flatPath": "v1/reservedTimes",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateReservedTimes",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/reservedTimes",
                    "request": {
                        "$ref": "UpdateReservedTimeRequest"
                    },
                    "response": {
                        "$ref": "UpdateReservedTimeResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateSchedules": {
                    "description": "Update an existing Schedule.",
                    "flatPath": "v1/schedules",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateSchedules",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/schedules",
                    "request": {
                        "$ref": "UpdateScheduleRequest"
                    },
                    "response": {
                        "$ref": "UpdateScheduleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateTasks": {
                    "description": "Update an existing Task.",
                    "flatPath": "v1/tasks",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateTasks",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tasks",
                    "request": {
                        "$ref": "UpdateTaskRequest"
                    },
                    "response": {
                        "$ref": "UpdateTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateTeams": {
                    "description": "Update an existing Team.",
                    "flatPath": "v1/teams",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateTeams",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/teams",
                    "request": {
                        "$ref": "UpdateTeamRequest"
                    },
                    "response": {
                        "$ref": "UpdateTeamResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateTemplateTasks": {
                    "description": "Update an existing TemplateTask.",
                    "flatPath": "v1/templateTasks",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateTemplateTasks",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/templateTasks",
                    "request": {
                        "$ref": "UpdateTemplateTaskRequest"
                    },
                    "response": {
                        "$ref": "UpdateTemplateTaskResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateTemplates": {
                    "description": "Update an existing Template.",
                    "flatPath": "v1/templates",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateTemplates",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/templates",
                    "request": {
                        "$ref": "UpdateTemplateRequest"
                    },
                    "response": {
                        "$ref": "UpdateTemplateResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                },
                "updateUsers": {
                    "description": "Update an existing User.",
                    "flatPath": "v1/users",
                    "httpMethod": "PUT",
                    "id": "dev_workfront_pa_sandbox.updateUsers",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/users",
                    "request": {
                        "$ref": "UpdateUserRequest"
                    },
                    "response": {
                        "$ref": "UpdateUserResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                    ]
                }
            }
        }
    },
    "revision": "20190918",
    "rootUrl": "https://dev-workfront-pa.sandbox.googleapis.com/",
    "schemas": {
        "Assignment": {
            "description": "Next tag = 25",
            "id": "Assignment",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "actualWorkCompleted": {
                    "format": "uint32",
                    "type": "integer"
                },
                "actualWorkPerDayStartDate": {
                    "type": "string"
                },
                "assignedByID": {
                    "type": "string"
                },
                "assignedTo": {
                    "$ref": "User"
                },
                "assignedToID": {
                    "type": "string"
                },
                "assignmentPercent": {
                    "format": "double",
                    "type": "number"
                },
                "avgWorkPerDay": {
                    "format": "uint32",
                    "type": "integer"
                },
                "customerID": {
                    "type": "string"
                },
                "feedbackStatus": {
                    "type": "string"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isTeamAssignment": {
                    "type": "boolean"
                },
                "opTaskID": {
                    "type": "string"
                },
                "plannedUserAllocationPercentage": {
                    "format": "uint32",
                    "type": "integer"
                },
                "projectID": {
                    "type": "string"
                },
                "projectedAvgWorkPerDay": {
                    "format": "uint32",
                    "type": "integer"
                },
                "projectedUserAllocationPercentage": {
                    "format": "uint32",
                    "type": "integer"
                },
                "roleID": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taskID": {
                    "type": "string"
                },
                "teamID": {
                    "type": "string"
                },
                "work": {
                    "format": "double",
                    "type": "number"
                },
                "workRequired": {
                    "format": "uint32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Baseline": {
            "description": "Next tag = 21",
            "id": "Baseline",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "actualCompletionDate": {
                    "type": "string"
                },
                "actualDurationMinutes": {
                    "format": "int32",
                    "type": "integer"
                },
                "actualStartDate": {
                    "type": "string"
                },
                "actualWorkRequired": {
                    "format": "int32",
                    "type": "integer"
                },
                "condition": {
                    "type": "string"
                },
                "durationMinutes": {
                    "format": "int32",
                    "type": "integer"
                },
                "entryDate": {
                    "type": "string"
                },
                "estCompletionDate": {
                    "type": "string"
                },
                "estStartDate": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "percentComplete": {
                    "format": "double",
                    "type": "number"
                },
                "plannedCompletionDate": {
                    "type": "string"
                },
                "plannedStartDate": {
                    "type": "string"
                },
                "progressStatus": {
                    "type": "string"
                },
                "projectID": {
                    "type": "string"
                },
                "projectedCompletionDate": {
                    "type": "string"
                },
                "projectedStartDate": {
                    "type": "string"
                },
                "workRequired": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "BaselineTask": {
            "description": "Next tag = 20",
            "id": "BaselineTask",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "actualCompletionDate": {
                    "type": "string"
                },
                "actualDurationMinutes": {
                    "format": "int32",
                    "type": "integer"
                },
                "actualStartDate": {
                    "type": "string"
                },
                "actualWorkRequired": {
                    "format": "int32",
                    "type": "integer"
                },
                "baselineID": {
                    "type": "string"
                },
                "durationMinutes": {
                    "format": "int32",
                    "type": "integer"
                },
                "entryDate": {
                    "type": "string"
                },
                "estCompletionDate": {
                    "type": "string"
                },
                "estStartDate": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "percentComplete": {
                    "format": "double",
                    "type": "number"
                },
                "plannedCompletionDate": {
                    "type": "string"
                },
                "plannedStartDate": {
                    "type": "string"
                },
                "projectedCompletionDate": {
                    "type": "string"
                },
                "projectedStartDate": {
                    "type": "string"
                },
                "taskID": {
                    "type": "string"
                },
                "workRequired": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "BudgetedHour": {
            "description": "Next tag = 9",
            "id": "BudgetedHour",
            "properties": {
                "GUID": {
                    "type": "string"
                },
                "ID": {
                    "description": "This is undocumented column with value null.\nDon't use it for update / delete.",
                    "type": "string"
                },
                "allocationDate": {
                    "type": "string"
                },
                "budgetedHours": {
                    "format": "double",
                    "type": "number"
                },
                "plannedBudgetedHours": {
                    "format": "double",
                    "type": "number"
                },
                "projectID": {
                    "type": "string"
                },
                "roleID": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BulkCreateParameterOptionsRequest": {
            "description": "Request to create a set of Workfront ParameterOption entities with the given\npayload.",
            "id": "BulkCreateParameterOptionsRequest",
            "properties": {
                "entities": {
                    "description": "ParameterOptions to be created.",
                    "items": {
                        "$ref": "ParameterOption"
                    },
                    "type": "array"
                },
                "fieldMask": {
                    "description": "Field mask specifying ParameterOption fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "BulkCreateParameterOptionsResponse": {
            "description": "Response with the newly created Workfront ParameterOptions.",
            "id": "BulkCreateParameterOptionsResponse",
            "properties": {
                "entities": {
                    "description": "Newly created ParameterOptions, may differ from the ParameterOptions in the\ncorresponding request.",
                    "items": {
                        "$ref": "ParameterOption"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BulkCreateTasksRequest": {
            "description": "Request to create a set of Workfront Task entities with the given payload.",
            "id": "BulkCreateTasksRequest",
            "properties": {
                "entities": {
                    "description": "Tasks to be created.",
                    "items": {
                        "$ref": "Task"
                    },
                    "type": "array"
                },
                "fieldMask": {
                    "description": "Field mask specifying Task fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "BulkCreateTasksResponse": {
            "description": "Response with the newly created Workfront Tasks.",
            "id": "BulkCreateTasksResponse",
            "properties": {
                "entities": {
                    "description": "Newly created Tasks, may differ from the Tasks in the corresponding\nrequest.",
                    "items": {
                        "$ref": "Task"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BulkUpdateParameterOptionsRequest": {
            "description": "Request to update specified fields of a set of Workfront ParameterOptions.",
            "id": "BulkUpdateParameterOptionsRequest",
            "properties": {
                "entities": {
                    "description": "New values of ParameterOption fields, only fields in field_mask will be\nconsidered.",
                    "items": {
                        "$ref": "ParameterOption"
                    },
                    "type": "array"
                },
                "fieldMask": {
                    "description": "Subset of fields to update.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "BulkUpdateParameterOptionsResponse": {
            "description": "Response with the updated Workfront ParameterOptions.",
            "id": "BulkUpdateParameterOptionsResponse",
            "properties": {
                "entities": {
                    "description": "Updated ParameterOptions, may differ from the ParameterOption in the\ncorresponding update request.",
                    "items": {
                        "$ref": "ParameterOption"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BulkUpdateTasksRequest": {
            "description": "Request to update specified fields of a set of Workfront Tasks.",
            "id": "BulkUpdateTasksRequest",
            "properties": {
                "entities": {
                    "description": "New values of Task fields, only fields in field_mask will be considered.",
                    "items": {
                        "$ref": "Task"
                    },
                    "type": "array"
                },
                "fieldMask": {
                    "description": "Subset of fields to update.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "BulkUpdateTasksResponse": {
            "description": "Response with the updated Workfront Tasks.",
            "id": "BulkUpdateTasksResponse",
            "properties": {
                "entities": {
                    "description": "Updated Tasks, may differ from the Task in the corresponding update\nrequest.",
                    "items": {
                        "$ref": "Task"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Category": {
            "description": "Object representing custom form in Workfront.\nNext tag = 4",
            "id": "Category",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "categoryParameters": {
                    "items": {
                        "$ref": "CategoryParameter"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CategoryParameter": {
            "description": "Next tag = 4",
            "id": "CategoryParameter",
            "properties": {
                "categoryID": {
                    "type": "string"
                },
                "displayOrder": {
                    "format": "int32",
                    "type": "integer"
                },
                "parameterID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CountUsersRequest": {
            "description": "Request to count the Users on Workfront that match the provided SearchQuery.",
            "id": "CountUsersRequest",
            "properties": {
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery containing all the constraints."
                }
            },
            "type": "object"
        },
        "CountUsersResponse": {
            "description": "Response message containing the number of users that match the request query.",
            "id": "CountUsersResponse",
            "properties": {
                "entityCount": {
                    "description": "Entity count representing the number of Users that match the request query.",
                    "format": "uint64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreateGroupRequest": {
            "description": "Request to create a new Workfront Group with the given payload.",
            "id": "CreateGroupRequest",
            "properties": {
                "entity": {
                    "$ref": "Group",
                    "description": "Group to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Group fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateGroupResponse": {
            "description": "Response with the newly created Workfront Group.",
            "id": "CreateGroupResponse",
            "properties": {
                "entity": {
                    "$ref": "Group",
                    "description": "Newly created Group, may differ from the Group in the corresponding\nrequest."
                }
            },
            "type": "object"
        },
        "CreateIssueRequest": {
            "description": "Request to create a new Workfront Issue with the given payload.",
            "id": "CreateIssueRequest",
            "properties": {
                "entity": {
                    "$ref": "Issue",
                    "description": "Issue to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Issue fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateIssueResponse": {
            "description": "Response with the newly created Workfront Issue.",
            "id": "CreateIssueResponse",
            "properties": {
                "entity": {
                    "$ref": "Issue",
                    "description": "Newly created Issue, may differ from the Issue in the corresponding\nrequest."
                }
            },
            "type": "object"
        },
        "CreateNoteRequest": {
            "description": "Request to create a new Workfront Note with the given payload.",
            "id": "CreateNoteRequest",
            "properties": {
                "entity": {
                    "$ref": "Note",
                    "description": "Note to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Note fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateNoteResponse": {
            "description": "Response with the newly created Workfront Note.",
            "id": "CreateNoteResponse",
            "properties": {
                "entity": {
                    "$ref": "Note",
                    "description": "Newly created Note, may differ from the Note in the corresponding request."
                }
            },
            "type": "object"
        },
        "CreateProjectRequest": {
            "description": "Request to create a new Workfront Project with the given payload.",
            "id": "CreateProjectRequest",
            "properties": {
                "entity": {
                    "$ref": "Project",
                    "description": "Project to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Project fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateProjectResponse": {
            "description": "Response with the newly created Workfront Project.",
            "id": "CreateProjectResponse",
            "properties": {
                "entity": {
                    "$ref": "Project",
                    "description": "Newly created Project, may differ from the Project in the corresponding\nrequest."
                }
            },
            "type": "object"
        },
        "CreateReservedTimeRequest": {
            "description": "Request to create a new Workfront ReservedTime with the given payload.",
            "id": "CreateReservedTimeRequest",
            "properties": {
                "entity": {
                    "$ref": "ReservedTime",
                    "description": "ReservedTime to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying ReservedTime fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateReservedTimeResponse": {
            "description": "Response with the newly created Workfront ReservedTime.",
            "id": "CreateReservedTimeResponse",
            "properties": {
                "entity": {
                    "$ref": "ReservedTime",
                    "description": "Newly created ReservedTime, may differ from the ReservedTime in the\ncorresponding request."
                }
            },
            "type": "object"
        },
        "CreateScheduleRequest": {
            "description": "Request to create a new Workfront Schedule with the given payload.",
            "id": "CreateScheduleRequest",
            "properties": {
                "entity": {
                    "$ref": "Schedule",
                    "description": "Schedule to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Schedule fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateScheduleResponse": {
            "description": "Response with the newly created Workfront Schedule.",
            "id": "CreateScheduleResponse",
            "properties": {
                "entity": {
                    "$ref": "Schedule",
                    "description": "Newly created Schedule, may differ from the Schedule in the corresponding\nrequest."
                }
            },
            "type": "object"
        },
        "CreateTaskRequest": {
            "description": "Request to create a new Workfront Task with the given payload.",
            "id": "CreateTaskRequest",
            "properties": {
                "entity": {
                    "$ref": "Task",
                    "description": "Task to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Task fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateTaskResponse": {
            "description": "Response with the newly created Workfront Task.",
            "id": "CreateTaskResponse",
            "properties": {
                "entity": {
                    "$ref": "Task",
                    "description": "Newly created Task, may differ from the Task in the corresponding request."
                }
            },
            "type": "object"
        },
        "CreateTeamRequest": {
            "description": "Request to create a new Workfront Team with the given payload.",
            "id": "CreateTeamRequest",
            "properties": {
                "entity": {
                    "$ref": "Team",
                    "description": "Team to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Team fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateTeamResponse": {
            "description": "Response with the newly created Workfront Team.",
            "id": "CreateTeamResponse",
            "properties": {
                "entity": {
                    "$ref": "Team",
                    "description": "Newly created Team, may differ from the Team in the corresponding request."
                }
            },
            "type": "object"
        },
        "CreateTemplateRequest": {
            "description": "Request to create a new Workfront Template with the given payload.",
            "id": "CreateTemplateRequest",
            "properties": {
                "entity": {
                    "$ref": "Template",
                    "description": "Template to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying Template fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateTemplateResponse": {
            "description": "Response with the newly created Workfront Template.",
            "id": "CreateTemplateResponse",
            "properties": {
                "entity": {
                    "$ref": "Template",
                    "description": "Newly created Template, may differ from the Template in the corresponding\nrequest."
                }
            },
            "type": "object"
        },
        "CreateTemplateTaskRequest": {
            "description": "Request to create a new Workfront TemplateTask with the given payload.",
            "id": "CreateTemplateTaskRequest",
            "properties": {
                "entity": {
                    "$ref": "TemplateTask",
                    "description": "TemplateTask to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying TemplateTask fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateTemplateTaskResponse": {
            "description": "Response with the newly created Workfront TemplateTask.",
            "id": "CreateTemplateTaskResponse",
            "properties": {
                "entity": {
                    "$ref": "TemplateTask",
                    "description": "Newly created TemplateTask, may differ from the TemplateTask in the\ncorresponding request."
                }
            },
            "type": "object"
        },
        "CreateUserRequest": {
            "description": "Request to create a new Workfront User with the given payload.",
            "id": "CreateUserRequest",
            "properties": {
                "entity": {
                    "$ref": "User",
                    "description": "User to be created."
                },
                "fieldMask": {
                    "description": "Field mask specifying User fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "CreateUserResponse": {
            "description": "Response with the newly created Workfront User.",
            "id": "CreateUserResponse",
            "properties": {
                "entity": {
                    "$ref": "User",
                    "description": "Newly created User, may differ from the User in the corresponding request."
                }
            },
            "type": "object"
        },
        "CustomField": {
            "description": "Represents values set on custom fields in WF. Please be aware that to set\na CustomField on an object the object has to have appropriate\nobjectCategory.\nNext tag = 4",
            "id": "CustomField",
            "properties": {
                "name": {
                    "description": "Name of the field, e.g. \"OKR Status\".",
                    "type": "string"
                },
                "values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DeleteGroupResponse": {
            "description": "Response to delete a Workfront Group.",
            "id": "DeleteGroupResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteIssueResponse": {
            "description": "Response to delete a Workfront Issue.",
            "id": "DeleteIssueResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteNoteResponse": {
            "description": "Response to delete a Workfront Note.",
            "id": "DeleteNoteResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteProjectResponse": {
            "description": "Response to delete a Workfront Project.",
            "id": "DeleteProjectResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteReservedTimeResponse": {
            "description": "Response to delete a Workfront ReservedTime.",
            "id": "DeleteReservedTimeResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteScheduleResponse": {
            "description": "Response to delete a Workfront Schedule.",
            "id": "DeleteScheduleResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteTaskResponse": {
            "description": "Response to delete a Workfront Task.",
            "id": "DeleteTaskResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteTeamResponse": {
            "description": "Response to delete a Workfront Team.",
            "id": "DeleteTeamResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteTemplateResponse": {
            "description": "Response to delete a Workfront Template.",
            "id": "DeleteTemplateResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteTemplateTaskResponse": {
            "description": "Response to delete a Workfront TemplateTask.",
            "id": "DeleteTemplateTaskResponse",
            "properties": {},
            "type": "object"
        },
        "DeleteUserResponse": {
            "description": "Response to delete a Workfront User.",
            "id": "DeleteUserResponse",
            "properties": {},
            "type": "object"
        },
        "GetIssueResponse": {
            "description": "Response with the retrieved Workfront Issue.",
            "id": "GetIssueResponse",
            "properties": {
                "entity": {
                    "$ref": "Issue",
                    "description": "Issue with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetNoteResponse": {
            "description": "Response with the retrieved Workfront Note.",
            "id": "GetNoteResponse",
            "properties": {
                "entity": {
                    "$ref": "Note",
                    "description": "Note with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetProjectResponse": {
            "description": "Response with the retrieved Workfront Project.",
            "id": "GetProjectResponse",
            "properties": {
                "entity": {
                    "$ref": "Project",
                    "description": "Project with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetReservedTimeResponse": {
            "description": "Response with the retrieved Workfront ReservedTime.",
            "id": "GetReservedTimeResponse",
            "properties": {
                "entity": {
                    "$ref": "ReservedTime",
                    "description": "ReservedTime with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetScheduleResponse": {
            "description": "Response with the retrieved Workfront Schedule.",
            "id": "GetScheduleResponse",
            "properties": {
                "entity": {
                    "$ref": "Schedule",
                    "description": "Schedule with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetTaskResponse": {
            "description": "Response with the retrieved Workfront Task.",
            "id": "GetTaskResponse",
            "properties": {
                "entity": {
                    "$ref": "Task",
                    "description": "Task with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetTemplateResponse": {
            "description": "Response with the retrieved Workfront Template.",
            "id": "GetTemplateResponse",
            "properties": {
                "entity": {
                    "$ref": "Template",
                    "description": "Template with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetTemplateTaskResponse": {
            "description": "Response with the retrieved Workfront TemplateTask.",
            "id": "GetTemplateTaskResponse",
            "properties": {
                "entity": {
                    "$ref": "TemplateTask",
                    "description": "TemplateTask with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "GetUserResponse": {
            "description": "Response with the retrieved Workfront User.",
            "id": "GetUserResponse",
            "properties": {
                "entity": {
                    "$ref": "User",
                    "description": "User with fields in field_map of the corresponding request."
                }
            },
            "type": "object"
        },
        "Group": {
            "description": "Next tag = 7",
            "id": "Group",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "children": {
                    "items": {
                        "$ref": "Group"
                    },
                    "type": "array"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentID": {
                    "type": "string"
                },
                "userGroups": {
                    "items": {
                        "$ref": "UserGroup"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Issue": {
            "description": "Next tag = 40",
            "id": "Issue",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "actualCompletionDate": {
                    "type": "string"
                },
                "actualStartDate": {
                    "type": "string"
                },
                "actualWorkRequired": {
                    "format": "int32",
                    "type": "integer"
                },
                "assignments": {
                    "items": {
                        "$ref": "Assignment"
                    },
                    "type": "array"
                },
                "backlogParent": {
                    "type": "string"
                },
                "commitDate": {
                    "type": "string"
                },
                "condition": {
                    "format": "int32",
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string"
                },
                "enteredByID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "howOld": {
                    "format": "double",
                    "type": "number"
                },
                "lastConditionNoteID": {
                    "type": "string"
                },
                "lastNoteID": {
                    "type": "string"
                },
                "lastUpdateDate": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "$ref": "User"
                },
                "lastUpdatedByID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerID": {
                    "type": "string"
                },
                "parameterValues": {
                    "items": {
                        "$ref": "CustomField"
                    },
                    "type": "array"
                },
                "plannedCompletionDate": {
                    "type": "string"
                },
                "plannedStartDate": {
                    "type": "string"
                },
                "priority": {
                    "format": "int32",
                    "type": "integer"
                },
                "projectID": {
                    "type": "string"
                },
                "projectedCompletionDate": {
                    "type": "string"
                },
                "projectedStartDate": {
                    "type": "string"
                },
                "referenceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "resolutionTime": {
                    "type": "string"
                },
                "roleID": {
                    "type": "string"
                },
                "severity": {
                    "format": "int32",
                    "type": "integer"
                },
                "sourceObjCode": {
                    "type": "string"
                },
                "sourceObjID": {
                    "type": "string"
                },
                "sourceTaskID": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "submittedByID": {
                    "type": "string"
                },
                "teamID": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "workRequired": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "JobRole": {
            "description": "Next tag = 12",
            "id": "JobRole",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "billingPerHour": {
                    "type": "string"
                },
                "costPerHour": {
                    "type": "string"
                },
                "customerID": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enteredByID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "extRefID": {
                    "type": "string"
                },
                "layoutTemplateID": {
                    "type": "string"
                },
                "maxUsers": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Milestone": {
            "description": "Next tag = 5",
            "id": "Milestone",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "milestonePathID": {
                    "description": "Only one task in a project can have the same milestonePathID.",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sequence": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "MilestonePath": {
            "description": "Next tag = 4\nRepresents collection of Milestones.",
            "id": "MilestonePath",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NonWorkDay": {
            "description": "Next tag = 5",
            "id": "NonWorkDay",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "nonWorkDate": {
                    "type": "string"
                },
                "scheduleDay": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scheduleID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Note": {
            "description": "Next tag = 11",
            "id": "Note",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "noteObjCode": {
                    "type": "string"
                },
                "noteText": {
                    "type": "string"
                },
                "objID": {
                    "type": "string"
                },
                "ownerID": {
                    "type": "string"
                },
                "portfolioID": {
                    "type": "string"
                },
                "programID": {
                    "type": "string"
                },
                "projectID": {
                    "type": "string"
                },
                "taskID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ObjectCategory": {
            "description": "This object represents custom forms in Workfront.\n\nNext tag = 3",
            "id": "ObjectCategory",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "categoryID": {
                    "description": "Custom form ID in Workfront. If you want to set it, the form has to be\nshared with the caller account.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Paginator": {
            "description": "Paginates the search queries, specifying the limit and the offset (first).",
            "id": "Paginator",
            "properties": {
                "first": {
                    "description": "The index of the first result to be returned (offset).",
                    "format": "uint32",
                    "type": "integer"
                },
                "limit": {
                    "description": "The maximum number of entities as a result of the search query.",
                    "format": "uint32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Parameter": {
            "description": "Next tag = 6",
            "id": "Parameter",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "dataType": {
                    "type": "string"
                },
                "displayType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameterOptions": {
                    "items": {
                        "$ref": "ParameterOption"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ParameterOption": {
            "description": "Next tag = 8",
            "id": "ParameterOption",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "displayOrder": {
                    "format": "int32",
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isHidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "parameterID": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Portfolio": {
            "description": "Next tag = 13",
            "id": "Portfolio",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "accessRules": {
                    "items": {
                        "$ref": "Share"
                    },
                    "type": "array"
                },
                "categoryID": {
                    "description": "Obsolete field. Use objectCategories.",
                    "type": "string"
                },
                "customerID": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enteredByID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "objectCategories": {
                    "description": "Custom forms assigned to the portfolio.",
                    "items": {
                        "$ref": "ObjectCategory"
                    },
                    "type": "array"
                },
                "ownerID": {
                    "type": "string"
                },
                "parameterValues": {
                    "description": "If you request 'parameterValues' in request all custom fields for object are\nreturned as JSON object. Workfront client converts it to JSON Array. Also all\nfields with 'DE:' prefix will be moved under this field.\n\nDocs:\nhttps://developers.workfront.com/api-docs/#CustomData",
                    "items": {
                        "$ref": "CustomField"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Predecessor": {
            "description": "Next tag = 10",
            "id": "Predecessor",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "customerID": {
                    "type": "string"
                },
                "isCP": {
                    "type": "boolean"
                },
                "isEnforced": {
                    "type": "boolean"
                },
                "lagDays": {
                    "format": "double",
                    "type": "number"
                },
                "lagType": {
                    "type": "string"
                },
                "predecessorID": {
                    "type": "string"
                },
                "predecessorType": {
                    "type": "string"
                },
                "successorID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Program": {
            "description": "Next tag = 13",
            "id": "Program",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "accessRules": {
                    "items": {
                        "$ref": "Share"
                    },
                    "type": "array"
                },
                "categoryID": {
                    "description": "Obsolete field. Use objectCategories.",
                    "type": "string"
                },
                "customerID": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enteredByID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "objectCategories": {
                    "description": "Custom forms assigned to the program.",
                    "items": {
                        "$ref": "ObjectCategory"
                    },
                    "type": "array"
                },
                "ownerID": {
                    "type": "string"
                },
                "parameterValues": {
                    "description": "If you request 'parameterValues' in request all custom fields for object are\nreturned as JSON object. Workfront client converts it to JSON Array. Also all\nfields with 'DE:' prefix will be moved under this field.\n\nDocs:\nhttps://developers.workfront.com/api-docs/#CustomData",
                    "items": {
                        "$ref": "CustomField"
                    },
                    "type": "array"
                },
                "portfolioID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Project": {
            "description": "Next tag = 49",
            "id": "Project",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "URL": {
                    "type": "string"
                },
                "accessRules": {
                    "items": {
                        "$ref": "Share"
                    },
                    "type": "array"
                },
                "actualCompletionDate": {
                    "type": "string"
                },
                "actualDurationMinutes": {
                    "format": "int32",
                    "type": "integer"
                },
                "actualStartDate": {
                    "type": "string"
                },
                "actualWorkRequired": {
                    "format": "int32",
                    "type": "integer"
                },
                "budgetedHours": {
                    "format": "double",
                    "type": "number"
                },
                "categoryID": {
                    "description": "Obsolete field. Use objectCategories.",
                    "type": "string"
                },
                "companyID": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "conditionType": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "durationMinutes": {
                    "format": "int32",
                    "type": "integer"
                },
                "enteredByID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "groupID": {
                    "type": "string"
                },
                "lastUpdateDate": {
                    "type": "string"
                },
                "lastUpdatedByID": {
                    "type": "string"
                },
                "milestonePathID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "objectCategories": {
                    "description": "Custom forms assigned to the project.",
                    "items": {
                        "$ref": "ObjectCategory"
                    },
                    "type": "array"
                },
                "originalWorkRequired": {
                    "format": "double",
                    "type": "number"
                },
                "owner": {
                    "$ref": "User"
                },
                "ownerID": {
                    "type": "string"
                },
                "parameterValues": {
                    "description": "If you request 'parameterValues' in request all custom fields for object are\nreturned as JSON object. Workfront client converts it to JSON Array. Also all\nfields with 'DE:' prefix will be moved under this field.\n\nDocs:\nhttps://developers.workfront.com/api-docs/#CustomData",
                    "items": {
                        "$ref": "CustomField"
                    },
                    "type": "array"
                },
                "percentComplete": {
                    "format": "double",
                    "type": "number"
                },
                "plannedCompletionDate": {
                    "type": "string"
                },
                "plannedStartDate": {
                    "type": "string"
                },
                "portfolioID": {
                    "type": "string"
                },
                "priority": {
                    "format": "uint32",
                    "type": "integer"
                },
                "programID": {
                    "description": "The program has to belong under the porfolio.\nCheck that robot user has MANAGE rights to Program/Portfolio.",
                    "type": "string"
                },
                "progressStatus": {
                    "type": "string"
                },
                "projectUserRoles": {
                    "items": {
                        "$ref": "ProjectUserRoles"
                    },
                    "type": "array"
                },
                "projectedCompletionDate": {
                    "type": "string"
                },
                "projectedStartDate": {
                    "type": "string"
                },
                "referenceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "resourceManagers": {
                    "items": {
                        "$ref": "ResourceManager"
                    },
                    "type": "array"
                },
                "scheduleMode": {
                    "description": "Schedule mode controls which one of the plannedDates is computed.\nhttps://support.workfront.com/hc/en-us/articles/216676478-Editing-Projects\nIt's either 'C' or 'S'",
                    "type": "string"
                },
                "sponsorID": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "submittedByID": {
                    "type": "string"
                },
                "teamID": {
                    "type": "string"
                },
                "templateID": {
                    "type": "string"
                },
                "updates": {
                    "items": {
                        "$ref": "Update"
                    },
                    "type": "array"
                },
                "workRequired": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ProjectUserRoles": {
            "description": "Next tag = 5",
            "id": "ProjectUserRoles",
            "properties": {
                "customerID": {
                    "type": "string"
                },
                "projectID": {
                    "type": "string"
                },
                "roleID": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RequestMetadata": {
            "description": "Request metadata, part of each request message.",
            "id": "RequestMetadata",
            "properties": {
                "serviceAccount": {
                    "description": "Workfront service account to act as.\nThe teams that are going to use this service would get a service account on\nWorkfront mapped to an mdb group. This mdb group should be specified here,\nand, if the user belongs to it, the request on workfront will be done on\nbehalf of that service account.\nMore details, in this design proposal:\nhttp://doc/1MFVQlLal4jvDVcaTWWFnKa5UDL0W0sIRXyaKfYbH0p4",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ReservedTime": {
            "description": "Next tag = 5",
            "id": "ReservedTime",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResourceManager": {
            "description": "Next tag = 5",
            "id": "ResourceManager",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "projectID": {
                    "type": "string"
                },
                "resourceManagerID": {
                    "type": "string"
                },
                "templateID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Schedule": {
            "description": "Next tag = 13",
            "id": "Schedule",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "friday": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "monday": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "nonWorkDays": {
                    "items": {
                        "$ref": "NonWorkDay"
                    },
                    "type": "array"
                },
                "saturday": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sunday": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "thursday": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timeZone": {
                    "type": "string"
                },
                "tuesday": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "wednesday": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchBaselineRequest": {
            "description": "Request to get a list of Workfront Baselines for the specified SearchQuery.",
            "id": "SearchBaselineRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Baseline fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchBaselineResponse": {
            "description": "Response with the list of Baselines matching the query in the request.",
            "id": "SearchBaselineResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Baselines.",
                    "items": {
                        "$ref": "Baseline"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchBaselineTaskRequest": {
            "description": "Request to get a list of Workfront BaselineTasks for the specified\nSearchQuery.",
            "id": "SearchBaselineTaskRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying BaselineTask fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchBaselineTaskResponse": {
            "description": "Response with the list of BaselineTasks matching the query in the request.",
            "id": "SearchBaselineTaskResponse",
            "properties": {
                "entities": {
                    "description": "List of matching BaselineTasks.",
                    "items": {
                        "$ref": "BaselineTask"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchBudgetedHourRequest": {
            "description": "Request to get a list of Workfront BudgetedHours for the specified\nSearchQuery.",
            "id": "SearchBudgetedHourRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying BudgetedHour fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchBudgetedHourResponse": {
            "description": "Response with the list of BudgetedHours matching the query in the request.",
            "id": "SearchBudgetedHourResponse",
            "properties": {
                "entities": {
                    "description": "List of matching BudgetedHours.",
                    "items": {
                        "$ref": "BudgetedHour"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchCategoryRequest": {
            "description": "Request to get a list of Workfront Categories for the specified SearchQuery.",
            "id": "SearchCategoryRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Category fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchCategoryResponse": {
            "description": "Response with the list of Categories matching the query in the request.",
            "id": "SearchCategoryResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Categories.",
                    "items": {
                        "$ref": "Category"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchExpression": {
            "description": "Single search expression constraining one Workfront entity field.",
            "id": "SearchExpression",
            "properties": {
                "field": {
                    "description": "References a field to be constrained.",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator restraining the specified field.",
                    "enum": [
                        "UNKNOWN",
                        "EQ",
                        "NE",
                        "GTE",
                        "LTE",
                        "GT",
                        "LT",
                        "IS_NULL",
                        "NOT_NULL",
                        "CONTAINS",
                        "BETWEEN",
                        "IN",
                        "NOT_IN",
                        "IS_BLANK",
                        "NOT_BLANK",
                        "LIKE",
                        "CI_EQ",
                        "CI_NE",
                        "CI_CONTAINS",
                        "CI_IN",
                        "CI_NOT_IN",
                        "CI_LIKE"
                    ],
                    "enumDescriptions": [
                        "Unknown value, does not represent a valid operator.",
                        "The \"equals to\" operator.",
                        "The \"is not equal to\" operator.",
                        "The \"greater than or equal to\" operator.",
                        "The \"less than or equal to\" operator.",
                        "The \"greater than\" operator.",
                        "The \"less than\" operator.",
                        "The \"is NULL\" unary operator.",
                        "The \"is not NULL\" unary operator.",
                        "The \"contains substring\" operator.",
                        "The \"is between\" value interval operator",
                        "The \"is in\" value set operator.",
                        "The \"is not in\" value set operator.",
                        "The \"is blank\" unary operator.",
                        "The \"is not blank\" unary operator.",
                        "The SQL LIKE operator. The value for it can contain replacement\ncharacters such as _ and %.",
                        "Case insensitive \"equals to\" operator.",
                        "Case insensitive \"is not equal to\" operator.",
                        "Case insensitive \"contains substring\" operator.",
                        "Case insensitive \"is in\" operator.",
                        "Case insensitive \"is not in\" operator.",
                        "Case insensitive SQL LIKE operator. The value for it can contain\nreplacement characters such as _ and %."
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The value is intended for the binary operators that target single value.",
                    "type": "string"
                },
                "values": {
                    "description": "The values list is intended for the IN / NOT_IN operators.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "valuesInterval": {
                    "$ref": "ValuesInterval",
                    "description": "The values_interval is intended for the BETWEEN operator only."
                }
            },
            "type": "object"
        },
        "SearchGroupRequest": {
            "description": "Request to get a list of Workfront Groups for the specified SearchQuery.",
            "id": "SearchGroupRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Group fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchGroupResponse": {
            "description": "Response with the list of Groups matching the query in the request.",
            "id": "SearchGroupResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Groups.",
                    "items": {
                        "$ref": "Group"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchIssueRequest": {
            "description": "Request to get a list of Workfront Issues for the specified SearchQuery.",
            "id": "SearchIssueRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Issue fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchIssueResponse": {
            "description": "Response with the list of Issues matching the query in the request.",
            "id": "SearchIssueResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Issues.",
                    "items": {
                        "$ref": "Issue"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchJobRoleRequest": {
            "description": "Request to get a list of Workfront JobRoles for the specified SearchQuery.",
            "id": "SearchJobRoleRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying JobRole fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchJobRoleResponse": {
            "description": "Response with the list of JobRoles matching the query in the request.",
            "id": "SearchJobRoleResponse",
            "properties": {
                "entities": {
                    "description": "List of matching JobRoles.",
                    "items": {
                        "$ref": "JobRole"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchMilestonePathRequest": {
            "description": "Request to get a list of Workfront MilestonePaths for the specified\nSearchQuery.",
            "id": "SearchMilestonePathRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying MilestonePath fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchMilestonePathResponse": {
            "description": "Response with the list of MilestonePaths matching the query in the request.",
            "id": "SearchMilestonePathResponse",
            "properties": {
                "entities": {
                    "description": "List of matching MilestonePaths.",
                    "items": {
                        "$ref": "MilestonePath"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchMilestoneRequest": {
            "description": "Request to get a list of Workfront Milestones for the specified SearchQuery.",
            "id": "SearchMilestoneRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Milestone fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchMilestoneResponse": {
            "description": "Response with the list of Milestones matching the query in the request.",
            "id": "SearchMilestoneResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Milestones.",
                    "items": {
                        "$ref": "Milestone"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchNoteRequest": {
            "description": "Request to get a list of Workfront Notes for the specified SearchQuery.",
            "id": "SearchNoteRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Note fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchNoteResponse": {
            "description": "Response with the list of Notes matching the query in the request.",
            "id": "SearchNoteResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Notes.",
                    "items": {
                        "$ref": "Note"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchParameterRequest": {
            "description": "Request to get a list of Workfront Parameters for the specified SearchQuery.",
            "id": "SearchParameterRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Parameter fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchParameterResponse": {
            "description": "Response with the list of Parameters matching the query in the request.",
            "id": "SearchParameterResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Parameters.",
                    "items": {
                        "$ref": "Parameter"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchPortfolioRequest": {
            "description": "Request to get a list of Workfront Portfolios for the specified SearchQuery.",
            "id": "SearchPortfolioRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Portfolio fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchPortfolioResponse": {
            "description": "Response with the list of Portfolios matching the query in the request.",
            "id": "SearchPortfolioResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Portfolios.",
                    "items": {
                        "$ref": "Portfolio"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchProgramRequest": {
            "description": "Request to get a list of Workfront Programs for the specified SearchQuery.",
            "id": "SearchProgramRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Program fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchProgramResponse": {
            "description": "Response with the list of Programs matching the query in the request.",
            "id": "SearchProgramResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Programs.",
                    "items": {
                        "$ref": "Program"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchProjectRequest": {
            "description": "Request to get a list of Workfront Projects for the specified SearchQuery.",
            "id": "SearchProjectRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Project fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchProjectResponse": {
            "description": "Response with the list of Projects matching the query in the request.",
            "id": "SearchProjectResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Projects.",
                    "items": {
                        "$ref": "Project"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchQuery": {
            "description": "The SearchQuery message aims to hold the query data for Workfront.\nIt should be built using\nc.g.corp.plan.esb.clients.workfront.searchquery.WorkfrontSearchQueryBuilder\nhelper class.",
            "id": "SearchQuery",
            "properties": {
                "searchExpressions": {
                    "description": "Set of single field constraints. Interpreted as a logical conjunction.",
                    "items": {
                        "$ref": "SearchExpression"
                    },
                    "type": "array"
                },
                "sortExpressions": {
                    "description": "Ordered list of single field sort orders. Interpreted in the given order.",
                    "items": {
                        "$ref": "SortExpression"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchScheduleRequest": {
            "description": "Request to get a list of Workfront Schedules for the specified SearchQuery.",
            "id": "SearchScheduleRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Schedule fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchScheduleResponse": {
            "description": "Response with the list of Schedules matching the query in the request.",
            "id": "SearchScheduleResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Schedules.",
                    "items": {
                        "$ref": "Schedule"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchTaskRequest": {
            "description": "Request to get a list of Workfront Tasks for the specified SearchQuery.",
            "id": "SearchTaskRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Task fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchTaskResponse": {
            "description": "Response with the list of Tasks matching the query in the request.",
            "id": "SearchTaskResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Tasks.",
                    "items": {
                        "$ref": "Task"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchTeamRequest": {
            "description": "Request to get a list of Workfront Teams for the specified SearchQuery.",
            "id": "SearchTeamRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Team fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchTeamResponse": {
            "description": "Response with the list of Teams matching the query in the request.",
            "id": "SearchTeamResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Teams.",
                    "items": {
                        "$ref": "Team"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchTemplateRequest": {
            "description": "Request to get a list of Workfront Templates for the specified SearchQuery.",
            "id": "SearchTemplateRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying Template fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchTemplateResponse": {
            "description": "Response with the list of Templates matching the query in the request.",
            "id": "SearchTemplateResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Templates.",
                    "items": {
                        "$ref": "Template"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchTemplateTaskRequest": {
            "description": "Request to get a list of Workfront TemplateTasks for the specified\nSearchQuery.",
            "id": "SearchTemplateTaskRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying TemplateTask fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchTemplateTaskResponse": {
            "description": "Response with the list of TemplateTasks matching the query in the request.",
            "id": "SearchTemplateTaskResponse",
            "properties": {
                "entities": {
                    "description": "List of matching TemplateTasks.",
                    "items": {
                        "$ref": "TemplateTask"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchUserRequest": {
            "description": "Request to get a list of Workfront Users for the specified SearchQuery.",
            "id": "SearchUserRequest",
            "properties": {
                "fieldMask": {
                    "description": "Field mask specifying User fields to be retrieved.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "paginator": {
                    "$ref": "Paginator",
                    "description": "Paginator specifying the limit and the offset for the resulting set.\nIt is required because Workfront always limits the number of top level\nentities in the response."
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                },
                "searchQuery": {
                    "$ref": "SearchQuery",
                    "description": "SearchQuery with all the constraints and ordering."
                }
            },
            "type": "object"
        },
        "SearchUserResponse": {
            "description": "Response with the list of Users matching the query in the request.",
            "id": "SearchUserResponse",
            "properties": {
                "entities": {
                    "description": "List of matching Users.",
                    "items": {
                        "$ref": "User"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Share": {
            "description": "This object is also refereed to as access rules (acsrul)\nNext tag = 13",
            "id": "Share",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "accessorID": {
                    "type": "string"
                },
                "accessorObjCode": {
                    "type": "string"
                },
                "ancestorID": {
                    "type": "string"
                },
                "ancestorObjCode": {
                    "type": "string"
                },
                "coreAction": {
                    "type": "string"
                },
                "customerID": {
                    "type": "string"
                },
                "forbiddenActions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "secondaryActions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "securityObjCode": {
                    "type": "string"
                },
                "securityObjID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SortExpression": {
            "description": "Single sort expression defining sort order over one Workfront entity field.",
            "id": "SortExpression",
            "properties": {
                "field": {
                    "description": "Field to sort on.",
                    "type": "string"
                },
                "order": {
                    "description": "Sorting order for the specified field.",
                    "enum": [
                        "UNKNOWN",
                        "ASC",
                        "DESC"
                    ],
                    "enumDescriptions": [
                        "Unknown value, does not represent a valid sort order.",
                        "Ascending sort order.",
                        "Descending sort order."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Task": {
            "description": "Next tag = 67",
            "id": "Task",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "URL": {
                    "type": "string"
                },
                "actualCompletionDate": {
                    "type": "string"
                },
                "actualDurationMinutes": {
                    "format": "int32",
                    "type": "integer"
                },
                "actualStartDate": {
                    "type": "string"
                },
                "actualWork": {
                    "format": "double",
                    "type": "number"
                },
                "actualWorkRequired": {
                    "format": "int32",
                    "type": "integer"
                },
                "approvalEstStartDate": {
                    "type": "string"
                },
                "approvalPlannedStartDate": {
                    "type": "string"
                },
                "approvalPlannedStartDay": {
                    "format": "double",
                    "type": "number"
                },
                "approvalProjectedStartDate": {
                    "type": "string"
                },
                "assignedTo": {
                    "$ref": "User"
                },
                "assignedToID": {
                    "type": "string"
                },
                "assignments": {
                    "items": {
                        "$ref": "Assignment"
                    },
                    "type": "array"
                },
                "canStart": {
                    "type": "boolean"
                },
                "categoryID": {
                    "description": "Obsolete field. Use objectCategories.",
                    "type": "string"
                },
                "children": {
                    "items": {
                        "$ref": "Task"
                    },
                    "type": "array"
                },
                "commitDate": {
                    "type": "string"
                },
                "condition": {
                    "format": "int32",
                    "type": "integer"
                },
                "constraintDate": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string"
                },
                "duration": {
                    "format": "float",
                    "type": "number"
                },
                "durationMinutes": {
                    "format": "uint64",
                    "type": "string"
                },
                "durationType": {
                    "type": "string"
                },
                "durationUnit": {
                    "type": "string"
                },
                "enteredBy": {
                    "$ref": "User"
                },
                "enteredByID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "groupID": {
                    "type": "string"
                },
                "isCritical": {
                    "type": "boolean"
                },
                "iterationID": {
                    "type": "string"
                },
                "lastUpdateDate": {
                    "type": "string"
                },
                "lastUpdatedByID": {
                    "type": "string"
                },
                "milestone": {
                    "$ref": "Milestone"
                },
                "milestoneID": {
                    "description": "Has to be unique inside of the project\nand the project has to have milestonePath set.",
                    "type": "string"
                },
                "name": {
                    "description": "Mandatory for new tasks.",
                    "type": "string"
                },
                "numberOfChildren": {
                    "format": "uint64",
                    "type": "string"
                },
                "numberOpenOpTasks": {
                    "description": "Number of Open Issues",
                    "format": "int32",
                    "type": "integer"
                },
                "objectCategories": {
                    "description": "Custom forms assigned to the task.",
                    "items": {
                        "$ref": "ObjectCategory"
                    },
                    "type": "array"
                },
                "parameterValues": {
                    "description": "If you request 'parameterValues' in request all custom fields for object are\nreturned as JSON object. Workfront client converts it to JSON Array. Also all\nfields with 'DE:' prefix will be moved under this field.\n\nDocs:\nhttps://developers.workfront.com/api-docs/#CustomData",
                    "items": {
                        "$ref": "CustomField"
                    },
                    "type": "array"
                },
                "parent": {
                    "$ref": "Task"
                },
                "parentID": {
                    "type": "string"
                },
                "percentComplete": {
                    "description": "Changing this value can change the status field.\nIf the percentComplete changes to less than 100 the status changes\nfrom Complete to In Progress.\nIf the percentComplete changes to 100 the status changes to Complete.",
                    "format": "double",
                    "type": "number"
                },
                "plannedCompletionDate": {
                    "type": "string"
                },
                "plannedStartDate": {
                    "type": "string"
                },
                "predecessors": {
                    "description": "The successors and predecessors are defined by the same message Predecessor.\nA Predecessor message contains in it both source and destination.",
                    "items": {
                        "$ref": "Predecessor"
                    },
                    "type": "array"
                },
                "priority": {
                    "format": "uint32",
                    "type": "integer"
                },
                "progressStatus": {
                    "type": "string"
                },
                "project": {
                    "$ref": "Project"
                },
                "projectID": {
                    "description": "Mandatory for new tasks.",
                    "type": "string"
                },
                "projectedCompletionDate": {
                    "type": "string"
                },
                "projectedStartDate": {
                    "type": "string"
                },
                "referenceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "roleID": {
                    "type": "string"
                },
                "status": {
                    "description": "Changing this value can change the percentComplete.\nhttps://support.workfront.com/hc/en-us/articles/216636448-Understanding-Tracking-Mode-for-Tasks\nIf the status is changed from Complete to New or In Progress\nthe percentComplete changes to 0.\nIf the status is changed to Complete the percentComplete changes to 100.",
                    "type": "string"
                },
                "submittedByID": {
                    "type": "string"
                },
                "successors": {
                    "items": {
                        "$ref": "Predecessor"
                    },
                    "type": "array"
                },
                "taskConstraint": {
                    "description": "This field controls how the dates on the Task are computed.\nhttps://support.workfront.com/hc/en-us/articles/217297147-Task-Constraint-Overview",
                    "type": "string"
                },
                "taskNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "taskNumberPredecessorString": {
                    "type": "string"
                },
                "teamID": {
                    "type": "string"
                },
                "templateTaskID": {
                    "type": "string"
                },
                "updates": {
                    "items": {
                        "$ref": "Update"
                    },
                    "type": "array"
                },
                "work": {
                    "format": "double",
                    "type": "number"
                },
                "workRequired": {
                    "description": "Workfront ignores updates on it. Use \"work\" instead.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Team": {
            "description": "Next tag = 8",
            "id": "Team",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerID": {
                    "type": "string"
                },
                "scheduleID": {
                    "type": "string"
                },
                "taskStatuses": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "teamMembers": {
                    "items": {
                        "$ref": "TeamMember"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TeamMember": {
            "description": "Next tag = 3",
            "id": "TeamMember",
            "properties": {
                "user": {
                    "$ref": "User"
                },
                "userID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Template": {
            "description": "Next tag = 7",
            "id": "Template",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "enteredByID": {
                    "type": "string"
                },
                "lastUpdateDate": {
                    "type": "string"
                },
                "lastUpdatedByID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TemplateTask": {
            "description": "Next tag = 15",
            "id": "TemplateTask",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "categoryID": {
                    "description": "Obsolete field. Use objectCategories.",
                    "type": "string"
                },
                "children": {
                    "items": {
                        "$ref": "TemplateTask"
                    },
                    "type": "array"
                },
                "description": {
                    "type": "string"
                },
                "durationType": {
                    "type": "string"
                },
                "durationUnit": {
                    "type": "string"
                },
                "milestoneID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "objectCategories": {
                    "description": "Custom forms assigned to the template task.",
                    "items": {
                        "$ref": "ObjectCategory"
                    },
                    "type": "array"
                },
                "parentID": {
                    "type": "string"
                },
                "plannedDuration": {
                    "format": "double",
                    "type": "number"
                },
                "priority": {
                    "format": "uint32",
                    "type": "integer"
                },
                "taskNumber": {
                    "format": "uint64",
                    "type": "string"
                },
                "templateID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Update": {
            "description": "Next tag = 15",
            "id": "Update",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "enteredByID": {
                    "type": "string"
                },
                "entryDate": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "refObjCode": {
                    "type": "string"
                },
                "refObjID": {
                    "type": "string"
                },
                "styledMessage": {
                    "type": "string"
                },
                "subMessage": {
                    "type": "string"
                },
                "subObjCode": {
                    "type": "string"
                },
                "subObjID": {
                    "type": "string"
                },
                "updateActions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "updateObjCode": {
                    "type": "string"
                },
                "updateObjID": {
                    "type": "string"
                },
                "updateType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateGroupRequest": {
            "description": "Request to update specified fields of a Workfront Group.",
            "id": "UpdateGroupRequest",
            "properties": {
                "entity": {
                    "$ref": "Group",
                    "description": "New values of Group fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Group fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateGroupResponse": {
            "description": "Response with the updated Workfront Group.",
            "id": "UpdateGroupResponse",
            "properties": {
                "entity": {
                    "$ref": "Group",
                    "description": "Updated Group, may differ from the Group in the update request."
                }
            },
            "type": "object"
        },
        "UpdateIssueRequest": {
            "description": "Request to update specified fields of a Workfront Issue.",
            "id": "UpdateIssueRequest",
            "properties": {
                "entity": {
                    "$ref": "Issue",
                    "description": "New values of Issue fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Issue fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateIssueResponse": {
            "description": "Response with the updated Workfront Issue.",
            "id": "UpdateIssueResponse",
            "properties": {
                "entity": {
                    "$ref": "Issue",
                    "description": "Updated Issue, may differ from the Issue in the update request."
                }
            },
            "type": "object"
        },
        "UpdateNoteRequest": {
            "description": "Request to update specified fields of a Workfront Note.",
            "id": "UpdateNoteRequest",
            "properties": {
                "entity": {
                    "$ref": "Note",
                    "description": "New values of Note fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Note fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateNoteResponse": {
            "description": "Response with the updated Workfront Note.",
            "id": "UpdateNoteResponse",
            "properties": {
                "entity": {
                    "$ref": "Note",
                    "description": "Updated Note, may differ from the Note in the update request."
                }
            },
            "type": "object"
        },
        "UpdatePortfolioRequest": {
            "description": "Request to update specified fields of a Workfront Portfolio.",
            "id": "UpdatePortfolioRequest",
            "properties": {
                "entity": {
                    "$ref": "Portfolio",
                    "description": "New values of Portfolio fields, only fields in field_mask will be\nconsidered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Portfolio fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdatePortfolioResponse": {
            "description": "Response with the updated Workfront Portfolio.",
            "id": "UpdatePortfolioResponse",
            "properties": {
                "entity": {
                    "$ref": "Portfolio",
                    "description": "Updated Portfolio, may differ from the Portfolio in the update request."
                }
            },
            "type": "object"
        },
        "UpdateProgramRequest": {
            "description": "Request to update specified fields of a Workfront Program.",
            "id": "UpdateProgramRequest",
            "properties": {
                "entity": {
                    "$ref": "Program",
                    "description": "New values of Program fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Program fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateProgramResponse": {
            "description": "Response with the updated Workfront Program.",
            "id": "UpdateProgramResponse",
            "properties": {
                "entity": {
                    "$ref": "Program",
                    "description": "Updated Program, may differ from the Program in the update request."
                }
            },
            "type": "object"
        },
        "UpdateProjectRequest": {
            "description": "Request to update specified fields of a Workfront Project.",
            "id": "UpdateProjectRequest",
            "properties": {
                "entity": {
                    "$ref": "Project",
                    "description": "New values of Project fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Project fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateProjectResponse": {
            "description": "Response with the updated Workfront Project.",
            "id": "UpdateProjectResponse",
            "properties": {
                "entity": {
                    "$ref": "Project",
                    "description": "Updated Project, may differ from the Project in the update request."
                }
            },
            "type": "object"
        },
        "UpdateReservedTimeRequest": {
            "description": "Request to update specified fields of a Workfront ReservedTime.",
            "id": "UpdateReservedTimeRequest",
            "properties": {
                "entity": {
                    "$ref": "ReservedTime",
                    "description": "New values of ReservedTime fields, only fields in field_mask will be\nconsidered."
                },
                "fieldMask": {
                    "description": "Field mask specifying ReservedTime fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateReservedTimeResponse": {
            "description": "Response with the updated Workfront ReservedTime.",
            "id": "UpdateReservedTimeResponse",
            "properties": {
                "entity": {
                    "$ref": "ReservedTime",
                    "description": "Updated ReservedTime, may differ from the ReservedTime in the update\nrequest."
                }
            },
            "type": "object"
        },
        "UpdateScheduleRequest": {
            "description": "Request to update specified fields of a Workfront Schedule.",
            "id": "UpdateScheduleRequest",
            "properties": {
                "entity": {
                    "$ref": "Schedule",
                    "description": "New values of Schedule fields, only fields in field_mask will be\nconsidered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Schedule fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateScheduleResponse": {
            "description": "Response with the updated Workfront Schedule.",
            "id": "UpdateScheduleResponse",
            "properties": {
                "entity": {
                    "$ref": "Schedule",
                    "description": "Updated Schedule, may differ from the Schedule in the update request."
                }
            },
            "type": "object"
        },
        "UpdateTaskRequest": {
            "description": "Request to update specified fields of a Workfront Task.",
            "id": "UpdateTaskRequest",
            "properties": {
                "entity": {
                    "$ref": "Task",
                    "description": "New values of Task fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Task fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateTaskResponse": {
            "description": "Response with the updated Workfront Task.",
            "id": "UpdateTaskResponse",
            "properties": {
                "entity": {
                    "$ref": "Task",
                    "description": "Updated Task, may differ from the Task in the update request."
                }
            },
            "type": "object"
        },
        "UpdateTeamRequest": {
            "description": "Request to update specified fields of a Workfront Team.",
            "id": "UpdateTeamRequest",
            "properties": {
                "entity": {
                    "$ref": "Team",
                    "description": "New values of Team fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Team fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateTeamResponse": {
            "description": "Response with the updated Workfront Team.",
            "id": "UpdateTeamResponse",
            "properties": {
                "entity": {
                    "$ref": "Team",
                    "description": "Updated Team, may differ from the Team in the update request."
                }
            },
            "type": "object"
        },
        "UpdateTemplateRequest": {
            "description": "Request to update specified fields of a Workfront Template.",
            "id": "UpdateTemplateRequest",
            "properties": {
                "entity": {
                    "$ref": "Template",
                    "description": "New values of Template fields, only fields in field_mask will be\nconsidered."
                },
                "fieldMask": {
                    "description": "Field mask specifying Template fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateTemplateResponse": {
            "description": "Response with the updated Workfront Template.",
            "id": "UpdateTemplateResponse",
            "properties": {
                "entity": {
                    "$ref": "Template",
                    "description": "Updated Template, may differ from the Template in the update request."
                }
            },
            "type": "object"
        },
        "UpdateTemplateTaskRequest": {
            "description": "Request to update specified fields of a Workfront TemplateTask.",
            "id": "UpdateTemplateTaskRequest",
            "properties": {
                "entity": {
                    "$ref": "TemplateTask",
                    "description": "New values of TemplateTask fields, only fields in field_mask will be\nconsidered."
                },
                "fieldMask": {
                    "description": "Field mask specifying TemplateTask fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateTemplateTaskResponse": {
            "description": "Response with the updated Workfront TemplateTask.",
            "id": "UpdateTemplateTaskResponse",
            "properties": {
                "entity": {
                    "$ref": "TemplateTask",
                    "description": "Updated TemplateTask, may differ from the TemplateTask in the update\nrequest."
                }
            },
            "type": "object"
        },
        "UpdateUserRequest": {
            "description": "Request to update specified fields of a Workfront User.",
            "id": "UpdateUserRequest",
            "properties": {
                "entity": {
                    "$ref": "User",
                    "description": "New values of User fields, only fields in field_mask will be considered."
                },
                "fieldMask": {
                    "description": "Field mask specifying User fields to be to be considered,\nif not provided then all are passed to Workfront.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "requestMetadata": {
                    "$ref": "RequestMetadata",
                    "description": "Request metadata, specifying the service account to act as on Workfront."
                }
            },
            "type": "object"
        },
        "UpdateUserResponse": {
            "description": "Response with the updated Workfront User.",
            "id": "UpdateUserResponse",
            "properties": {
                "entity": {
                    "$ref": "User",
                    "description": "Updated User, may differ from the User in the update request."
                }
            },
            "type": "object"
        },
        "User": {
            "description": "Next tag = 35",
            "id": "User",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "accessLevelID": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "apiKeyCreateDate": {
                    "type": "string"
                },
                "categoryID": {
                    "description": "Obsolete field. Use objectCategories.",
                    "type": "string"
                },
                "companyID": {
                    "type": "string"
                },
                "emailAddr": {
                    "type": "string"
                },
                "enteredBy": {
                    "$ref": "User"
                },
                "entryDate": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "fte": {
                    "format": "double",
                    "type": "number"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "homeGroupID": {
                    "type": "string"
                },
                "homeTeamID": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isAdmin": {
                    "type": "boolean"
                },
                "lastLoginDate": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "lastUpdateDate": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "$ref": "User"
                },
                "licenseType": {
                    "type": "string"
                },
                "manager": {
                    "$ref": "User"
                },
                "managerID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "objectCategories": {
                    "description": "Custom forms assigned to the user.",
                    "items": {
                        "$ref": "ObjectCategory"
                    },
                    "type": "array"
                },
                "parameterValues": {
                    "description": "If you request 'parameterValues' in request all custom fields for object are\nreturned as JSON object. Workfront client converts it to JSON Array. Also all\nfields with 'DE:' prefix will be moved under this field.\n\nDocs:\nhttps://developers.workfront.com/api-docs/#CustomData",
                    "items": {
                        "$ref": "CustomField"
                    },
                    "type": "array"
                },
                "reservedTimes": {
                    "items": {
                        "$ref": "ReservedTime"
                    },
                    "type": "array"
                },
                "roleID": {
                    "type": "string"
                },
                "scheduleID": {
                    "type": "string"
                },
                "ssoAccessOnly": {
                    "type": "boolean"
                },
                "ssoUsername": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserGroup": {
            "description": "Next tag = 4",
            "id": "UserGroup",
            "properties": {
                "isOwner": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "User"
                },
                "userID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ValuesInterval": {
            "description": "Represents a closed interval of values.",
            "id": "ValuesInterval",
            "properties": {
                "from": {
                    "description": "Start of the interval (including the value itself).",
                    "type": "string"
                },
                "to": {
                    "description": "End of the interval (including the value itself).",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Workfront Private API (Dev)",
    "version": "v1",
    "version_module": true
}