{
    "basePath": "",
    "baseUrl": "https://canary-cartrip-pa.sandbox.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Car Trip",
    "description": "A private API for requesting trips from self-driving cars.",
    "discoveryVersion": "v1",
    "documentationLink": "http://go/chauffeur",
    "fullyEncodeReservedExpansion": true,
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "canary_cartrip_pa_sandbox:v2alpha",
    "kind": "discovery#restDescription",
    "name": "canary_cartrip_pa_sandbox",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "billing": {
            "methods": {
                "createPaymentMethod": {
                    "description": "Adds the specified payment method for this user.",
                    "flatPath": "v2alpha/billing:createPaymentMethod",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.billing.createPaymentMethod",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/billing:createPaymentMethod",
                    "request": {
                        "$ref": "CreatePaymentMethodRequest"
                    },
                    "response": {
                        "$ref": "CreatePaymentMethodResponse"
                    }
                },
                "deletePaymentMethod": {
                    "description": "Removes the specified payment method for this user.",
                    "flatPath": "v2alpha/billing:deletePaymentMethod",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.billing.deletePaymentMethod",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/billing:deletePaymentMethod",
                    "request": {
                        "$ref": "DeletePaymentMethodRequest"
                    },
                    "response": {
                        "$ref": "Empty"
                    }
                },
                "listGetPaymentMethods": {
                    "description": "Lists payment methods for this user.",
                    "flatPath": "v2alpha/billing:getPaymentMethods",
                    "httpMethod": "GET",
                    "id": "canary_cartrip_pa_sandbox.billing.listGetPaymentMethods",
                    "parameterOrder": [],
                    "parameters": {
                        "requestCommon.clientVersion.clientName": {
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.clientVersion.clientVersion": {
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.forcedExperimentIds": {
                            "description": "IDs of experiments to force-enable. These must be configured to be\nforceable by attaching taas-specific metadata to the Mendel experiments,\notherwise they will be ignored. See:\ngoogle3/googledata/experiments/chauffeur/trips/experiment_metadata.proto.",
                            "format": "int32",
                            "location": "query",
                            "repeated": true,
                            "type": "integer"
                        },
                        "requestCommon.requestId": {
                            "description": "ID generated by the client for each request. This does not have to be\nglobally unique, since it is client generated, but should be easy to\nidentify in logs for a specific user.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/billing:getPaymentMethods",
                    "response": {
                        "$ref": "ListPaymentMethodsResponse"
                    }
                },
                "processCharge": {
                    "description": "Processes a charge for a given trip. The billing system already processes\ncharges automatically upon trip completion - this is useful in the case of\nmanual retries (e.g. if the client wishes to resolve some earlier error\nwith the payment).",
                    "flatPath": "v2alpha/billing:processCharge",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.billing.processCharge",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/billing:processCharge",
                    "request": {
                        "$ref": "ProcessChargeRequest"
                    },
                    "response": {
                        "$ref": "ProcessChargeResponse"
                    }
                },
                "updatePaymentMethod": {
                    "description": "Updates payment details for the specified payment method.",
                    "flatPath": "v2alpha/billing:updatePaymentMethod",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.billing.updatePaymentMethod",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/billing:updatePaymentMethod",
                    "request": {
                        "$ref": "UpdatePaymentMethodRequest"
                    },
                    "response": {
                        "$ref": "UpdatePaymentMethodResponse"
                    }
                }
            }
        },
        "liveHelp": {
            "methods": {
                "callback": {
                    "description": "Initiates a live help call.",
                    "flatPath": "v2alpha/liveHelp:callback",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.liveHelp.callback",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/liveHelp:callback",
                    "request": {
                        "$ref": "LiveHelpCallbackRequest"
                    },
                    "response": {
                        "$ref": "LiveHelpCallbackResponse"
                    }
                }
            }
        },
        "locations": {
            "methods": {
                "clearHistory": {
                    "description": "Clears all locations surfaced in the rider's pickup/dropoff history. Does\nnot delete favorites.",
                    "flatPath": "v2alpha/locations:clearHistory",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.locations.clearHistory",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/locations:clearHistory",
                    "request": {
                        "$ref": "ClearLocationHistoryRequest"
                    },
                    "response": {
                        "$ref": "ClearLocationHistoryResponse"
                    }
                },
                "createFavorite": {
                    "description": "Mark a new favorite location.",
                    "flatPath": "v2alpha/locations:createFavorite",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.locations.createFavorite",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/locations:createFavorite",
                    "request": {
                        "$ref": "CreateFavoriteLocationRequest"
                    },
                    "response": {
                        "$ref": "CreateFavoriteLocationResponse"
                    }
                },
                "deleteFavorite": {
                    "description": "Either un-favorite a location if it is a 'favorite', or remove any record\nof the location if it is a 'recent'.",
                    "flatPath": "v2alpha/locations/{locationsId}:deleteFavorite",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.locations.deleteFavorite",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/locations/{+id}:deleteFavorite",
                    "request": {
                        "$ref": "DeleteFavoriteLocationRequest"
                    },
                    "response": {
                        "$ref": "DeleteFavoriteLocationResponse"
                    }
                },
                "list": {
                    "description": "List all favorite and recently-used locations.",
                    "flatPath": "v2alpha/locations",
                    "httpMethod": "GET",
                    "id": "canary_cartrip_pa_sandbox.locations.list",
                    "parameterOrder": [],
                    "parameters": {
                        "locationUsage": {
                            "description": "Client can use UNSPECIFIED to return both favorite and\nrecent locations.",
                            "enum": [
                                "UNSPECIFIED",
                                "FAVORITE",
                                "RECENT"
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "oldestFavoriteTime": {
                            "description": "Only include favorite locations with a last-use time newer than this.\nOptional. If not provided, all favorite locations would be returned.",
                            "format": "google-datetime",
                            "location": "query",
                            "type": "string"
                        },
                        "oldestRecentTime": {
                            "description": "Only include recent locations with a last-use time newer than this.\nOptional. If not provided, all recent locations would be returned.",
                            "format": "google-datetime",
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.clientVersion.clientName": {
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.clientVersion.clientVersion": {
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.forcedExperimentIds": {
                            "description": "IDs of experiments to force-enable. These must be configured to be\nforceable by attaching taas-specific metadata to the Mendel experiments,\notherwise they will be ignored. See:\ngoogle3/googledata/experiments/chauffeur/trips/experiment_metadata.proto.",
                            "format": "int32",
                            "location": "query",
                            "repeated": true,
                            "type": "integer"
                        },
                        "requestCommon.requestId": {
                            "description": "ID generated by the client for each request. This does not have to be\nglobally unique, since it is client generated, but should be easy to\nidentify in logs for a specific user.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/locations",
                    "response": {
                        "$ref": "ListLocationsResponse"
                    }
                },
                "updateFavorite": {
                    "description": "Change the name and/or description of a favorite location.",
                    "flatPath": "v2alpha/locations/{locationsId}:updateFavorite",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.locations.updateFavorite",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID is ignored when supplied by the client anywhere but the\nLocation API calls.",
                            "location": "path",
                            "pattern": "^[^/]+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/locations/{+id}:updateFavorite",
                    "request": {
                        "$ref": "UpdateFavoriteLocationRequest"
                    },
                    "response": {
                        "$ref": "UpdateFavoriteLocationResponse"
                    }
                }
            }
        },
        "phone": {
            "methods": {
                "finishVerification": {
                    "description": "Note that finishing the verification process on a number effectively\nupdates the user's profile with that number.",
                    "flatPath": "v2alpha/phone:finishVerification",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.phone.finishVerification",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/phone:finishVerification",
                    "request": {
                        "$ref": "FinishPhoneNumberVerificationRequest"
                    },
                    "response": {
                        "$ref": "FinishPhoneNumberVerificationResponse"
                    }
                },
                "startVerification": {
                    "description": "Initiate verification of a user's phone number. The user will\nreceive and SMS or phone call with a code. Follow up by passing\nthat code through FinishPhoneNumberVerification().",
                    "flatPath": "v2alpha/phone:startVerification",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.phone.startVerification",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/phone:startVerification",
                    "request": {
                        "$ref": "StartPhoneNumberVerificationRequest"
                    },
                    "response": {
                        "$ref": "StartPhoneNumberVerificationResponse"
                    }
                }
            }
        },
        "trips": {
            "methods": {
                "ackTickles": {
                    "description": "Acknowledge receipt of tickles. Acknowledged tickles will no\nno longer appear in ClientTrip::unread_tickles.",
                    "flatPath": "v2alpha/trips:ackTickles",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.ackTickles",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:ackTickles",
                    "request": {
                        "$ref": "AcknowledgeTicklesRequest"
                    },
                    "response": {
                        "$ref": "AcknowledgeTicklesResponse"
                    }
                },
                "applyPromoCode": {
                    "description": "Try to apply a promo code to this user's promotion account.",
                    "flatPath": "v2alpha/trips:applyPromoCode",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.applyPromoCode",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:applyPromoCode",
                    "request": {
                        "$ref": "ApplyPromoCodeRequest"
                    },
                    "response": {
                        "$ref": "ApplyPromoCodeResponse"
                    }
                },
                "cancelActiveTrip": {
                    "description": "Cancel the active trip. Cancellation may be requested at any point in the\ntrip, though late cancellations or cancellations that arrive after the\npassenger has boarded the vehicle may result in a charge.",
                    "flatPath": "v2alpha/trips/{tripId}:cancelActiveTrip",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.cancelActiveTrip",
                    "parameterOrder": [
                        "tripId"
                    ],
                    "parameters": {
                        "tripId": {
                            "description": "The trip the client believes is active. If this is not the\nactive trip, the cancel is ignored and details for the active\ntrip are returned in the response.\ntrip_id may not be empty.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/trips/{tripId}:cancelActiveTrip",
                    "request": {
                        "$ref": "CancelActiveTripRequest"
                    },
                    "response": {
                        "$ref": "CancelActiveTripResponse"
                    }
                },
                "create": {
                    "description": "Request a \"trip\", i.e. transportation from A to B. The created\ntrip becomes the \"active trip\" until the passenger has either\narrived at their destination or cancelled the request.",
                    "flatPath": "v2alpha/trips",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.create",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips",
                    "request": {
                        "$ref": "CreateTripRequest"
                    },
                    "response": {
                        "$ref": "CreateTripResponse"
                    }
                },
                "deleteFromHistory": {
                    "description": "Deletes a trip from footprints. This affects whether the user can\nsee the trip and whether it's available for personalization, but\ndetails about the trip might persist in other logging sources\n(eg, waybill records).",
                    "flatPath": "v2alpha/trips:deleteFromHistory",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.deleteFromHistory",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:deleteFromHistory",
                    "request": {
                        "$ref": "DeleteTripSummaryRequest"
                    },
                    "response": {
                        "$ref": "DeleteTripSummaryResponse"
                    }
                },
                "determineFare": {
                    "description": "Get a fare estimate for a proposed trip. The trip may not be an existing\ntrip or a new one.",
                    "flatPath": "v2alpha/trips:determineFare",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.determineFare",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:determineFare",
                    "request": {
                        "$ref": "DetermineFareRequest"
                    },
                    "response": {
                        "$ref": "DetermineFareResponse"
                    }
                },
                "feedback": {
                    "description": "Add customer feedback entries regarding any number of distinct trips.",
                    "flatPath": "v2alpha/trips:feedback",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.feedback",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:feedback",
                    "request": {
                        "$ref": "AddFeedbackRequest"
                    },
                    "response": {
                        "$ref": "AddFeedbackResponse"
                    }
                },
                "flyby": {
                    "description": "This request should only be made when the user has an active trip, but\nthe trip ID is not included in the request. The server knows your active\ntrip.",
                    "flatPath": "v2alpha/trips:flyby",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.flyby",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:flyby",
                    "request": {
                        "$ref": "SendLocationDataRequest"
                    },
                    "response": {
                        "$ref": "SendLocationDataResponse"
                    }
                },
                "getActiveTrip": {
                    "description": "Get the currently active trip. If the trip_id and the various\nversion fields are provided in the request, only return values\nfor those fields where a new version is available.  An active\ntrip is any trip not in state COMPLETED or CANCELLED\ncf. TripStatus.State.",
                    "flatPath": "v2alpha/trips:getActiveTrip",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.getActiveTrip",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:getActiveTrip",
                    "request": {
                        "$ref": "GetActiveTripRequest"
                    },
                    "response": {
                        "$ref": "GetActiveTripResponse"
                    }
                },
                "getReachabilitySegments": {
                    "description": "Get segments of vehicle-reachable roadgraph for users to help users\nchoose pickup and dropoff points.",
                    "flatPath": "v2alpha/trips:getReachabilitySegments",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.getReachabilitySegments",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:getReachabilitySegments",
                    "request": {
                        "$ref": "GetReachabilitySegmentsRequest"
                    },
                    "response": {
                        "$ref": "GetReachabilitySegmentsResponse"
                    }
                },
                "listPromotions": {
                    "description": "Get a list of promotions and their availalabilities for this user.",
                    "flatPath": "v2alpha/trips:listPromotions",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.listPromotions",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:listPromotions",
                    "request": {
                        "$ref": "ListPromotionsRequest"
                    },
                    "response": {
                        "$ref": "ListPromotionsResponse"
                    }
                },
                "listTripsSummary": {
                    "description": "Return a summary of trips completed or cancelled by the user within a\na time window. The window applies to the trip start time.",
                    "flatPath": "v2alpha/trips:listTripsSummary",
                    "httpMethod": "GET",
                    "id": "canary_cartrip_pa_sandbox.trips.listTripsSummary",
                    "parameterOrder": [],
                    "parameters": {
                        "endTime": {
                            "format": "google-datetime",
                            "location": "query",
                            "type": "string"
                        },
                        "maxResults": {
                            "description": "Max number of results to include in the response. Results are returned in\ndescending order by trip_id (most recent to oldest, by request time).\n\nLeaving this set to zero means there is no limit on the response size.",
                            "format": "int32",
                            "location": "query",
                            "type": "integer"
                        },
                        "requestCommon.clientVersion.clientName": {
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.clientVersion.clientVersion": {
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.forcedExperimentIds": {
                            "description": "IDs of experiments to force-enable. These must be configured to be\nforceable by attaching taas-specific metadata to the Mendel experiments,\notherwise they will be ignored. See:\ngoogle3/googledata/experiments/chauffeur/trips/experiment_metadata.proto.",
                            "format": "int32",
                            "location": "query",
                            "repeated": true,
                            "type": "integer"
                        },
                        "requestCommon.requestId": {
                            "description": "ID generated by the client for each request. This does not have to be\nglobally unique, since it is client generated, but should be easy to\nidentify in logs for a specific user.",
                            "location": "query",
                            "type": "string"
                        },
                        "startTime": {
                            "description": "Only trips created between these start and end boundaries, inclusive, will\nbe included in the response.",
                            "format": "google-datetime",
                            "location": "query",
                            "type": "string"
                        },
                        "tripSummaryFieldMask": {
                            "description": "Which fields to be included in the result. If not set, all fields\nare returned. The field mask paths are rooted in\nClientTripSummary and apply only to the elements of the\ntrip_summaries field in the response.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/trips:listTripsSummary",
                    "response": {
                        "$ref": "ListTripsSummaryResponse"
                    }
                },
                "proposeTripPlan": {
                    "description": "Given a proposed plan, return one or more plans that each include feasible\nadjusted pickup/dropoff locations, a vehicle ETA, and a fare estimate.",
                    "flatPath": "v2alpha/trips:proposeTripPlan",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.proposeTripPlan",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:proposeTripPlan",
                    "request": {
                        "$ref": "ProposeTripPlanRequest"
                    },
                    "response": {
                        "$ref": "ProposeTripPlanResponse"
                    }
                },
                "sendCarAction": {
                    "description": "RPC that that allows the user to send a request directly to the\ncar. The RPC will only succeed if the user currently has an active trip\nin a state where the car is expected to be close to the user.",
                    "flatPath": "v2alpha/trips:sendCarAction",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.sendCarAction",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/trips:sendCarAction",
                    "request": {
                        "$ref": "SendCarActionRequest"
                    },
                    "response": {
                        "$ref": "SendCarActionResponse"
                    }
                },
                "updateActiveTrip": {
                    "description": "Modify the active trip in some way.",
                    "flatPath": "v2alpha/trips/{tripId}:updateActiveTrip",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.updateActiveTrip",
                    "parameterOrder": [
                        "tripId"
                    ],
                    "parameters": {
                        "tripId": {
                            "description": "The ID of the trip the client believes is active.\nIf the trip_id does not match the current active trip, the update request\nis ignored, and the response will contain the current active trip.\nIf there is no active trip, the response will be empty.\ntrip_id may not be empty.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/trips/{tripId}:updateActiveTrip",
                    "request": {
                        "$ref": "UpdateActiveTripRequest"
                    },
                    "response": {
                        "$ref": "UpdateActiveTripResponse"
                    }
                },
                "updateActiveTripPaymentMethod": {
                    "description": "Modify the payment method to be charged for the active trip.",
                    "flatPath": "v2alpha/trips/{tripId}:updateActiveTripPaymentMethod",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.trips.updateActiveTripPaymentMethod",
                    "parameterOrder": [
                        "tripId"
                    ],
                    "parameters": {
                        "tripId": {
                            "description": "The trip the client believes is active.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v2alpha/trips/{tripId}:updateActiveTripPaymentMethod",
                    "request": {
                        "$ref": "UpdateActiveTripPaymentMethodRequest"
                    },
                    "response": {
                        "$ref": "UpdateActiveTripPaymentMethodResponse"
                    }
                }
            }
        },
        "v2alpha": {
            "methods": {
                "addDsamRideFeedback": {
                    "description": "Add Driver Sam (dSAM) concierge feedback. See also go/concierge-dsam.\nThis is not a user-facing RPC but rather one restricted to chauffeur-ops.",
                    "flatPath": "v2alpha/addDsamRideFeedback",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.addDsamRideFeedback",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/addDsamRideFeedback",
                    "request": {
                        "$ref": "AddDsamRideFeedbackRequest"
                    },
                    "response": {
                        "$ref": "AddDsamRideFeedbackResponse"
                    }
                },
                "deleteAccount": {
                    "description": "Deletes a user's account.",
                    "flatPath": "v2alpha/deleteAccount",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.deleteAccount",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/deleteAccount",
                    "request": {
                        "$ref": "DeleteAccountRequest"
                    },
                    "response": {
                        "$ref": "DeleteAccountResponse"
                    }
                },
                "gcmRegistration": {
                    "description": "Request to link a Google Cloud Messaging registration ID to the user's\naccount to receive push notifications.",
                    "flatPath": "v2alpha:gcmRegistration",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.gcmRegistration",
                    "parameterOrder": [],
                    "parameters": {
                        "requestCommon.clientVersion.clientName": {
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.clientVersion.clientVersion": {
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.forcedExperimentIds": {
                            "description": "IDs of experiments to force-enable. These must be configured to be\nforceable by attaching taas-specific metadata to the Mendel experiments,\notherwise they will be ignored. See:\ngoogle3/googledata/experiments/chauffeur/trips/experiment_metadata.proto.",
                            "format": "int32",
                            "location": "query",
                            "repeated": true,
                            "type": "integer"
                        },
                        "requestCommon.requestId": {
                            "description": "ID generated by the client for each request. This does not have to be\nglobally unique, since it is client generated, but should be easy to\nidentify in logs for a specific user.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v2alpha:gcmRegistration",
                    "request": {
                        "$ref": "GcmRegistration"
                    },
                    "response": {
                        "$ref": "GcmRegistration"
                    }
                },
                "getAccountStatus": {
                    "description": "Retrieve user's account status.",
                    "flatPath": "v2alpha:getAccountStatus",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.getAccountStatus",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha:getAccountStatus",
                    "request": {
                        "$ref": "GetAccountStatusRequest"
                    },
                    "response": {
                        "$ref": "GetAccountStatusResponse"
                    }
                },
                "getAgreementKey": {
                    "description": "Gets the key for accessing Terms of Service & Privacy Policy that users\nmust accept before registering or using the service.",
                    "flatPath": "v2alpha:getAgreementKey",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.getAgreementKey",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha:getAgreementKey",
                    "request": {
                        "$ref": "GetAgreementKeyRequest"
                    },
                    "response": {
                        "$ref": "GetAgreementKeyResponse"
                    }
                },
                "getDebugSettings": {
                    "description": "Returns developer settings for internal use.",
                    "flatPath": "v2alpha:getDebugSettings",
                    "httpMethod": "GET",
                    "id": "canary_cartrip_pa_sandbox.getDebugSettings",
                    "parameterOrder": [],
                    "parameters": {
                        "requestCommon.clientVersion.clientName": {
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.clientVersion.clientVersion": {
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.forcedExperimentIds": {
                            "description": "IDs of experiments to force-enable. These must be configured to be\nforceable by attaching taas-specific metadata to the Mendel experiments,\notherwise they will be ignored. See:\ngoogle3/googledata/experiments/chauffeur/trips/experiment_metadata.proto.",
                            "format": "int32",
                            "location": "query",
                            "repeated": true,
                            "type": "integer"
                        },
                        "requestCommon.requestId": {
                            "description": "ID generated by the client for each request. This does not have to be\nglobally unique, since it is client generated, but should be easy to\nidentify in logs for a specific user.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v2alpha:getDebugSettings",
                    "response": {
                        "$ref": "GetDebugSettingsResponse"
                    }
                },
                "getEarlyRiderNda": {
                    "description": "Request the HTML for the non-disclosure agreement (NDA).",
                    "flatPath": "v2alpha:getEarlyRiderNda",
                    "httpMethod": "GET",
                    "id": "canary_cartrip_pa_sandbox.getEarlyRiderNda",
                    "parameterOrder": [],
                    "parameters": {
                        "requestCommon.clientVersion.clientName": {
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.clientVersion.clientVersion": {
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "requestCommon.forcedExperimentIds": {
                            "description": "IDs of experiments to force-enable. These must be configured to be\nforceable by attaching taas-specific metadata to the Mendel experiments,\notherwise they will be ignored. See:\ngoogle3/googledata/experiments/chauffeur/trips/experiment_metadata.proto.",
                            "format": "int32",
                            "location": "query",
                            "repeated": true,
                            "type": "integer"
                        },
                        "requestCommon.requestId": {
                            "description": "ID generated by the client for each request. This does not have to be\nglobally unique, since it is client generated, but should be easy to\nidentify in logs for a specific user.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v2alpha:getEarlyRiderNda",
                    "response": {
                        "$ref": "GetEarlyRiderNdaResponse"
                    }
                },
                "phoneLog": {
                    "description": "Upload diagnostic logs.",
                    "flatPath": "v2alpha:phoneLog",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.phoneLog",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha:phoneLog",
                    "request": {
                        "$ref": "UploadLogsRequest"
                    },
                    "response": {
                        "$ref": "UploadLogsResponse"
                    }
                },
                "registerUser": {
                    "description": "Registers the user for the first time.",
                    "flatPath": "v2alpha:registerUser",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.registerUser",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha:registerUser",
                    "request": {
                        "$ref": "RegisterUserRequest"
                    },
                    "response": {
                        "$ref": "RegisterUserResponse"
                    }
                },
                "saveRunlet": {
                    "description": "Requests that a runlet be saved. This is generally due to upcoming dSAM or\nuSAM. Since there is a time constraint to get a message to the car, this is\nan early notification that important feedback is coming, so to save the\nrunlet. See go/concierge-dsam for a concrete example.",
                    "flatPath": "v2alpha/saveRunlet",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.saveRunlet",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/saveRunlet",
                    "request": {
                        "$ref": "SaveRunletRequest"
                    },
                    "response": {
                        "$ref": "SaveRunletResponse"
                    }
                },
                "updateUserPreferences": {
                    "description": "Updates user settings.",
                    "flatPath": "v2alpha/updateUserPreferences",
                    "httpMethod": "POST",
                    "id": "canary_cartrip_pa_sandbox.updateUserPreferences",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v2alpha/updateUserPreferences",
                    "request": {
                        "$ref": "UpdateUserPreferencesRequest"
                    },
                    "response": {
                        "$ref": "UpdateUserPreferencesResponse"
                    }
                }
            }
        }
    },
    "revision": "20190918",
    "rootUrl": "https://canary-cartrip-pa.sandbox.googleapis.com/",
    "schemas": {
        "AccessibilitySettings": {
            "id": "AccessibilitySettings",
            "properties": {
                "disallowOppositeSideOfStreetDestination": {
                    "$ref": "UserSetting",
                    "description": "Car will not consider picking up a user across the street from their\nselected point (if enabled)."
                },
                "playVerboseAudioCues": {
                    "$ref": "UserSetting",
                    "description": "Play verbose audio cues during the trip."
                },
                "showHornButtonAtPickup": {
                    "$ref": "UserSetting",
                    "description": "Show option to honk the horn at pickup."
                },
                "textBasedCustomerSupport": {
                    "$ref": "UserSetting",
                    "description": "Text-based customer support only for this user."
                },
                "useAira": {
                    "$ref": "UserSetting",
                    "description": "Use AIRA (go/waymo-aira) during pickup and dropoff."
                },
                "wheelchairService": {
                    "$ref": "UserSetting",
                    "description": "Wheelchair-accessible service."
                }
            },
            "type": "object"
        },
        "AcknowledgeTicklesRequest": {
            "description": "Acknowledgement of received tickles.",
            "id": "AcknowledgeTicklesRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "tickleIds": {
                    "description": "List of tickle ids.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AcknowledgeTicklesResponse": {
            "description": "Acknowledgement of received tickles.",
            "id": "AcknowledgeTicklesResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "AddDsamRideFeedbackRequest": {
            "id": "AddDsamRideFeedbackRequest",
            "properties": {
                "dsamRideFeedback": {
                    "$ref": "DsamRideFeedback"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "AddDsamRideFeedbackResponse": {
            "id": "AddDsamRideFeedbackResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "NO_VEHICLE_FOR_USER"
                    ],
                    "enumDescriptions": [
                        "",
                        "Request succeeded.",
                        "The current user does not have a vehicle paired with them."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AddFeedbackRequest": {
            "id": "AddFeedbackRequest",
            "properties": {
                "feedback": {
                    "$ref": "TripFeedback"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "AddFeedbackResponse": {
            "id": "AddFeedbackResponse",
            "properties": {
                "feedbackId": {
                    "description": "IDs of the feedback entries that were added. This is deprecated and will\nno longer be populated.",
                    "type": "string"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "DUPLICATE_FEEDBACK"
                    ],
                    "enumDescriptions": [
                        "",
                        "Request succeeded.",
                        "Rejected because the feedback provided was a duplicate (e.g. included\nend-of-ride feedback when it already existed)."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AesKey": {
            "description": "An AES encryption key. used for phone <-> car authentication.",
            "id": "AesKey",
            "properties": {
                "secretKey": {
                    "description": "Bytes of the secret key. 32 bytes long.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AlternativeLocation": {
            "id": "AlternativeLocation",
            "properties": {
                "location": {
                    "$ref": "Location"
                }
            },
            "type": "object"
        },
        "AppUpgradeAvailableTickle": {
            "description": "A tickle indicating that the client's app can or must be upgraded.",
            "id": "AppUpgradeAvailableTickle",
            "properties": {},
            "type": "object"
        },
        "ApplyPromoCodeRequest": {
            "description": "Request to try applying a promo code to a user's account.",
            "id": "ApplyPromoCodeRequest",
            "properties": {
                "latLng": {
                    "$ref": "LatLng",
                    "description": "User's location."
                },
                "promoCode": {
                    "description": "The promo code to try applying - should be alphanumeric characters.\nThe promo code is marked as an identifying id because some (local)\npromotions apply to only one user, meaning it could be used to identify\nthat user indirectly.",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "ApplyPromoCodeResponse": {
            "description": "Response containing the result of the attempt to apply a promo code to user's\naccount.",
            "id": "ApplyPromoCodeResponse",
            "properties": {
                "grantedPromotion": {
                    "$ref": "ClientPromotion",
                    "description": "Description of the promotion that was just granted to the user. This field\nshould only be set when grant status is GRANTED."
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "description": "The status of the attempt to apply the promo code.\n\nIn the case of a REJECTED_* response, it is possible that the rejection was\nbecause a promotion had just recently been applied (but the response was\ndropped and the corresponding retry is now being attempted). In such a\nscenario, if the caller cares, it is necessary to follow up with a\nListPromotions call.\n",
                    "enum": [
                        "GRANT_STATUS_UNSPECIFIED",
                        "GRANTED",
                        "REJECTED_NOT_FOUND",
                        "REJECTED_NOT_ELIGIBLE",
                        "REJECTED_OTHER"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Promo code was not found.",
                        "User is not eligible for the promo code.",
                        "Rejected for some other reason."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AuthChangeTickle": {
            "description": "A tickle informing the client that the auth credentials for the car\nhave changed.",
            "id": "AuthChangeTickle",
            "properties": {
                "tripId": {
                    "description": "ID of the active trip.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AuthenticationInfo": {
            "description": "Generated per trip by the server.",
            "id": "AuthenticationInfo",
            "properties": {
                "key": {
                    "$ref": "AesKey",
                    "description": "AES key."
                },
                "vehicleMacAddress": {
                    "description": "There is one per BLE board times the number of cars assigned.\nMore than one car can be assigned to a trip at one time.",
                    "items": {
                        "$ref": "MacAddress"
                    },
                    "type": "array"
                },
                "vehicleUuidSuffix": {
                    "description": "This will contain as many UUIDs as the maximum number of boards of all the\nvehicle types we support. Even if the current vehicle assigned has less\nmodules than the vehicle type with the maximum number of boards.\nThis is necessary for iOS, as it needs to know all possible UUIDs right\nafter trip creation.\nOne per BLE board.  0..0xFFFC",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Basics": {
            "id": "Basics",
            "properties": {
                "completionTime": {
                    "description": "Time the trip was actually completed. Does not apply to trips\ncancelled before the user entered the vehicle.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "creationTime": {
                    "description": "Time the trip was created by the user.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "distanceM": {
                    "description": "This field is estimated based on samples of the vehicle's location\nduring the RIDING state of the trip.",
                    "format": "int64",
                    "type": "string"
                },
                "estimatedBoardingTime": {
                    "description": "Best estimate of the time when the user entered the vehicle, if\napplicable.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BraintreeEnvironment": {
            "description": "Describes The Braintree environment that the client should use when it\ntalks to Braintree. This ensures that the server and client are talking to\nthe same Braintree instances.",
            "id": "BraintreeEnvironment",
            "properties": {
                "clientTokenizationKey": {
                    "description": "This is a public key same for all users. So it's ok to be logged.",
                    "type": "string"
                },
                "environment": {
                    "enum": [
                        "ENVIRONMENT_UNSPECIFIED",
                        "SANDBOX",
                        "PRODUCTION"
                    ],
                    "enumDescriptions": [
                        "",
                        "If the environment is a sandbox, the nonce generated from a real credit\ncard number will *not* be accepted: client should send down known fake\ncredit cards to the server, as only these will be accepted by the\nBraintree sandbox. c.f.\nhttps://developers.braintreepayments.com/guides/credit-cards/testing-go-live/java",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CancelActiveTripRequest": {
            "description": "Request to cancel the currently active trip.",
            "id": "CancelActiveTripRequest",
            "properties": {
                "polylinePrecision": {
                    "description": "Returned polylines will be E5 precision if unspecified.\nServer may return polylines at a precision other than the one requested.",
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests"
                },
                "tripProposalToken": {
                    "description": "Refers to a pre-negotiated proposal for cancelling the current active trip.\nMust be within the expiration period to be valid.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CancelActiveTripResponse": {
            "description": "Response to request to cancel the currently active trip.",
            "id": "CancelActiveTripResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "ALREADY_PENDING",
                        "PROPOSAL_STALE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Client attempted to cancel a trip while a different update was still not\naccepted by the car. The cancel request has been ignored.",
                        "The trip plan proposal has been outstanding for too long and can no\nlonger be used to cancel the trip. Client should re-propose."
                    ],
                    "type": "string"
                },
                "trip": {
                    "$ref": "ClientTrip",
                    "description": "Updated status of the currently active trip. If the request was ignored,\ncontains the current active trip as would be returned from GetActiveTrip()."
                }
            },
            "type": "object"
        },
        "CancelDetails": {
            "id": "CancelDetails",
            "properties": {
                "cancelReason": {
                    "enum": [
                        "CANCEL_REASON_UNSPECIFIED",
                        "TRIP_UNSERVICEABLE",
                        "NO_SHOW",
                        "TRIP_INFEASIBLE"
                    ],
                    "enumDescriptions": [
                        "This is returned if none of the other reasons apply. In the backend we\nhave more details about why the trip was cancelled (e.g. cancelled by\nlive help, requested by poodle driver, etc), but this enum distills\nthese down to just the set that are relevant for messaging to the user\nvia the app.\n\nThe more exhaustive, internal list of cancel reasons is here:\nhttps://cs.corp.google.com/piper///depot/google3/waymo/taas/proto/trip.proto?rcl=265756924&l=928-977",
                        "The trip was cancelled because the system could not find a vehicle to\nserve the request (i.e. all cars are busy serving trips, and no queued\nslots are available either). This can only happen pre-pickup.",
                        "The trip was cancelled because the user did not show up within the\nallotted pickup window. This can only happen pre-pickup.",
                        "Note: Currently this value is never set, but once b/130165811 is\nimplemented, it will only apply to partner trips.\nCancelled because the trip was infeasible: no cars are capable of\nhandling the trip plan. We throw infeasibles for some cases in which\nwe'd strand Waymo trips."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CancelFeedback": {
            "description": "Feedback related to cancelling a trip.",
            "id": "CancelFeedback",
            "properties": {
                "additionalFeedback": {
                    "type": "string"
                },
                "reason": {
                    "enum": [
                        "REASON_UNSPECIFIED",
                        "TESTING",
                        "ETA_TOO_LONG",
                        "CAR_UNAVAILABLE",
                        "NOT_NEEDED",
                        "WRONG_PICKUP_OR_DROPOFF",
                        "CAR_TOO_EARLY",
                        "INFEASIBLE",
                        "PULLOVER",
                        "FLEET_OFFLINE",
                        "NO_SHOW",
                        "OTHER"
                    ],
                    "enumDescriptions": [
                        "",
                        "Just testing/debugging.",
                        "The pre-trip ETA was too long.",
                        "No car was available.",
                        "Decided the trip was not needed after all.",
                        "Pickup or drop off location was incorrect.",
                        "Car arrived earlier than expected.",
                        "Trip was infeasible.",
                        "Mid ride or end of ride cancel/pullover.",
                        "Fleet has gone offline.",
                        "Passenger didn't show up.",
                        "Other reason (should be described below)."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CardholderInfo": {
            "id": "CardholderInfo",
            "properties": {
                "name": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClearLocationHistoryRequest": {
            "id": "ClearLocationHistoryRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon"
                }
            },
            "type": "object"
        },
        "ClearLocationHistoryResponse": {
            "id": "ClearLocationHistoryResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon"
                }
            },
            "type": "object"
        },
        "ClientAnnouncement": {
            "id": "ClientAnnouncement",
            "properties": {
                "detailHtml": {
                    "description": "HTML message if more information is required about the event.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ClientBillingData": {
            "id": "ClientBillingData",
            "properties": {
                "chargeInfo": {
                    "$ref": "ClientChargeInfo"
                },
                "fareBreakdown": {
                    "$ref": "ClientFareBreakdown"
                },
                "fareExplanation": {
                    "$ref": "FareExplanation",
                    "description": "The fare explanation will contain a high-level explanation of the fare. In\nthe common case of a promotion, this will just contain a description of the\npromo that is being applied (more details about the promo can be found in\npromotion_applied). In other cases (e.g. EDS), it may contain further\ndetails about abnormalities with a fare (e.g. \"this fare was waived because\nyour trip is EDS\" or \"no promotion was applied because your trip is already\nat the minimum fare\")."
                },
                "fareId": {
                    "type": "string"
                },
                "promotionApplied": {
                    "$ref": "ClientPromotion",
                    "description": "The promotion that was applied (if any) for the associated fare breakdown."
                },
                "status": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "DO_NOT_PROCESS_CHARGE",
                        "CANCELLED_WITHIN_GRACE_PERIOD",
                        "ESTIMATE",
                        "REQUESTED_BY_USER"
                    ],
                    "enumDescriptions": [
                        "",
                        "This fare will not be charged.",
                        "The trip was cancelled within the grace period.",
                        "This is a fare estimate.",
                        "The fare estimate was promoted to an actual proposed fare for this trip."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientChargeInfo": {
            "description": "Client analog of ChargeInfo.",
            "id": "ClientChargeInfo",
            "properties": {
                "chargeAmount": {
                    "$ref": "ClientMoney"
                },
                "chargeId": {
                    "type": "string"
                },
                "paymentMethod": {
                    "$ref": "ClientPaymentMethod"
                },
                "refundInfo": {
                    "items": {
                        "$ref": "ClientRefundInfo"
                    },
                    "type": "array"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "DO_NOT_PROCESS_CHARGE",
                        "PENDING",
                        "AWAITING_USER_ACTION",
                        "AUTHORIZATION_EXPIRED",
                        "AUTHORIZING",
                        "CHARGE_AUTHORIZED",
                        "CHARGE_VOIDED",
                        "SUBMITTED_FOR_SETTLEMENT",
                        "CHARGE_SETTLEMENT_PENDING",
                        "CHARGE_SETTLEMENT_DECLINED",
                        "CHARGE_SETTLING",
                        "CHARGE_SETTLED",
                        "CHARGE_FAILED",
                        "GATEWAY_REJECTED",
                        "PROCESSOR_DECLINED",
                        "BRAINTREE_BAD_STATE"
                    ],
                    "enumDescriptions": [
                        "",
                        "We may not want to opt out of charging for a specific trip (e.g. if the\ntrip was found to be in a bad state). If this is set, we will *not*\ncontact Braintree about this charge.",
                        "The charge has been added to the billing_charge table, and will be\nprocessed by the async billing event processor.",
                        "For cases such as where user does not have a valid card.",
                        "The charge spent too much time in \"authorized\" status and was marked\nas expired.",
                        "The charge is in the process of being authorized.",
                        "Successfully made an authorization charge on the card (and the auth has\nbeen accepted by the payment processor).",
                        "The charge was voided - voiding a charge may only occur when the status\nis AUTHORIZED or SUBMITTED_FOR_SETTLEMENT.",
                        "Successfully requested settlement on the authorized charge.",
                        "The charge has not yet fully settled. This status is rare and does\nnot always indicate problems with settlement.",
                        "The processor declined to settle the sale or refund request.",
                        "The charge is in the process of being settled. This is a transitory\nstate. A transaction cannot be voided once it reaches CHARGE_SETTLING\nstatus (but can be refunded).",
                        "The charge was settled by Braintree with the payment processor.",
                        "An error occurred when sending the charge to the payment processor.",
                        "The gateway rejected the transaction because AVS, CVV, duplicate or fraud\nchecks failed or because we have reached the processing limit on our\nmerchant account.",
                        "The processor declined the transaction.",
                        "Something unexpected occurred (e.g. an invariant violation) that has\nput this charge in an unexpected state (e.g. b/80429615)."
                    ],
                    "type": "string"
                },
                "tripId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientFareBreakdown": {
            "description": "Provides a line-by-line breakdown of the fare. Analog of FareBreakdown.",
            "id": "ClientFareBreakdown",
            "properties": {
                "costAfterDiscount": {
                    "$ref": "ClientMoney",
                    "description": "gross_trip_cost, less discount_applied"
                },
                "costAfterFareCredit": {
                    "$ref": "ClientMoney",
                    "description": "The \"subtotal\" (i.e. gross_trip_cost - discount_applied - fare_credit)"
                },
                "discountApplied": {
                    "$ref": "ClientMoney",
                    "description": "If this is set, a FareExplanation will also be provided and should be\ndisplayed to explain the discount."
                },
                "distanceM": {
                    "description": "The billing total distance that was traveled for this trip.",
                    "format": "int32",
                    "type": "integer"
                },
                "durationS": {
                    "description": "The billing total duration that was elapsed for this trip.",
                    "format": "int32",
                    "type": "integer"
                },
                "fareCreditApplied": {
                    "$ref": "ClientMoney"
                },
                "finalTripCost": {
                    "$ref": "ClientMoney",
                    "description": "The final amount that is charged to the user.\ncost_after_fare_credit + tax_total + surcharge_total"
                },
                "grossCost": {
                    "$ref": "ClientMoney",
                    "description": "Simply distance (meters) x cost ($ / meter)."
                },
                "surchargeAmount": {
                    "description": "Applicable surcharges (ex: \"Airport Fee\").",
                    "items": {
                        "$ref": "ClientMoney"
                    },
                    "type": "array"
                },
                "surchargeTotal": {
                    "$ref": "ClientMoney",
                    "description": "Sum over all the different surcharge amounts."
                },
                "taxAmount": {
                    "description": "Applicable taxes (ex: \"State Tax\").",
                    "items": {
                        "$ref": "ClientMoney"
                    },
                    "type": "array"
                },
                "taxTotal": {
                    "$ref": "ClientMoney",
                    "description": "Sum over all the different tax amounts."
                }
            },
            "type": "object"
        },
        "ClientLiveHelpContactInfo": {
            "id": "ClientLiveHelpContactInfo",
            "properties": {
                "phoneNumber": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientMoney": {
            "description": "Represents a monetary amount for the client. Analog of google.type.Money.",
            "id": "ClientMoney",
            "properties": {
                "amount": {
                    "description": "The formatted amount, with sub-denomination deduced from the\ncurrency code.",
                    "type": "string"
                },
                "currencyCode": {
                    "type": "string"
                },
                "description": {
                    "description": "A description of what this amount represents (ex: \"State Tax\").",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientPaymentMethod": {
            "description": "Client analog of PaymentMethod.",
            "id": "ClientPaymentMethod",
            "properties": {
                "creditCardInfo": {
                    "$ref": "CreditCardInformation"
                },
                "id": {
                    "description": "Uniquely identifies payment method for this user.",
                    "type": "string"
                },
                "property": {
                    "$ref": "PaymentMethodProperty",
                    "description": "Various user specified properties associated with the payment method."
                }
            },
            "type": "object"
        },
        "ClientPromotion": {
            "id": "ClientPromotion",
            "properties": {
                "description": {
                    "$ref": "ClientPromotionDescription"
                }
            },
            "type": "object"
        },
        "ClientPromotionData": {
            "id": "ClientPromotionData",
            "properties": {
                "availability": {
                    "$ref": "PromotionAvailability",
                    "description": "Describes the current availability of a promotion."
                },
                "promotion": {
                    "$ref": "ClientPromotion"
                }
            },
            "type": "object"
        },
        "ClientPromotionDescription": {
            "description": "Contains information about the promotion that is suitable to display to the\nend-user. For more info, see go/promotions-design.",
            "id": "ClientPromotionDescription",
            "properties": {
                "description": {
                    "description": "The string that is visible to the end-user. Describes what this promotion\ndoes.\nExample: \u201cEnjoy 3 free rides a week through 3/27.\u201d\nAs with 'title', this text is set server-side and doesn't no contain text\nentered by a user.",
                    "type": "string"
                },
                "expirationDate": {
                    "$ref": "LocalDateTime",
                    "description": "For promotions whose expiration is defined in relative terms."
                },
                "expirationTimestampS": {
                    "description": "For promotions whose expiration is defined in absolute terms.",
                    "format": "int64",
                    "type": "string"
                },
                "promotionId": {
                    "description": "Unique identifier for the global/user promotion being described by this\nproto. Note that local promotion IDs are unique per-user, and global\npromotion IDs are in a single namespace for all users. The field is marked\nas a session ID because local promotion ids can be used to identify\nseparate actions by a user indirectly until the promotion is fully used.",
                    "type": "string"
                },
                "title": {
                    "description": "A short heading that describes the promotion.\nExample: \u201c$5 off\u201d\nNote that this text is set server-side and does not contain potentially\nidentifying text entered by an end user.",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "GLOBAL",
                        "LOCAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "A GLOBAL promotion is a shared resource granted to a group of users (e.g.\n\"free trips to the mall for the first 1000 users\").",
                        "A LOCAL promotion belongs uniquely to a single user (e.g. \"Bob gets a $5\nfare credit\")."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientRefundInfo": {
            "id": "ClientRefundInfo",
            "properties": {
                "amount": {
                    "$ref": "ClientMoney"
                },
                "refundStatus": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "DO_NOT_PROCESS_CHARGE",
                        "PENDING",
                        "AWAITING_USER_ACTION",
                        "AUTHORIZATION_EXPIRED",
                        "AUTHORIZING",
                        "CHARGE_AUTHORIZED",
                        "CHARGE_VOIDED",
                        "SUBMITTED_FOR_SETTLEMENT",
                        "CHARGE_SETTLEMENT_PENDING",
                        "CHARGE_SETTLEMENT_DECLINED",
                        "CHARGE_SETTLING",
                        "CHARGE_SETTLED",
                        "CHARGE_FAILED",
                        "GATEWAY_REJECTED",
                        "PROCESSOR_DECLINED",
                        "BRAINTREE_BAD_STATE"
                    ],
                    "enumDescriptions": [
                        "",
                        "We may not want to opt out of charging for a specific trip (e.g. if the\ntrip was found to be in a bad state). If this is set, we will *not*\ncontact Braintree about this charge.",
                        "The charge has been added to the billing_charge table, and will be\nprocessed by the async billing event processor.",
                        "For cases such as where user does not have a valid card.",
                        "The charge spent too much time in \"authorized\" status and was marked\nas expired.",
                        "The charge is in the process of being authorized.",
                        "Successfully made an authorization charge on the card (and the auth has\nbeen accepted by the payment processor).",
                        "The charge was voided - voiding a charge may only occur when the status\nis AUTHORIZED or SUBMITTED_FOR_SETTLEMENT.",
                        "Successfully requested settlement on the authorized charge.",
                        "The charge has not yet fully settled. This status is rare and does\nnot always indicate problems with settlement.",
                        "The processor declined to settle the sale or refund request.",
                        "The charge is in the process of being settled. This is a transitory\nstate. A transaction cannot be voided once it reaches CHARGE_SETTLING\nstatus (but can be refunded).",
                        "The charge was settled by Braintree with the payment processor.",
                        "An error occurred when sending the charge to the payment processor.",
                        "The gateway rejected the transaction because AVS, CVV, duplicate or fraud\nchecks failed or because we have reached the processing limit on our\nmerchant account.",
                        "The processor declined the transaction.",
                        "Something unexpected occurred (e.g. an invariant violation) that has\nput this charge in an unexpected state (e.g. b/80429615)."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientTrip": {
            "description": "This is the main object returned by the server to describe the current trip\nstate.",
            "id": "ClientTrip",
            "properties": {
                "authenticationInfo": {
                    "$ref": "AuthenticationInfo",
                    "description": "The authentication info sent to the phone to allow authentication with the\nvehicle."
                },
                "billingData": {
                    "$ref": "ClientBillingData",
                    "description": "Billing data for the active, accepted trip plan (i.e. client_trip_plan).\nNote that this will *not* be set until the car accepts the trip (until\nthen, the billing data for the \"pending\" trip resides in\npending_trip_plan)."
                },
                "clientTripPlan": {
                    "$ref": "ClientTripPlan",
                    "description": "The active, accepted trip plan. Immediately post-creation, this field\nwill be empty and the requested plan will be in pending_trip_plan. Once\na vehicle is on its way, or for a Poodle trip, their system accepts the\nride request, client_trip_plan will be filled in.\n\nNote that under true-update semantics, the initial update is treated as\naccepted right away, so this field will immediately be populated\npost-creation."
                },
                "fleet": {
                    "$ref": "Fleet",
                    "description": "The fleet for this trip."
                },
                "mobileFeatures": {
                    "$ref": "MobileFeatures",
                    "description": "List of mobile features available for this trip."
                },
                "pendingTripPlan": {
                    "$ref": "PendingTripPlan",
                    "description": "The latest modification to the existing trip plan.\nOnce the pending_trip_plan.status() is =OK or =FAILURE, the client\ncan use AcknowledgePendingTrip().\nIf the status is OK, then acknowledging will clear pending_trip_plan\nin future ClientTrip messages returned by GetActiveTrip() until the\nclient submits another plan change or cancellation request.\nIf the status is FAILURE, then acknowledging will change the status\nto FAILURE_ACKNOWLEDGED, but the pending_trip_plan will be present in\nfuture GetActiveTrip() calls until the client submits another plan\nchange or cancellation request."
                },
                "snapshotTime": {
                    "description": "Server-side time at which the data was read.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "tripId": {
                    "description": "The Id of the trip. A null trip has all fields empty or set to default\nvalue as applicable.",
                    "type": "string"
                },
                "tripPlanProposalToken": {
                    "description": "The proposal token corresponding to the client_trip_plan. Client will need\nthis for proposing changes to the trip. If there is a pending_trip_plan\nwith a non-empty trip_plan_proposal_token, that should be used instead.",
                    "type": "string"
                },
                "tripStatus": {
                    "$ref": "TripStatus",
                    "description": "The current status of this trip."
                },
                "unreadTickles": {
                    "description": "The list of latest unread tickles (at most one of each type) that needs\nto be handled in the in-app UI.\nSpecifically it will contain the most recent unread TickleMessage per type,\nif it is unread.\nOnce a tickle is marked as read by the client (once shown in the in-app UI)\nit will be removed from this list next time we receive a ClientTrip.",
                    "items": {
                        "$ref": "TickleMessage"
                    },
                    "type": "array"
                },
                "vehicle": {
                    "$ref": "Vehicle",
                    "description": "The Current vehicle for this trip."
                }
            },
            "type": "object"
        },
        "ClientTripPlan": {
            "description": "This describes a trip plan.",
            "id": "ClientTripPlan",
            "properties": {
                "planVersion": {
                    "description": "The version for this trip plan.\nVersion starts at 1 and is incremented on each change request.",
                    "format": "int64",
                    "type": "string"
                },
                "tripPlanParameter": {
                    "$ref": "TripPlanParameters",
                    "description": "Parameters for the requested trip."
                },
                "waypoints": {
                    "description": "The list of waypoints for this trip plan.",
                    "items": {
                        "$ref": "Waypoint"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ClientTripSummary": {
            "id": "ClientTripSummary",
            "properties": {
                "basics": {
                    "$ref": "Basics"
                },
                "billingData": {
                    "$ref": "ClientBillingData"
                },
                "cancelReason": {
                    "description": "Set when the trip is cancelled, or if cancellation has been requested.",
                    "enum": [
                        "CANCEL_REASON_UNSPECIFIED",
                        "REQUESTED_BY_USER",
                        "NO_SHOW",
                        "REQUESTED_BY_DRIVER",
                        "CANCEL_REASON_OTHER"
                    ],
                    "enumDescriptions": [
                        "",
                        "Cancelled through the app by the user.",
                        "Cancelled because the user did not meet the car at the pickup location.",
                        "Poodle driver triggered trip cancellation. This doesn't include no-shows.",
                        "Cancelled for some other reason. This includes customer support\ncancellations and various types of server-side cancellations."
                    ],
                    "type": "string"
                },
                "encodedPolyline": {
                    "$ref": "EncodedPolyline"
                },
                "fleet": {
                    "description": "The fleet in which the trip was taken.",
                    "type": "string"
                },
                "licensePlate": {
                    "type": "string"
                },
                "numPassengers": {
                    "format": "int32",
                    "type": "integer"
                },
                "state": {
                    "description": "The state of the trip.",
                    "enum": [
                        "STATE_UNSPECIFIED",
                        "REQUESTED",
                        "INFEASIBLE",
                        "QUEUED",
                        "TO_PICKUP",
                        "PICKUP_MOVE_ALONG",
                        "PICKUP_NEED_AUTH",
                        "AT_PICKUP",
                        "NO_SHOW",
                        "PICKUP_HAVE_AUTH",
                        "BOARDING",
                        "RIDING",
                        "STOP_DROPOFF",
                        "FINAL_DROPOFF",
                        "CANCEL_REQUESTED",
                        "STRANDED",
                        "COMPLETED",
                        "CANCELLED"
                    ],
                    "enumDescriptions": [
                        "Unspecified trip state.",
                        "The trip was accepted by the server, and is waiting to be assigned\nto a vehicle.",
                        "The trip was accepted by the server but later rejected by the server.",
                        "The trip was accepted by the server. A car has been selected but it is\ncurrently serving another trip.",
                        "The car is on its way to pick up the user.",
                        "The car had already reached pickup, but needed to \"move along\", and is in\nthe process of circling the block or otherwise reparking.",
                        "The car is at pickup and is waiting for authentication.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The car is at pickup, waiting for the user.",
                        "The passenger did not arrive at the pickup location.",
                        "The car is at pickup and is authenticated.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The user has opened the door and is boarding the car.",
                        "The car is riding with a user on board.",
                        "The car arrived at a stop dropoff.",
                        "The car arrived at the final dropoff.",
                        "A trip cancelation was requested.\nDEPRECATED in favor of TripStatus#is_cancel_requested.",
                        "The car cannot complete the trip, and the user is stranded. This can\nhappen either pre- or post- pickup.",
                        "The trip has completed.",
                        "The trip is canceled."
                    ],
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "STATUS_OK",
                        "START_TIME_NOT_SET"
                    ],
                    "enumDescriptions": [
                        "",
                        "All fields are populated.",
                        "Start time not set. This can happen if the trip is cancelled before\npickup."
                    ],
                    "type": "string"
                },
                "stoppedAt": {
                    "description": "First is the pickup point; later are subsequent stops.\nsegment_id and type are not filled in.",
                    "items": {
                        "$ref": "Waypoint"
                    },
                    "type": "array"
                },
                "timezone": {
                    "description": "The timezone of the service area in which the trip was taken.",
                    "type": "string"
                },
                "tripFeedback": {
                    "items": {
                        "$ref": "TripFeedback"
                    },
                    "type": "array"
                },
                "tripId": {
                    "type": "string"
                },
                "vehicleId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientUserPermission": {
            "id": "ClientUserPermission",
            "properties": {
                "value": {
                    "enum": [
                        "PERMISSION_UNSPECIFIED",
                        "ACCEPTED",
                        "REJECTED",
                        "OUT_OF_DATE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "version": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ClientUserPermissions": {
            "description": "Client facing user permissions.",
            "id": "ClientUserPermissions",
            "properties": {
                "earlyRiderNda": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to the ERP NDA."
                },
                "gaia": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to use of GAIA."
                },
                "googleCalendar": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to use of Google Calendar."
                },
                "googlePlayMusic": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to use of Google Play Music."
                },
                "locationHistory": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to use of Google location history."
                },
                "poodle": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to Poodle ToS."
                },
                "privacyPolicy": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to Waymo's \"study\" privacy policy."
                },
                "productionPrivacyPolicy": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to Waymo's production privacy policy."
                },
                "productionTermsOfService": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to Waymo's production terms of service."
                },
                "termsOfService": {
                    "$ref": "ClientUserPermission",
                    "description": "Consent to Waymo's \"study\" terms of service."
                }
            },
            "type": "object"
        },
        "ClientUserPreferences": {
            "description": "Preferences for a user account.",
            "id": "ClientUserPreferences",
            "properties": {
                "permissions": {
                    "$ref": "ClientUserPermissions",
                    "description": "User consents to different things."
                },
                "settings": {
                    "$ref": "UserSettings"
                }
            },
            "type": "object"
        },
        "ClientUserProfile": {
            "id": "ClientUserProfile",
            "properties": {
                "displayName": {
                    "description": "This is the display name for the user. If empty it means that the user has\nnot specified a display name.\nThis should be auto-filled from focus.",
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumberInfo": {
                    "$ref": "PhoneNumberInfo",
                    "description": "If there is an error contacting WPS, the phone_number_info field will\nbe present, with verification_state == VERIFICATION_UNKNOWN. In that\ncase the client should skip phone number verification."
                }
            },
            "type": "object"
        },
        "ClientVehicleChangeExplanation": {
            "description": "Detailed explanation of why the user's assigned vehicle changed.",
            "id": "ClientVehicleChangeExplanation",
            "properties": {
                "reason": {
                    "description": "The vehicle change reason.",
                    "enum": [
                        "REASON_UNSPECIFIED",
                        "VEHICLE_WENT_OFFLINE",
                        "VEHICLE_CAME_ONLINE",
                        "SYSTEM_LOAD_DECREASED",
                        "SYSTEM_LOAD_INCREASED"
                    ],
                    "enumDescriptions": [
                        "Unspecified reason.",
                        "Your vehicle went offline.",
                        "A new vehicle came online and was assigned to your trip.",
                        "Either\n(a) Someone else cancelled their trip and the schedule got reshuffled\n(b) A new vehicle came online and the schedule got reshuffled\nTODO(mmcnaugh) In order to reduce user confusion, if either of these\nthings happened but the user's ETA went *up* significantly regardless\nof reason, we don't attempt to explain it.",
                        "Either\n(a) Someone else requested a trip and the schedule got reshuffled\n(b) A vehicle that wasn't serving you went offline and the schedule\ngot reshuffled.\nTODO(mmcnaugh) In order to reduce user confusion, if either of these\nthings happened but the user's ETA went *down* significantly regardless\nof reason, we don't attempt to explain it."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientVersion": {
            "description": "The build and version of a client making requests.",
            "id": "ClientVersion",
            "properties": {
                "clientName": {
                    "type": "string"
                },
                "clientVersion": {
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CompletedTripPendingClientFeedback": {
            "id": "CompletedTripPendingClientFeedback",
            "properties": {
                "expiryTime": {
                    "description": "Timestamp of when the feedback is no longer necessary.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "tripSummary": {
                    "$ref": "ClientTripSummary",
                    "description": "Summary of the completed trip."
                }
            },
            "type": "object"
        },
        "CreateFavoriteLocationRequest": {
            "id": "CreateFavoriteLocationRequest",
            "properties": {
                "desiredLocation": {
                    "$ref": "Location",
                    "description": "Details for favorite to create."
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "CreateFavoriteLocationResponse": {
            "id": "CreateFavoriteLocationResponse",
            "properties": {
                "location": {
                    "$ref": "HistoricalLocation",
                    "description": "Newly created favorite. If the location was previously recorded as a\nRECENT, relevant fields like last-use-time will be filled in, etc."
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "CreatePaymentMethodRequest": {
            "id": "CreatePaymentMethodRequest",
            "properties": {
                "cardholderInfo": {
                    "$ref": "CardholderInfo",
                    "description": "Cardholder information for the payment method for screening purposes."
                },
                "nonce": {
                    "description": "This is a one-time-use token that references the underlying payment\nmethod. The caller must generate a new nonce when retrying a failed\noperation. The nonce is generated and recognized by Braintree. No datapol\nsemantic type is needed here; the nonce expires quickly (immediately after\nuse) and is useless without Waymo's Braintree private key.",
                    "type": "string"
                },
                "paymentMethod": {
                    "$ref": "ClientPaymentMethod",
                    "description": "Most of the information passed down by the client here is only for\nvalidation purposes (e.g. verifying a supported scheme). Any payment state\nstate that is written is based on the Braintree response.\n\nThe only field that's used for updating state for this payment method is\nthe embedded 'PaymentMethodProperty'.\nRequired"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "CreatePaymentMethodResponse": {
            "id": "CreatePaymentMethodResponse",
            "properties": {
                "paymentMethod": {
                    "$ref": "ClientPaymentMethod",
                    "description": "If status is OK, the newly created payment method."
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "UNSUPPORTED",
                        "INVALID_SCHEME",
                        "FAILED_INTERNAL_REASON",
                        "PROCESSOR_DECLINED",
                        "GATEWAY_REJECTED_FAILED_TO_VERIFY_ADDRESS",
                        "GATEWAY_REJECTED_FAILED_TO_VERIFY_CVV",
                        "GATEWAY_REJECTED_FAILED_TO_VERIFY_CVV_AND_AVS",
                        "GATEWAY_REJECTED_GENERIC"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Service does not do any billing.",
                        "The card has an unsupported scheme.",
                        "Payment method was not added due to an internal reason.",
                        "The processor (Visa/MC) rejected the card.",
                        "The Payment Gateway (braintree) was unable to validate the address.",
                        "The Payment Gateway (braintree) did not like the CVV (3 digit code on the\nback of the card)",
                        "The Payment Gateway (braintree) did not like the CVV AND couldn't\nvalidate the address",
                        "The Payment Gateway (braintree) rejected the card for a reason not\nenumerated above"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreateTripRequest": {
            "description": "Request to create a new trip.",
            "id": "CreateTripRequest",
            "properties": {
                "clientVersion": {
                    "$ref": "ClientVersion",
                    "description": "Use the request_common field instead."
                },
                "paymentMethodId": {
                    "description": "The payment method that should be charged for this trip.",
                    "type": "string"
                },
                "polylinePrecision": {
                    "description": "Returned polylines will be E5 precision if unspecified.\nServer may return polylines at a precision other than the one requested.",
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "preTripId": {
                    "description": "The ID of the fare estimate to be applied on this trip.\nThe provided fare estimate will be validated to ensure that it\nstill matches the proposed ClientTripPlan (if it does not, the\nCreate will fail).\nNOTE: for now, if pre_trip_id is not specified, server will compute\na fare estimate. Eventually this will be a required field, and the\nserver will reject the trip.",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "tripPlan": {
                    "$ref": "ClientTripPlan",
                    "description": "The plan for the requested trip."
                },
                "tripProposalToken": {
                    "description": "This is returned by ProposeTripPlan. When supplied, trip_plan and\npre_trip_id will be ignored. The values from the referenced proposal will\nbe used for creating the trip.",
                    "type": "string"
                },
                "userTokens": {
                    "$ref": "UserTokens",
                    "description": "Auth tokens for car-side features that make use of user credentials."
                },
                "walkingDirectionsOrigin": {
                    "$ref": "LatLng",
                    "description": "Location for start of walking directions. This is applicable for filling\nin the RouteSegment.Stage.WALK_TO_PICKUP"
                }
            },
            "type": "object"
        },
        "CreateTripResponse": {
            "description": "Response to a request to create a new trip.",
            "id": "CreateTripResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "MISSING_PAYMENT_METHOD",
                        "BLOCKED_BILLING_STATE",
                        "TRIP_PROPOSAL_EXPIRED",
                        "FAILED_AUTH_CHARGE",
                        "MISSING_VERIFIED_PHONE_NUMBER"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "This is only enforced for users in a chauffeur-billing* user-class for\nnow. Returned if no payment_method_id was passed down in the request.\n\nNote that if a trip already exists, the normal behaviour is for this\nendpoint to return back the active trip instead of creating a new one.\nHowever if a new trip is created without a payment method, this error\nwill be returned and the active trip will be left empty.",
                        "This user is in a blocked billing state (e.g. due to an outstanding\ncharge). New trips are blocked until the billing errors are resolved.",
                        "The trip plan proposal has expired and can't be used for creating a trip.",
                        "Was not able to create an authorization charge against user's selected\ncard for the amount of the trip fare.",
                        "The user does not have a verified phone number registered with Waymo.\nNote that freshness of the verification doesn't matter here; if the user\nhas a registered number that is VERIFIED_BUT_STALE, this error code will\nnot be used."
                    ],
                    "type": "string"
                },
                "trip": {
                    "$ref": "ClientTrip",
                    "description": "Details of the created trip."
                }
            },
            "type": "object"
        },
        "CreditCardInformation": {
            "description": "This message is not in client/client_billing.proto because that is proto3 and\nthis message uses a proto2 enum.",
            "id": "CreditCardInformation",
            "properties": {
                "lastFour": {
                    "description": "Last 4 digits of credit card (ex: 1034).",
                    "type": "string"
                },
                "scheme": {
                    "enum": [
                        "CREDIT_CARD_UNSPECIFIED",
                        "VISA",
                        "AMERICAN_EXPRESS",
                        "DISCOVER",
                        "MASTERCARD",
                        "CARTE_BLANCHE",
                        "CHINA_UNIONPAY",
                        "DINERS_CLUB",
                        "JCB",
                        "LASER",
                        "MAESTRO",
                        "SOLO",
                        "SWITCH"
                    ],
                    "enumDescriptions": [
                        "",
                        "SUPPORTED TYPES",
                        "",
                        "",
                        "",
                        "NOT SUPPORTED",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CustomTickle": {
            "description": "An unstructured tickle with an unformatted string.",
            "id": "CustomTickle",
            "properties": {
                "body": {
                    "description": "An unformatted string to be displayed to the user.",
                    "type": "string"
                },
                "shouldBuzz": {
                    "description": "Whether or not the phone should buzz when the notification is received.",
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "tripId": {
                    "description": "The trip id (if applicable).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Date": {
            "description": "Represents a whole or partial calendar date, e.g. a birthday. The time of day\nand time zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. This can represent:\n\n* A full date, with non-zero year, month and day values\n* A month and day value, with a zero year, e.g. an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, e.g. a credit card expiration date\n\nRelated types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
            "id": "Date",
            "properties": {
                "day": {
                    "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.",
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.",
                    "format": "int32",
                    "type": "integer"
                },
                "year": {
                    "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "DebugExperiment": {
            "id": "DebugExperiment",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DeleteAccountRequest": {
            "id": "DeleteAccountRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "DeleteAccountResponse": {
            "id": "DeleteAccountResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "FAILED_BAD_BILLING_STATE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "The user's billing state is not clear - either they have pending or\nunresolved charges."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DeleteFavoriteLocationRequest": {
            "id": "DeleteFavoriteLocationRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "DeleteFavoriteLocationResponse": {
            "id": "DeleteFavoriteLocationResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "DeletePaymentMethodRequest": {
            "id": "DeletePaymentMethodRequest",
            "properties": {
                "id": {
                    "description": "Uniquely identifies payment method for this user.",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "DeleteTripSummaryRequest": {
            "id": "DeleteTripSummaryRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "DeleteTripSummaryResponse": {
            "id": "DeleteTripSummaryResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "DetermineFareRequest": {
            "description": "Request a fare estimate on a proposed new trip or proposed trip update.",
            "id": "DetermineFareRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "requestType": {
                    "description": "Whether the request is for a new trip or an existing one.",
                    "enum": [
                        "UNSPECIFIED",
                        "NEW_TRIP",
                        "EXISTING_TRIP"
                    ],
                    "enumDescriptions": [
                        "",
                        "A request for a new trip.",
                        "A request for a trip that has already been created (i.e. trip_id\nexists)."
                    ],
                    "type": "string"
                },
                "tripId": {
                    "description": "The ID of the trip the client believes is active. This field should only be\nset when the request_type is EXISTING_TRIP. Note that if the trip_id is not\nthe current active trip, an error will be returned.",
                    "type": "string"
                },
                "tripPlan": {
                    "$ref": "ClientTripPlan",
                    "description": "The proposed trip plan for which a fare is being requested. Empty means\ntrip cancellation."
                }
            },
            "type": "object"
        },
        "DetermineFareResponse": {
            "description": "Response to a fare estimate on a proposed new trip or proposed trip update.",
            "id": "DetermineFareResponse",
            "properties": {
                "billingData": {
                    "$ref": "ClientBillingData",
                    "description": "Billing data that describes the fare estimate for the new trip or proposed\ntrip update."
                },
                "preTripId": {
                    "description": "The pre-trip ID that corresponds to this DetermineEta request. This must be\nused in the follow-up UpdateActiveTrip() request.",
                    "type": "string"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "NOT_ACTIVE_TRIP",
                        "UNSUPPORTED_REQUEST_TYPE",
                        "ALREADY_PENDING"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Client attempted to get a fare estimate for a trip that is not currently\nactive, while specifying request_type as EXISTING_TRIP.",
                        "The specified request_type is not supported.",
                        "There is a pending update for the specified trip."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DsamRideFeedback": {
            "id": "DsamRideFeedback",
            "properties": {
                "buttonTime": {
                    "description": "Timestamp captured by the client the moment the Concierge presses the dSAM\nicon.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "categories": {
                    "description": "Set categories for the concierge to choose from.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "CATEGORY_UNSPECIFIED",
                            "BRAKE",
                            "NUDGE",
                            "SLOW_STOP",
                            "NERVOUS",
                            "MISSED",
                            "OTHER"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "dsamScale": {
                    "description": "dSam scale.",
                    "enum": [
                        "SAM_UNSPECIFIED",
                        "L1",
                        "L2",
                        "L3",
                        "L4"
                    ],
                    "enumDescriptions": [
                        "",
                        "Level to describe discomfort: \"odd\", \"timid\"",
                        "Level to describe discomfort: \"confused\", \"disturbed\"",
                        "Level to describe discomfort: \"humiliated\", \"stressed\"",
                        "Level to describe discomfort: \"nightmare\", \"terrified\""
                    ],
                    "type": "string"
                },
                "feedback": {
                    "description": "Open ended, descriptive feedback on the event.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EarlyRiderNda": {
            "id": "EarlyRiderNda",
            "properties": {
                "html": {
                    "description": "The HTML to be rendered by the client.",
                    "type": "string"
                },
                "version": {
                    "description": "Which version of the NDA we are currently on.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Empty": {
            "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "id": "Empty",
            "properties": {},
            "type": "object"
        },
        "EncodedPolyline": {
            "id": "EncodedPolyline",
            "properties": {
                "encodedPolyline": {
                    "description": "The polyline encoding is described at\nhttps://developers.google.com/maps/documentation/utilities/polylinealgorithm",
                    "type": "string"
                },
                "precision": {
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FailureDetail": {
            "description": "Details of the system's failure to fulfill a client's trip request.",
            "id": "FailureDetail",
            "properties": {
                "failure": {
                    "description": "The failure detail code.",
                    "enum": [
                        "FAILURE_UNSPECIFIED",
                        "DRIVING_FAILURE_PICKUP",
                        "DRIVING_FAILURE_DROPOFF",
                        "DRIVING_FAILURE_STOP",
                        "DRIVING_FAILURE",
                        "ALREADY_COMPLETED",
                        "INTERNAL_ERROR",
                        "OBSOLETE",
                        "TIMED_OUT",
                        "UNSERVICEABLE"
                    ],
                    "enumDescriptions": [
                        "Unspecified failure.",
                        "Something is bad with the pickup.",
                        "Something is bad with the dropoff.",
                        "Something is bad with the stop.",
                        "The car refused the trip plan without specifying the faulty section.",
                        "This segment was already completed.",
                        "An internal error in the scheduler.",
                        "This plan change was superseded by another plan change before the\nresponse to this one was received.",
                        "After multiple attempts, the car could not be reached. Scheduler has\ngiven up trying to send this request to the car.",
                        "The trip could not be serviced because all nearby cars are occupied."
                    ],
                    "type": "string"
                },
                "segmentId": {
                    "description": "The leg of the trip request that caused the failure.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "FareExplanation": {
            "description": "Describes the fare to the user. Could be present because a promotion was\napplied, a manual action was taken to waive billing, or due to some other\nfeature of the trip.",
            "id": "FareExplanation",
            "properties": {
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FeedbackRequestedTickle": {
            "id": "FeedbackRequestedTickle",
            "properties": {
                "finalLocation": {
                    "$ref": "Location",
                    "description": "Location information for final destination."
                },
                "tripId": {
                    "description": "ID of the trip feedback is requested for.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FinishPhoneNumberVerificationRequest": {
            "id": "FinishPhoneNumberVerificationRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "requestId": {
                    "description": "Globally unique request identifier that was returned in\nStartPhoneNumberVerificationResponse.",
                    "type": "string"
                },
                "sessionData": {
                    "format": "byte",
                    "type": "string"
                },
                "verificationCode": {
                    "description": "User entered verification code provided to them via sms or audio call.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FinishPhoneNumberVerificationResponse": {
            "id": "FinishPhoneNumberVerificationResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "UNKNOWN_ERROR",
                        "ID_MATCH_NEGATIVE",
                        "ID_MATCH_NEGATIVE_LAST_TRY",
                        "EXPIRED_PIN"
                    ],
                    "enumDescriptions": [
                        "",
                        "Verification completed successfully.",
                        "See server or developer-only phone logs.",
                        "User probably entered code wrong.",
                        "User probably entered code wrong, and is about to run out of\nchances.",
                        "Expired PIN."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Fleet": {
            "description": "A description of a fleet of vehicles that could service a client's request.",
            "id": "Fleet",
            "properties": {
                "diagnostic": {
                    "description": "A diagnostic string to shed light when the fleet is mysteriously\nreported offline. Meant to be found in logs rather than shown to\nthe user.",
                    "type": "string"
                },
                "name": {
                    "description": "Codename of the fleet.",
                    "type": "string"
                },
                "serviceAreaName": {
                    "description": "Each fleet operates in at most one service area.",
                    "type": "string"
                },
                "serviceAreaPolygon": {
                    "$ref": "Polygon"
                },
                "status": {
                    "description": "Status of the named fleet.",
                    "enum": [
                        "FLEET_STATUS_UNSPECIFIED",
                        "FLEET_OFFLINE",
                        "FLEET_ONLINE"
                    ],
                    "enumDescriptions": [
                        "Unspecified fleet status.",
                        "There are no cars in the fleet that are online.",
                        "There are cars in the fleet that are online."
                    ],
                    "type": "string"
                },
                "timezone": {
                    "description": "The timezone of the service area. Values are named using the TZ identifiers\nfrom the IANA Time Zone Database, such as \"America/Los_Angeles\" or\n\"Australia/Sydney\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GcmRegistration": {
            "id": "GcmRegistration",
            "properties": {
                "packageName": {
                    "description": "On Android, the java package name of the app is required to route\nthe tickle correctly on the phone.",
                    "type": "string"
                },
                "registrationId": {
                    "description": "Persistent GCM registration string obtained by the app via the\nAndroid/iOS API.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetAccountStatusRequest": {
            "id": "GetAccountStatusRequest",
            "properties": {
                "currentLocation": {
                    "$ref": "LatLng"
                },
                "fieldMask": {
                    "description": "The GetAccountStatusResponse contains some fields which may be large,\ne.g. all available service areas, with large polygons, so we use a\nfield mask to allow the client to exclude these from the result.\nA field mask could in theory apply to all requests but most of the\nrequests are designed to render a field mask unnecessary, so we don't\nadd field mask to the as-yet unwritten message for \"fields common to all\nrequests\" for reserved tag 1.",
                    "format": "google-fieldmask",
                    "type": "string"
                },
                "fleet": {
                    "description": "User chosen fleet. This will be ignored if ForceFleet is set.",
                    "type": "string"
                },
                "polylinePrecision": {
                    "description": "Returned polylines will be E5 precision if unspecified.\nServer may return polylines at a precision other than the one requested.",
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "GetAccountStatusResponse": {
            "id": "GetAccountStatusResponse",
            "properties": {
                "accountState": {
                    "description": "The current state of the user's account. If the user is not registered,\nthe response will contain only this field, set to UNREGISTERED.",
                    "enum": [
                        "ACCOUNT_STATE_UNSPECIFIED",
                        "ACTIVE",
                        "DISABLED",
                        "UNREGISTERED",
                        "WAITLISTED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Regular state. User can make trips, etc.",
                        "Disabled. User prevented from doing anything.",
                        "User is not registered for service.",
                        "User is waitlisted for the app, pending further approval."
                    ],
                    "type": "string"
                },
                "activeTrip": {
                    "$ref": "ClientTrip",
                    "description": "Details of the active trip. Unset if the user is not in an active trip."
                },
                "agreementKey": {
                    "enum": [
                        "AGREEMENT_KEY_UNSPECIFIED",
                        "PRODUCTION",
                        "STUDY",
                        "INTERNAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "non-NDA public users.",
                        "ERP or those opted into a study.",
                        "Alphabeters."
                    ],
                    "type": "string"
                },
                "braintreeEnvironment": {
                    "$ref": "BraintreeEnvironment"
                },
                "clientAnnouncement": {
                    "items": {
                        "$ref": "ClientAnnouncement"
                    },
                    "type": "array"
                },
                "clientVersionStatus": {
                    "enum": [
                        "CLIENT_VERSION_STATUS_UNSPECIFIED",
                        "CLIENT_VERSION_OK",
                        "UPDATE_AVAILABLE",
                        "UPDATE_REQUIRED"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "The rider's account state will be considered DISABLED if the client\nneeds to be updated."
                    ],
                    "type": "string"
                },
                "fleet": {
                    "description": "For a normal user at most one fleet will be returned (the one\nwhose service area they are closest to) but e.g. for dev users,\nall fleets might be returned.",
                    "items": {
                        "$ref": "Fleet"
                    },
                    "type": "array"
                },
                "latestClientVersion": {
                    "$ref": "ClientVersion",
                    "description": "Latest client version software available for the\nclient_version.client_name from the request. Should be used to\nprompt user to update app."
                },
                "liveHelpContactInfo": {
                    "$ref": "ClientLiveHelpContactInfo"
                },
                "minClientVersion": {
                    "$ref": "ClientVersion",
                    "description": "The minimum allowed version for the client_version.client_name\nset in the request. This field is always set for registered\nusers.  If min_client_version is greater than the app version in the\nrequest, account_state will be set to DISABLED and the client\nshould not make any more requests."
                },
                "mobileFeatures": {
                    "$ref": "MobileFeatures",
                    "description": "List of mobile features available for this account.\nThe list of features will also be sent for trip updates.\nIf we have an active trip this will also include trip-scoped features."
                },
                "operatingFleet": {
                    "type": "string"
                },
                "paymentMethod": {
                    "items": {
                        "$ref": "ClientPaymentMethod"
                    },
                    "type": "array"
                },
                "preferences": {
                    "$ref": "ClientUserPreferences"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "serviceArea": {
                    "description": "A service area describes the name and polygon of the service area(s) in\nwhich the returned fleets may operate.",
                    "items": {
                        "$ref": "ServiceAreaDescription"
                    },
                    "type": "array"
                },
                "status": {
                    "enum": [
                        "UNSPECIFIED",
                        "OK",
                        "INVALID_FLEET"
                    ],
                    "enumDescriptions": [
                        "",
                        "All data returned is valid.",
                        "Fleet was set in the request but is invalid. Usually this happens when a\nuser switches universes but the fleet does not exist in the new universe.\nClients should clear the locally selected fleet and re-request GAS.\nThe rest of this response should be empty."
                    ],
                    "type": "string"
                },
                "tripPendingFeedback": {
                    "$ref": "CompletedTripPendingClientFeedback",
                    "description": "Most recently completed trip if it still requires user feedback; the client\nshould prompt the user to provide feedback for this trips."
                },
                "userProfile": {
                    "$ref": "ClientUserProfile"
                }
            },
            "type": "object"
        },
        "GetActiveTripRequest": {
            "description": "Request information about the active trip, if newer than the latest\ninfo possessed by the client.",
            "id": "GetActiveTripRequest",
            "properties": {
                "fareId": {
                    "description": "The ID of the most recent fare that the client has. The server uses this\nto determine if there are any updates to the fare that the client needs\nto know about. If this field is not set, server will by default return the\nmost recent valid fare along with its ID.\nDEPRECATED(saksiri): The server should encode the route_versions into the\n                     `response_token` field of the response.",
                    "type": "string"
                },
                "polylinePrecision": {
                    "description": "Returned polylines will be E5 precision if unspecified.\nServer may return polylines at a precision other than the one requested.",
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "previousResponseToken": {
                    "description": "Token that was returned by a prior GetActiveTrip call and corresponds to\nthe client's current version of the trip state. The server uses this token\nto determine which response fields to omit and which to populate because\nthey have changed.",
                    "format": "byte",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "routeVersions": {
                    "description": "Latest versions of the route segments the client knows about.\nMay only be set if trip_id is set. The given versions are not persisted\nserver-side, so they must be provided at every call.\nDEPRECATED(saksiri): The server should encode the route_versions into the\n                     `response_token` field of the response.",
                    "items": {
                        "$ref": "RouteVersion"
                    },
                    "type": "array"
                },
                "tripId": {
                    "description": "The trip ID the client believes is active. Even though response\nalways contains the true currently active trip, the trip_id is\nrequired from the client to work with the trip_plan_version field\nin order to suppress fields (e.g. trip.client_trip_plan) from the\nresponse that the client already has.\nDEPRECATED(saksiri): The server should encode the trip id into the\n                     `response_token` field of the response.",
                    "type": "string"
                },
                "tripPlanVersion": {
                    "description": "The latest ClientTrip::client_trip_plan().plan_version() the client\nknows about.  Ignored if trip_id is not set.\nDEPRECATED(saksiri): The server should encode the plan version into the\n                     `response_token` field of the response.",
                    "format": "int64",
                    "type": "string"
                },
                "walkingDirectionsOrigin": {
                    "$ref": "LatLng",
                    "description": "Location for start of walking directions. This is applicable for filling\nin the RouteSegment.Stage.WALK_TO_PICKUP"
                }
            },
            "type": "object"
        },
        "GetActiveTripResponse": {
            "description": "The trip_id will be unset if there is no active trip.",
            "id": "GetActiveTripResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "responseToken": {
                    "description": "Opaque token that corresponds to the current trip state, and should be sent\nback by the client in subsequent requests as `previous_response_token` so\nthe server populates changed fields.",
                    "format": "byte",
                    "type": "string"
                },
                "trip": {
                    "$ref": "ClientTrip",
                    "description": "Details of the active trip."
                }
            },
            "type": "object"
        },
        "GetAgreementKeyRequest": {
            "id": "GetAgreementKeyRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon"
                }
            },
            "type": "object"
        },
        "GetAgreementKeyResponse": {
            "id": "GetAgreementKeyResponse",
            "properties": {
                "agreementKey": {
                    "enum": [
                        "AGREEMENT_KEY_UNSPECIFIED",
                        "PRODUCTION",
                        "STUDY",
                        "INTERNAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "non-NDA public users.",
                        "ERP or those opted into a study.",
                        "Alphabeters."
                    ],
                    "type": "string"
                },
                "permissions": {
                    "$ref": "ClientUserPermissions"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon"
                }
            },
            "type": "object"
        },
        "GetDebugSettingsResponse": {
            "id": "GetDebugSettingsResponse",
            "properties": {
                "debugExperiments": {
                    "items": {
                        "$ref": "DebugExperiment"
                    },
                    "type": "array"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon"
                }
            },
            "type": "object"
        },
        "GetEarlyRiderNdaResponse": {
            "id": "GetEarlyRiderNdaResponse",
            "properties": {
                "earlyRiderNda": {
                    "$ref": "EarlyRiderNda"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "GetReachabilitySegmentsRequest": {
            "id": "GetReachabilitySegmentsRequest",
            "properties": {
                "action": {
                    "enum": [
                        "LOCATION_ACTION_UNSPECIFIED",
                        "ACTION_PICKUP",
                        "ACTION_DROPOFF",
                        "ACTION_MIDDLE_STOP",
                        "ACTION_ROUTE_THROUGH",
                        "ACTION_PARK"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "ignoreVehicleStatus": {
                    "description": "If set, the trip server will not consider which types of\nvehicles are online when determining which results should\nbe provided. Results will be constrained only by the vehicle\ntypes implied by trip parameters and the types available\nto the user by virtue of their user class(es).",
                    "type": "boolean"
                },
                "location": {
                    "$ref": "LatLng"
                },
                "polylinePrecision": {
                    "description": "Precision of the polylines that will be returned for this\nrequest. If unset, the default is E5.\nServer may return polylines at a precision other than the one requested.",
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "radiusM": {
                    "description": "For segments that intersect the region specified by the location\nand radius, the entire segment will be returned, even if part of\nit is outside the radius.",
                    "format": "int32",
                    "type": "integer"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "tripPlanParameters": {
                    "$ref": "TripPlanParameters",
                    "description": "Contains fleet that will be used to reach locations in the returned\nsegments."
                }
            },
            "type": "object"
        },
        "GetReachabilitySegmentsResponse": {
            "id": "GetReachabilitySegmentsResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "result": {
                    "items": {
                        "$ref": "VehicleSegment"
                    },
                    "type": "array"
                },
                "status": {
                    "enum": [
                        "UNSPECIFIED",
                        "FOUND",
                        "UNSATISFIABLE_PARAMS",
                        "UNSATISFIABLE_NOCARS",
                        "OUTSIDE_SERVICE_AREA"
                    ],
                    "enumDescriptions": [
                        "",
                        "We found at least one result and segment(s) should be provided.",
                        "A trip within the region specified by the request could not be\nsatisfied because the TripParameters require a vehicle type that\nis either not available to the user or does not exist.",
                        "A trip within the region specified by the request could not be\nsatisfied because there are no cars online that the user can access.",
                        "A trip within the region specified by the request could not be\nsatisfied because it is too far away from our service area."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HistoricalLocation": {
            "description": "Location values with metadata, returned by *Location() API calls.",
            "id": "HistoricalLocation",
            "properties": {
                "lastUseTime": {
                    "description": "The last time the waypoint was used in a trip or updated.\nIdentified by (desired_location, action) - i.e. there will be no two\nHistoricalWaypoint messages with the same values in both of those fields.\nTODO(mmcnaugh) Actually, the HistoricalLocation is identified only by\n(waypoint.desired_location). Add waypoint.action.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "waypoint": {
                    "$ref": "Waypoint",
                    "description": "waypoint.adjusted_location.usage is not set."
                }
            },
            "type": "object"
        },
        "InRideFeedback": {
            "description": "Feedback from the user while they are in a ride.",
            "id": "InRideFeedback",
            "properties": {
                "buttonTime": {
                    "description": "Timestamp in milliseconds provided by the client of when the user pressed\nthe in ride feedback button. This could be roughly correlated with run\nlogs to help triage ride discomfort issues.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "samScale": {
                    "description": "The user's emotional response to what just happened.",
                    "enum": [
                        "SAM_SCALE_UNSPECIFIED",
                        "SAM_SCALE_L2",
                        "SAM_SCALE_L3",
                        "SAM_SCALE_L4",
                        "SAM_SCALE_POSITIVE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Lowest level to describe discomfort: \"confused\", \"disturbed\"",
                        "Middle level to describe discomfort: \"humiliated\", \"stressed\"",
                        "Highest level to describe discomfort: \"nightmare\", \"terrified\"",
                        "Used for positive feedback."
                    ],
                    "type": "string"
                },
                "userComment": {
                    "description": "User's comments about the timestamp.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "InternalTripParameters": {
            "description": "Developer flags to be passed as part of a trip. These are stripped out for\nusers who do not have ClientTripFeatures.internal_parameters_allowed enabled\nvia Mendel. See go/car-internal-trip-flags",
            "id": "InternalTripParameters",
            "properties": {
                "skipFeedback": {
                    "description": "Do not request feedback for this trip.\nLets Ops run some types of tests without having to enter feedback every\ntime.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "LatLng": {
            "description": "Location as latitude, longitude in E7 format.",
            "id": "LatLng",
            "properties": {
                "latE7": {
                    "description": "The e7 latitude of the destination.",
                    "format": "int32",
                    "type": "integer"
                },
                "lngE7": {
                    "description": "The e7 longitude of the destination.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ListLocationsResponse": {
            "id": "ListLocationsResponse",
            "properties": {
                "locations": {
                    "description": "Returned locations.",
                    "items": {
                        "$ref": "HistoricalLocation"
                    },
                    "type": "array"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "ListPaymentMethodsResponse": {
            "id": "ListPaymentMethodsResponse",
            "properties": {
                "paymentMethods": {
                    "items": {
                        "$ref": "ClientPaymentMethod"
                    },
                    "type": "array"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "ListPromotionsRequest": {
            "description": "Request to get a user's available promotions.",
            "id": "ListPromotionsRequest",
            "properties": {
                "latLng": {
                    "$ref": "LatLng",
                    "description": "User's location."
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "ListPromotionsResponse": {
            "description": "Response containing the user's available promotions.",
            "id": "ListPromotionsResponse",
            "properties": {
                "promotionData": {
                    "description": "All of the promotions that are available to a user. They will be ordered as\nfollows:\n - the promotion that's being applied to the active trip (if one exists)\n - the promotions that are available for the active trip (if one exists)\n - any other promotions that are generally available for use by this user\n   (but not to the active trip, if one exists)",
                    "items": {
                        "$ref": "ClientPromotionData"
                    },
                    "type": "array"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                }
            },
            "type": "object"
        },
        "ListTripsSummaryResponse": {
            "id": "ListTripsSummaryResponse",
            "properties": {
                "continuationTime": {
                    "description": "If used as the end_time on the next ListTripsSummary request,\nreturned results will be those immediately prior in time to the oldest\nresult in the current list.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "needContinuation": {
                    "description": "If true, then either there were more trips with creation time in\nthe specified range than request.max_results, or there are trips with\ncreation time before request.start_time. In either case, the client\ncan send another request using continuation_time as end_time to see\nmore trips.\nNOTE: continuation_time will be populated even if need_continuation\nis false. It is always safe for the client to use continuation_time\nto send another request; they might just get zero results.",
                    "type": "boolean"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "tripSummaries": {
                    "description": "Summaries are in descending order by trip_id (most recent to oldest, by\nrequest time).",
                    "items": {
                        "$ref": "ClientTripSummary"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "LiveHelpCallbackRequest": {
            "id": "LiveHelpCallbackRequest",
            "properties": {
                "e164PhoneNumberOverride": {
                    "description": "If filled in, use this phone number instead of the phone number listed for\nthe user in WPS.",
                    "type": "string"
                },
                "fleet": {
                    "description": "Current operating fleet of the user.",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "requestType": {
                    "enum": [
                        "REQUEST_TYPE_UNSPECIFIED",
                        "GENERIC",
                        "WAV",
                        "HIGH_TOUCH"
                    ],
                    "enumDescriptions": [
                        "",
                        "No specific reason set by the user.",
                        "User is calling about a WAV vehicle.",
                        "User is calling for high touch support. For example a vision impaired\nuser may need additional help navigating the app."
                    ],
                    "type": "string"
                },
                "tripId": {
                    "description": "If this call is about a specific trip, that trip id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LiveHelpCallbackResponse": {
            "id": "LiveHelpCallbackResponse",
            "properties": {
                "liveHelpContactInfo": {
                    "$ref": "ClientLiveHelpContactInfo",
                    "description": "Only filled in if Status is not OK and a backup contact option needs to be\ndisplayed to the user."
                },
                "requestId": {
                    "description": "Request ID for the given request.",
                    "type": "string"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "FAILED_TO_START_SESSION",
                        "FAILED_TO_START_SESSION_ALREADY_EXISTS"
                    ],
                    "enumDescriptions": [
                        "",
                        "Requested an agent session successfully.",
                        "Something went wrong in the request to Speakeasy to start the agent\nsession.",
                        "Failed to start session. Another session already exists."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LocalDateTime": {
            "id": "LocalDateTime",
            "properties": {
                "date": {
                    "$ref": "Date",
                    "description": "Required."
                },
                "time": {
                    "$ref": "TimeOfDay",
                    "description": "If unset, means any time during the specified day matches this\nLocalDateTime."
                }
            },
            "type": "object"
        },
        "Location": {
            "description": "A Location consists of a (latitude, longitude) pair and a description\nfor display.",
            "id": "Location",
            "properties": {
                "descriptions": {
                    "description": "The description of the waypoint, such as the display address. This could be\npopulated, for example, by reverse geocoding or from a text search. The\ndescription strings may contain a high-level description of the location,\nor detailed address components, such as:\n * First string containing street number and address;\n * Second, the city, state, and zip code.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gcids": {
                    "description": "List of GCIDs (go/gcid) for location. Could be empty. If there are multiple\nentries the first GCID in the list is the most prominent one. Not to be\\\nset by the client.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The ID is ignored when supplied by the client anywhere but the\nLocation API calls.",
                    "type": "string"
                },
                "latLng": {
                    "$ref": "LatLng",
                    "description": "The lat/lng of this named point."
                },
                "name": {
                    "description": "The name of the location (ie: set by the user, or inherited from a search\nor POI).",
                    "type": "string"
                },
                "placeId": {
                    "description": "Place Id as specified by Places Search. See go/placeid. May not be set. Can\nbe set by client or server.",
                    "type": "string"
                },
                "usage": {
                    "description": "The type of the location. Must not be set by client. The lat_lng\nis matched by the server against favorites created and\nmanipulated with the *Favorite() API calls, and 'usage' is set\nappropriately.",
                    "enum": [
                        "UNSPECIFIED",
                        "FAVORITE",
                        "RECENT"
                    ],
                    "enumDescriptions": [
                        "Unspecified type.",
                        "A location set as a favorite by the user in the client app.",
                        "A location recently used by the user."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LockedDoorOpenAttemptTickle": {
            "id": "LockedDoorOpenAttemptTickle",
            "properties": {
                "attemptTime": {
                    "description": "Time the user tried to open the door.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "tripId": {
                    "description": "ID of the trip feedback is requested for.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MacAddress": {
            "description": "A MAC address used for phone <-> car authentication, e.g. via BLE.",
            "id": "MacAddress",
            "properties": {
                "address": {
                    "description": "6 bytes, MSB first.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MobileFeatures": {
            "description": "Features specific for the mobile clients (Android and iOS).\nThis is the client version of all features.\n - Default value of the flag is \"safe\", ie flags are phrased as blah_enabled\n   so default is not enabled. UNLESS it's a flag to turn something off, in\n   which case it should be called blah_disabled.\n - Always include at least one ldap as the owner, and a group ldap as a\n   fallback.\n - Always include an end date of when this flag is \"projected\" to be fully\n   ramped up and therefore can be removed.\n - Always provide a *good* description of what will happen if this flag is\n   on/off.\n - Always provide a description of which clients versions/users/languages/etc\n   this is expected to affect/be enabled for.\n - Flag names err on the side of descriptive even if they're long.\n - If your flag needs additional settings, add a custom message to this file,\n   include it in MobileFeatures and tag it with which flag it relates to. The\n   tag id of your custom message should be 1000N where N is the tag id of its\n   paired flag.\nFor now the scope is reduced to not change during the life of a trip.",
            "id": "MobileFeatures",
            "properties": {
                "allowInternalParams": {
                    "description": "Owner: pappy@ / chauffeur-ux-eng@\nExpires: Never\nEnables users to set muck with internal only settings such as\nskip_feedback, changing universe, etc.",
                    "type": "boolean"
                },
                "allowMapRotationInActiveTrip": {
                    "description": "Owner: nirmalpatel@ / chauffeur-ux-eng@\nExpires: When we decide that we're going to allow everyone to rotate the\nmap in active trip.",
                    "type": "boolean"
                },
                "callSupportForWavEnabled": {
                    "description": "Owner: skleiser@ / chauffeur-ux-eng@\nExpires: Never\nWhether the user should see the 'Call support for WAV' a11y setting.",
                    "type": "boolean"
                },
                "clientErrorLoggingEnabled": {
                    "description": "Owner: skleiser@ / chauffeur-ux-eng@\nExpires: Never\nWhether to log using go/client-error-logging.",
                    "type": "boolean"
                },
                "creditCardCameraEnabled": {
                    "description": "Owner: mishika@ / victorchan@\nWhen enabled allows user to scan credit card via phone camera.\nExpires: When credit card capture via camera is launched.",
                    "type": "boolean"
                },
                "dashedServiceAreaStyleEnabled": {
                    "description": "Owner: nirmalpatel@ / chauffeur-ux-eng@\nExpires: When we decide the dashed service area styling experimenting is\ngood enough that we make it the default or we're done with trying it.\nEnables a experimental dashed service area styling.",
                    "type": "boolean"
                },
                "destinationFirstEnabled": {
                    "description": "Owner: mishika@ / chauffeur-ux-eng@\nWhen enabled users can see the destination first flow.\nExpires: Never.",
                    "type": "boolean"
                },
                "dummyFlagEnabled": {
                    "description": "Owner: mishika@ / chauffeur-ux-eng@\nA dummy flag for the sole purpose of evaluating an A/A experiment.\nSee b/124774990.\nThis flag has no app/client side impact.\nExpires: when we have validated A/A experiment.",
                    "type": "boolean"
                },
                "edsMomentUiEnabled": {
                    "description": "Owner: rgam@ / chauffeur-ux-eng@\nFlag to enable showing an EDS-specific piece of UI when the user is on a\nride with an empty driver seat.\nExpires: Never.",
                    "type": "boolean"
                },
                "enableAndroidSystemLogging": {
                    "description": "Owner: victorchan@ / chauffeur-ux-eng@\nExpires: Never\nWhen enabled logs will be written to Android and visible in logcat. Should\nnot be turned on by default for ERP/Prod users.",
                    "type": "boolean"
                },
                "garageViewEnabled": {
                    "description": "Owner: nirmalpatel@ / chauffeur-ux-eng@\nExpires: When everyone has the garage view.",
                    "type": "boolean"
                },
                "inAppCarMonologue": {
                    "description": "Owner: salilsp@ / chauffeur-ux-eng@\nWhether or not to show the In App Car Monologue.\nExpires: When we decide to launch this feature.",
                    "type": "boolean"
                },
                "itineraryMapInteractionEnabled": {
                    "description": "Owner: mishika@ / chauffeur-ux-eng@\nFlag to allow itinerary map interaction.\nExpires: When we decide to launch this feature.",
                    "type": "boolean"
                },
                "itineraryRouteEnabled": {
                    "description": "Owner: mishika@, nirmalpatel@\nWhen enabled, shows actual car route in itinerary route overview.\nExpires: Never.",
                    "type": "boolean"
                },
                "personalMusicEnabled": {
                    "description": "Owner: ewol@ / chauffeur-ux-eng@\nExpires: When personal music is fully launched to everyone.\nWhen enabled, uses the rider's credentials for UXC Google Play Music.\nMust be kept in sync with onboard feature/flag:\n  http://cr/233882823\n  http://cr/233884612",
                    "type": "boolean"
                },
                "piiLoggingEnabled": {
                    "description": "Owner: mishika@\nWhen enabled, adds pii to phone logs (i.e. for fishfooders, ERP).\nExpires: Never.",
                    "type": "boolean"
                },
                "proposeTripPlanForCreateEnabled": {
                    "description": "Owner: skleiser@ / qzhwang@ / chauffeur-ux-eng@\nExpires: When we deprecate and remove CheckLocation/DetermineEta.\nWhen enabled, the client will use the ProposeTripPlan API for the create\ntrip flow.",
                    "type": "boolean"
                },
                "proposeTripPlanForEditEnabled": {
                    "description": "Owner: skleiser@ / qzhwang@ / chauffeur-ux-eng@\nExpires: When we deprecate and remove CheckLocation/DetermineEta.\nWhen enabled, the client will use the ProposeTripPlan API for the edit\ntrip flow, in an active trip. This assumes that the flag\npropose_trip_plan_for_create_enabled is also true. If it is not, this flag\nwill not be read on the client.",
                    "type": "boolean"
                },
                "requireNda": {
                    "description": "Owner: victorchan@ /chauffeur-ux-eng@\nWhen enabled ERP users are asked to accept the NDA.\nExpires: Never.",
                    "type": "boolean"
                },
                "requirePassengerCountEnabled": {
                    "description": "Owner: mishika@ / chauffeur-ux-eng@\nFlag to require passenger count prior to creating a trip.\nExpires: Never.",
                    "type": "boolean"
                },
                "satelliteMapButtonEnabled": {
                    "description": "Owner: nirmalpatel@ / chauffeur-ux-eng@\nExpires: When we decide satellite map button is here to stay.\nEnables a button to toggle satellite view on the map.",
                    "type": "boolean"
                },
                "sendDebugPsd": {
                    "description": "Owner: victorchan@ / chauffeur-ux-eng@\nExpires: Never\nWhen enabled, clients will send all debug product specific data to Google\nfeedback. Otherwise only Trip ID will be sent.",
                    "type": "boolean"
                },
                "sendUserLocationPrePickupEnabled": {
                    "description": "Owner: jsherbach@ / chauffeur-hailing@\nExpires: TODO(jsherbach)\nCorresponds to OnboardFeatures::ignore_user_location_for_pickup",
                    "type": "boolean"
                },
                "settingsDebugOptionsEnabled": {
                    "description": "Owner: salilsp@ / chauffeur-ux-eng@\nExpires: Never\nEnables users to set muck with developer only settings such as verbose http\nlogging.",
                    "type": "boolean"
                },
                "settingsExperimentalFeaturesOptionsEnabled": {
                    "description": "Owner: salilsp@ / chauffeur-ux-eng@\nExpires: Never\nEnables users to set muck with experimental feature settings.",
                    "type": "boolean"
                },
                "showCalendarResults": {
                    "description": "Owner: salilsp@ / chauffeur-ux-eng@\nExpires: When calendar results are migrated offboard.\nShows calendar results for destination.",
                    "type": "boolean"
                },
                "showConfidentialityAlert": {
                    "description": "Owner: mishika@ / chauffeur-ux-eng@\nExpires: Never\nShows an alert reminding users of the confidentiality of app.",
                    "type": "boolean"
                },
                "showFirstRunA11yButton": {
                    "description": "Owner: mishika@ / chauffeur-ux-eng@\nExpires: When this first run a11y button has been replaced.\nWhether the app shows the accessibility button in the create trip flow on\nthe first run.",
                    "type": "boolean"
                },
                "showInteractiveFeedbackNotification": {
                    "description": "Owner: victorchan@ / chauffeur-ux-eng@\nExpires: When interactive feedback notifications are fully launched.\nWhen enabled, users will be able to directly give feedback via system\nnotifications.",
                    "type": "boolean"
                },
                "showLicensePlate": {
                    "type": "boolean"
                },
                "showUnlockButtonInNotification": {
                    "description": "Owner: samkansara@ / chauffeur-ux-eng@\nExpires: When we decide to launch this notification action.\nShows an action in the notification to unlock the car.",
                    "type": "boolean"
                },
                "skipAddPaymentEnabled": {
                    "description": "Owner: mishika@ /chauffeur-ux-eng@\nWhen enabled users can see the skip button in the add payment UI within\nthe account completion flow.\nExpires: Never.",
                    "type": "boolean"
                },
                "streamSearchApiEnabled": {
                    "description": "Owner: victorchan@ / chauffeur-ux-eng@\nFlag to determine if the client should use the offboard provided\nstream search API.\nExpires: When we remove old places search api.",
                    "type": "boolean"
                },
                "suggestedDestinationsEnabled": {
                    "description": "Owner: skleiser@ / chauffeur-ux-eng@\nWhether the suggested destinations feature is enabled. Note that this\nfeature only applies to the destination first flow, so that flag also\nneeds to be enabled for a user to see the feature.\nExpires: When suggested destinations feature is fully launched.",
                    "type": "boolean"
                },
                "toggleWavSettingEnabled": {
                    "description": "Owner: skleiser@ / chauffeur-ux-eng@\nExpires: Never\nWhether the user should see the WAV toggle a11y setting.",
                    "type": "boolean"
                },
                "useChargeAmountInRideHistory": {
                    "description": "See b/131257558 for additional context. Clients should be using the charge\namount rather than the fare amount on the ride history page. We previously\nused the fare amount because the charge was not being created beforehand,\nwhich would lead to inconsistencies if the user opened the ride history\npage while riding. Now that the charge is created at the start of a trip,\nwe can switch to using the charge amount reliably.",
                    "type": "boolean"
                },
                "verboseLoggingEnabled": {
                    "description": "Owner: skleiser@ / chauffeur-ux-eng@\nExpires: Never\nWhether verbose logging is enabled. This is currently only used on Android.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Monologue": {
            "description": "Things car wants to tell the user (eg. waiting at a red light).",
            "id": "Monologue",
            "properties": {
                "signalOrSign": {
                    "description": "The Signal or Sign the Vehicle is currently seeing.",
                    "enum": [
                        "SIGNAL_OR_SIGN_NONE",
                        "RAILROAD_GREEN",
                        "RAILROAD_RED",
                        "RAILROAD_UNKNOWN",
                        "STOP_SIGN",
                        "TRAFFIC_SIGNAL_GREEN",
                        "TRAFFIC_SIGNAL_RED",
                        "TRAFFIC_SIGNAL_UNKNOWN",
                        "TRAFFIC_SIGNAL_YELLOW"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "slowZone": {
                    "description": "The Slow Zone the Vehicle is passing through or stopped in.",
                    "enum": [
                        "SLOW_ZONE_NONE",
                        "SLOW_ZONE_GENERIC",
                        "SLOW_ZONE_SCHOOL",
                        "SLOW_ZONE_CONSTRUCTION"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NegativeFeedbackItem": {
            "description": "Negative feedback, selectable by the user.",
            "id": "NegativeFeedbackItem",
            "properties": {
                "humanReadableText": {
                    "description": "Human readable string shown to the user.",
                    "type": "string"
                },
                "topic": {
                    "description": "Topic of the negative feedback.",
                    "enum": [
                        "NEGATIVE_UNSPECIFIED",
                        "PICKUP",
                        "WAIT_TIME",
                        "STUCK",
                        "ROUTE",
                        "CAUTIOUS",
                        "UNSAFE",
                        "UNCOMFORTABLE",
                        "DROPOFF",
                        "WAYMO_TRAINED_DRIVER",
                        "OTHER"
                    ],
                    "enumDescriptions": [
                        "",
                        "Overall pickup experience.",
                        "Wait time for pickup.",
                        "Car got stuck.",
                        "Route taken by vehicle.",
                        "Car was too cautious.",
                        "Driving felt unsafe.",
                        "Driving was uncomfortable.",
                        "Overall dropoff experience.",
                        "Trained driver.",
                        "Other should have freeform_feedback filled in."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoShowWarningDetails": {
            "id": "NoShowWarningDetails",
            "properties": {
                "departureTime": {
                    "description": "Absolute time (UTC epoch) at which the car will depart if no one arrives\nand boards.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoShowWarningTickle": {
            "description": "A tickle informing the user that the car will soon depart the pickup\nlocation if no one arrives and boards.",
            "id": "NoShowWarningTickle",
            "properties": {
                "departureTime": {
                    "description": "Absolute time (UTC epoch) at which the car will depart if no one arrives\nand boards.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "timezone": {
                    "description": "The timezone of the service area in which the trip is being taken. Used for\nformatting the absolute departure time for display.",
                    "type": "string"
                },
                "tripId": {
                    "description": "ID of the active trip.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OpsDriverInfo": {
            "description": "Identifies the ops driver in a vehicle at time of a hail. Which fields are\npopulated are determined by policy of the local or state jurisdiction.",
            "id": "OpsDriverInfo",
            "properties": {
                "displayText": {
                    "description": "Text to use to display in ops driver UI. Guaranteed to be 40 chars or less.",
                    "type": "string"
                },
                "familyName": {
                    "description": "The driver's family name. The app may ignore it in favor of the display\ntext above. Needed for trips requested via the Partner Trip API.",
                    "type": "string"
                },
                "givenName": {
                    "description": "The driver's first name. The app may ignore it in favor of the display\ntext above. Needed for trips requested via the Partner Trip API.",
                    "type": "string"
                },
                "photoUri": {
                    "description": "Driver photo resource as a HTTP/S URL or base64-encoded data URI.\nThis is populated with actual photo or default in a failure.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartnerTripParameters": {
            "description": "For trips created via the Partner Trip API. The real user taking the trip in\nsuch case is the end user of the partner company, and the Gaia Id nominally\ntaking it is a Borg service account aka partner robot account. All other\ntrips should not use this proto.",
            "id": "PartnerTripParameters",
            "properties": {
                "firstName": {
                    "description": "Information about the actual user who took the trip. This is not the same\nas the robot user that ostensibly sent the request to ClientTripService.",
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "maxCreateTripCommitTimestamp": {
                    "description": "CreateTrip must commit before this timestamp (we use an obscure Spanner\nfeature to guarantee that), to make sure that the robot account lease,\nwhich was acquired for the creation of a trip plan proposal that these\nparameters belong to, is still not expired at the time of trip creation.\nFor details on this scheme please see go/woodle-design",
                    "format": "int64",
                    "type": "string"
                },
                "partnerTripEndpoint": {
                    "enum": [
                        "UNSPECIFIED_ENDPOINT",
                        "NORMAL_ENDPOINT",
                        "FAKE_ENDPOINT"
                    ],
                    "enumDescriptions": [
                        "",
                        "The trip is originating from the normal partner trip endpoint. It should\nonly be used to create trips with real cars, real billing, etc.",
                        "The trip is originating from the \"fake\" partner trip endpoint, and should\nonly be used to create fake trips with fake cars, fake billing, etc."
                    ],
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PaymentMethodProperty": {
            "description": "Various user specified properties for a payment method.",
            "id": "PaymentMethodProperty",
            "properties": {
                "isDefault": {
                    "description": "Whether this is the primary payment method for the user. There should\nonly be one default payment method per user. If there is only one\npayment method for the user it will be marked as default automatically.",
                    "type": "boolean"
                },
                "nickname": {
                    "description": "User specified nickname for the payment method. This may or may not be\npopulated. This may be unique enough to identify the user and link trips\nfor the user so it is annotated with ST_PERSONAL_DATA.\n(used to be ST_USER_CONTENT: (b/128875660))",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PendingTripPlan": {
            "description": "The trip request message status.\nThis message reflects the current state of a new or updated trip plan from\nthe server.",
            "id": "PendingTripPlan",
            "properties": {
                "billingData": {
                    "$ref": "ClientBillingData",
                    "description": "Billing data for the pending trip plan."
                },
                "tripPlan": {
                    "$ref": "ClientTripPlan",
                    "description": "The trip plan for this request."
                },
                "tripPlanProposalToken": {
                    "description": "The token representing the trip plan proposal",
                    "type": "string"
                },
                "tripPlanStatus": {
                    "$ref": "Status",
                    "description": "The current status of this trip plan."
                }
            },
            "type": "object"
        },
        "PhoneLog": {
            "description": "LINT.IfChange",
            "id": "PhoneLog",
            "properties": {
                "account": {
                    "description": "Account associated with the log comment if available",
                    "type": "string"
                },
                "genericMessage": {
                    "description": "Current message logged by the phone, potentially can contain all the Json\nfrom a TripStatus. Marked as PII because it contains unstructured data\nwhich might be sensitive (eg, location and account information).",
                    "type": "string"
                },
                "level": {
                    "description": "The level of severity for this entry.",
                    "enum": [
                        "LEVEL_UNSPECIFIED",
                        "VERBOSE",
                        "INFO",
                        "WARNING",
                        "ERROR"
                    ],
                    "enumDescriptions": [
                        "",
                        "Verbose logs are only published on debug builds and can include anything.",
                        "Info logs can help debug specific errors, and should not include PII.",
                        "Warnings are things to track, but not necessarily something that causes\na user issue.",
                        "Errors should represent a bad state that directly affects the user."
                    ],
                    "type": "string"
                },
                "logTime": {
                    "description": "Timestamp of when the log was recorded on the phone",
                    "format": "google-datetime",
                    "type": "string"
                },
                "tag": {
                    "description": "An arbitrary TAG for this log line.",
                    "type": "string"
                },
                "threadName": {
                    "description": "Name of the thread the log line was printed on if available.",
                    "type": "string"
                },
                "tripId": {
                    "description": "TripId associated with the log comment if available",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PhoneNumberInfo": {
            "description": "NOTE: All phone number information is determined through WPS (go/wps). If a\nclient tries to modify any part of the PhoneNumberInfo by calling\nUpdateUserProfile it will fail.",
            "id": "PhoneNumberInfo",
            "properties": {
                "phoneNumber": {
                    "description": "Full E.164 phone number for this user.",
                    "type": "string"
                },
                "verificationState": {
                    "enum": [
                        "VERIFICATION_UNKNOWN",
                        "UNVERIFIED",
                        "VERIFIED_AND_FRESH",
                        "VERIFIED_BUT_STALE",
                        "NO_PHONE_NUMBER_STORED"
                    ],
                    "enumDescriptions": [
                        "Default value. If WPS returns an error, we won't set the verification\nstate and it will result in the default value.\nIn this case the client should not request a number from the user.",
                        "A phone number is stored (ie phone_number is not empty), but it was\nnever verified.\nIn this case the client should auto-populate the request phone number\npage and request it verified.",
                        "A phone number is stored and it has been verified recently.\nIn this case the client should not request a number from the user.",
                        "A phone number is stored but it has not been verified recently (90\ndays). See verificationStaleThreshold in\njava/com/google/focus/backend/server/VerificationUtil.java\nIn this case the client does not need to request a phone number for\nthe user, since it's likely still alright (90 days is not very long).",
                        "No phone number is stored for this user, i.e. phone_number will be\nempty but not due to any errors.\nIn this case the client should ask the user for a phone number and then\nrequest it verified."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PickupEtaTickle": {
            "description": "A tickle updating the user on the ETA of a requested car.",
            "id": "PickupEtaTickle",
            "properties": {
                "etaDiffFromPrevious": {
                    "description": "The change in value from the recent ETA sent to the user before\nthe tickle in which this message is included. It's helpful for a\nclient that lacks context to alert the user that their ETA has\nchanged drastically without the client having to make a\nround-trip request to the server to find out the history of ETA\ntickles. If the fleet has gone offline between this tickle and the\nprevious one, then eta_diff_from_previous_seconds is not set. The client\nshould notify the user that the fleet is offline, and at that point\nthe user should have no expectation of receiving an ETA.\nE.g. curr_event->eta_absolute_seconds -\n     curr_event->eta_diff_from_previous_seconds\n       == prev_event->eta_absolute_seconds",
                    "format": "google-duration",
                    "type": "string"
                },
                "licensePlate": {
                    "description": "License plate of the vehicle.",
                    "type": "string"
                },
                "newTripState": {
                    "enum": [
                        "STATE_UNSPECIFIED",
                        "REQUESTED",
                        "INFEASIBLE",
                        "QUEUED",
                        "TO_PICKUP",
                        "PICKUP_MOVE_ALONG",
                        "PICKUP_NEED_AUTH",
                        "AT_PICKUP",
                        "NO_SHOW",
                        "PICKUP_HAVE_AUTH",
                        "BOARDING",
                        "RIDING",
                        "STOP_DROPOFF",
                        "FINAL_DROPOFF",
                        "CANCEL_REQUESTED",
                        "STRANDED",
                        "COMPLETED",
                        "CANCELLED"
                    ],
                    "enumDescriptions": [
                        "Unspecified trip state.",
                        "The trip was accepted by the server, and is waiting to be assigned\nto a vehicle.",
                        "The trip was accepted by the server but later rejected by the server.",
                        "The trip was accepted by the server. A car has been selected but it is\ncurrently serving another trip.",
                        "The car is on its way to pick up the user.",
                        "The car had already reached pickup, but needed to \"move along\", and is in\nthe process of circling the block or otherwise reparking.",
                        "The car is at pickup and is waiting for authentication.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The car is at pickup, waiting for the user.",
                        "The passenger did not arrive at the pickup location.",
                        "The car is at pickup and is authenticated.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The user has opened the door and is boarding the car.",
                        "The car is riding with a user on board.",
                        "The car arrived at a stop dropoff.",
                        "The car arrived at the final dropoff.",
                        "A trip cancelation was requested.\nDEPRECATED in favor of TripStatus#is_cancel_requested.",
                        "The car cannot complete the trip, and the user is stranded. This can\nhappen either pre- or post- pickup.",
                        "The trip has completed.",
                        "The trip is canceled."
                    ],
                    "type": "string"
                },
                "pickupEtaTime": {
                    "description": "Absolute unix epoch time of estimated arrival. Subject to clock skew.\nTODO(mmcnaugh) Include timestamp of message from vehicle that claimed\nthis ETA, so the phone can inform the user that this estimate hasn't\nbeen updated in a while?\nTODO(mmcnaugh) How to deal with phones that have their clock set\nincorrectly?",
                    "format": "google-datetime",
                    "type": "string"
                },
                "tripId": {
                    "description": "ID of the active trip.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PolyLine": {
            "id": "PolyLine",
            "properties": {
                "vertex": {
                    "items": {
                        "$ref": "LatLng"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Polygon": {
            "id": "Polygon",
            "properties": {
                "loop": {
                    "items": {
                        "$ref": "PolyLine"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PoodleDriver": {
            "description": "Poodle driver information shown to the user.",
            "id": "PoodleDriver",
            "properties": {
                "firstName": {
                    "description": "Driver's first name.",
                    "type": "string"
                },
                "imageUrl": {
                    "description": "The driver's picture URL.",
                    "type": "string"
                },
                "phoneNumber": {
                    "description": "Driver phone number. This is expected to be a temporary proxy'ed number\nthat lasts only for the duration of the trip plus an hour or two. Ie,\nit cannot be used to find/identify the driver a short while after the\ntrip finishes.",
                    "type": "string"
                },
                "rating": {
                    "description": "The driver's rating with double digit precision, ranging from 0 to 5.\nThe value comes in textual format type, e.g., \"4.8\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PoodleVehicle": {
            "description": "Vehicle information we show to the user for Poodle rides.",
            "id": "PoodleVehicle",
            "properties": {
                "color": {
                    "description": "Color of the vehicle.",
                    "type": "string"
                },
                "licensePlateState": {
                    "description": "Two letter abbreviation of the license place state, e.g., CA.",
                    "type": "string"
                },
                "make": {
                    "description": "Make of the vehicle, eg, Porsche.",
                    "type": "string"
                },
                "model": {
                    "description": "Model of the vehicle, eg, 911.",
                    "type": "string"
                },
                "modelYear": {
                    "description": "Model year of the vehicle as an integer, eg. 2015.",
                    "format": "int32",
                    "type": "integer"
                },
                "photoUri": {
                    "description": "The URI link to the picture of the vehicle.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PositiveFeedbackItem": {
            "description": "Positive feedback, selectable by the user.",
            "id": "PositiveFeedbackItem",
            "properties": {
                "humanReadableText": {
                    "description": "Human readable string shown to the user.",
                    "type": "string"
                },
                "topic": {
                    "description": "Topic of the positive feedback.",
                    "enum": [
                        "POSITIVE_UNSPECIFIED",
                        "SMOOTH",
                        "WAIT_TIME",
                        "PICKUP",
                        "DROPOFF",
                        "WAYMO_TRAINED_DRIVER",
                        "OTHER"
                    ],
                    "enumDescriptions": [
                        "",
                        "Smooth drive.",
                        "Wait time for pickup.",
                        "Overall pickup experience.",
                        "Overall dropoff experience.",
                        "Trained driver.",
                        "Other should have freeform_feedback filled in."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PostTripFeedback": {
            "description": "Feedback related to a completed trip.",
            "id": "PostTripFeedback",
            "properties": {
                "buttonTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "freeformFeedback": {
                    "description": "Additional freeform feedback provided by the user.",
                    "type": "string"
                },
                "negativeFeedbackTopicsSelected": {
                    "description": "Negative feedback topics selected by the user, and in the order they were\nselected.",
                    "enumDescriptions": [
                        "",
                        "Overall pickup experience.",
                        "Wait time for pickup.",
                        "Car got stuck.",
                        "Route taken by vehicle.",
                        "Car was too cautious.",
                        "Driving felt unsafe.",
                        "Driving was uncomfortable.",
                        "Overall dropoff experience.",
                        "Trained driver.",
                        "Other should have freeform_feedback filled in."
                    ],
                    "items": {
                        "enum": [
                            "NEGATIVE_UNSPECIFIED",
                            "PICKUP",
                            "WAIT_TIME",
                            "STUCK",
                            "ROUTE",
                            "CAUTIOUS",
                            "UNSAFE",
                            "UNCOMFORTABLE",
                            "DROPOFF",
                            "WAYMO_TRAINED_DRIVER",
                            "OTHER"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "orderedNegativeFeedbackTopicsShown": {
                    "description": "Order in which the negative feedback topics were shown to the user.",
                    "items": {
                        "$ref": "NegativeFeedbackItem"
                    },
                    "type": "array"
                },
                "orderedPositiveFeedbackTopicsShown": {
                    "description": "Order in which the positive feedback topics were shown to the user.",
                    "items": {
                        "$ref": "PositiveFeedbackItem"
                    },
                    "type": "array"
                },
                "positiveFeedbackTopicsSelected": {
                    "description": "Positive feedback topics selected by the user, and in the order they were\nselected.",
                    "enumDescriptions": [
                        "",
                        "Smooth drive.",
                        "Wait time for pickup.",
                        "Overall pickup experience.",
                        "Overall dropoff experience.",
                        "Trained driver.",
                        "Other should have freeform_feedback filled in."
                    ],
                    "items": {
                        "enum": [
                            "POSITIVE_UNSPECIFIED",
                            "SMOOTH",
                            "WAIT_TIME",
                            "PICKUP",
                            "DROPOFF",
                            "WAYMO_TRAINED_DRIVER",
                            "OTHER"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "rideRating": {
                    "description": "The ride rating (ex. star rating) from 1 to 5.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PreRideFeedback": {
            "description": "Feedback from the user while the car is on its way to pick them up.",
            "id": "PreRideFeedback",
            "properties": {
                "buttonTime": {
                    "description": "Timestamp in milliseconds provided by the client of when the user pressed\nthe preride feedback button. This could be roughly correlated with run\nlogs to help triage issues (ex. route confusion).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "samScale": {
                    "description": "The user's emotional response to what just happened.",
                    "enum": [
                        "SAM_SCALE_UNSPECIFIED",
                        "SAM_SCALE_L2",
                        "SAM_SCALE_L3",
                        "SAM_SCALE_L4",
                        "SAM_SCALE_POSITIVE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Lowest level to describe discomfort: \"confused\", \"disturbed\"",
                        "Middle level to describe discomfort: \"humiliated\", \"stressed\"",
                        "Highest level to describe discomfort: \"nightmare\", \"terrified\"",
                        "Used for positive feedback."
                    ],
                    "type": "string"
                },
                "userComment": {
                    "description": "User's comments about the timestamp.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProcessChargeRequest": {
            "id": "ProcessChargeRequest",
            "properties": {
                "paymentMethodId": {
                    "description": "Optional field that allows processing charge on a different payment method\nthan is currently associated with this trip. If this field is empty,\nwill process the charge on the card that is currently associated\nwith this trip.",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "tripId": {
                    "description": "The trip for which to process the charge. The trip should have been\ncompleted and a charge entry must already exist for this trip (this\ngenerally happens right after trip completion).\n\nIt is not necessary that we have previously tried processing a charge for\nthis trip (e.g. this manual invocation can be the first attempt at\nprocessing the charge).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProcessChargeResponse": {
            "id": "ProcessChargeResponse",
            "properties": {
                "chargeInfo": {
                    "$ref": "ClientChargeInfo",
                    "description": "Latest information about the charge for this trip."
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "ALREADY_PROCESSED_CHARGE",
                        "FAILED_TO_PROCESS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "The charge has already been processed successfully and/or should not be\nprocessed.",
                        "Something went wrong when trying to process the charge."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PromotionAvailability": {
            "id": "PromotionAvailability",
            "properties": {
                "availability": {
                    "enum": [
                        "AVAILABILITY_UNSPECIFIED",
                        "AVAILABLE",
                        "TEMPORARILY_EXHAUSTED",
                        "PERMANENTLY_EXHAUSTED",
                        "EXPIRED"
                    ],
                    "enumDescriptions": [
                        "",
                        "The promotion is available to be used on a trip.",
                        "NOTE: the values below are *not* yet supported and/or used anywhere, they\nare just reserved for future usage. For now, we are marking all\nnon-available promotions as AVAILABILITY_UNSPECIFIED (i.e. it encompasses\nall of TEMPORARILY_EXHAUSTED, PERMANENTLY_EXHAUSTED and EXPIRED).",
                        "The promotion has been permanently exhausted and cannot be used.\nE.g. \"$5 off your ride - one time only\" promotion, and user has used it\nonce already.",
                        "The promotion has expired and cannot be used.\nE.g. \"valid until 1/12\" promotion, and it's now 1/13."
                    ],
                    "type": "string"
                },
                "tripAvailability": {
                    "description": "This will only be set when the user is currently on a trip.",
                    "enum": [
                        "TRIP_AVAILABILITY_UNSPECIFIED",
                        "APPLIED_TO_TRIP",
                        "AVAILABLE_FOR_TRIP",
                        "NOT_AVAILABLE_FOR_TRIP"
                    ],
                    "enumDescriptions": [
                        "",
                        "The promotion is currently being applied to the active trip.",
                        "The promotion is available to be applied to the active trip.",
                        "The promotion cannot be applied to the active trip. Additional details\non unavailability may be detailed in an accompanying\n\"PromotionAvailability\" enum."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProposeTripPlanRequest": {
            "description": "This works for both pre and active trips. Client is expected to use the\nproposal token returned from a previous call in order to continue refine the\nproposal, except for when there's provider change, or the very first call,\nwhere the client can set the desired taas provider in place of the token.\n\nFor an active trip, client should already have a proposal token corresponding\nto the current trip and is expected to pass it in for further changes\n(update or cancellation). No changes can be made w/o this token; passing no\ntoken or a previous tokens will result in error. Client must also set the\nactive_trip_id which server will verify against.",
            "id": "ProposeTripPlanRequest",
            "properties": {
                "activeTripId": {
                    "description": "Set this iff the client is on an active trip.",
                    "type": "string"
                },
                "maxNumResults": {
                    "description": "Maximum number of results the client wants. Backend may return less or\nequal to that number of proposals. If this is set to zero, then one result\nwill be returned. This must never be set negative.",
                    "format": "int32",
                    "type": "integer"
                },
                "polylinePrecision": {
                    "description": "Returned polylines will be E5 precision if unspecified.\nServer may return polylines at a precision other than the one requested.",
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "previousProposalToken": {
                    "description": "A proposal token uniquely represents a TripPlanProposal. Client can use\nthe same token for different proposals requests (and backend will return\na unique token for each returned proposal).",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "taasProvider": {
                    "enum": [
                        "UNSPECIFIED",
                        "WAYMO",
                        "POODLE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Regular Waymo trips.",
                        "Trips provided by Poodle."
                    ],
                    "type": "string"
                },
                "tripPlan": {
                    "$ref": "ClientTripPlan",
                    "description": "The trip_plan has all the details of a client's request. The requirements\non 'trip_plan' may vary based on the type of request as described below.\nEach waypoint may or may not contain a adjusted_location, but must contain\na desired_location.\n  * For CREATE_TRIP, server will fill in the adjusted locations for those\n    waypoints that are missing them and return the fare estimate for the\n    trip when possible. For waypoints that already have adjusted locations,\n    offboard will validate if they're still valid, update and indicate\n    whether it's been updated or not.\n  * For CANCEL_TRIP, the plan will have no waypoints and cancellation fare\n    estimate may be returned.\n  * For UPDATE_TRIP, an updated trip and fare estimate will be returned.\n    Statuses for each waypoint are returned as for CREATE_TRIP.\n  * For SUGGEST_TRIP, server uses the first waypoint's desired_location\n    as the user's pickup location and suggests both pick and dropoff\n    waypoints in the returned trip plan proposals. These proposals can be\n    used directly to call CreateTrip or to a subsequent ProposeTripPlan\n    with the type of CREATE_TRIP. In the future, we may also add support\n    for having a desired destination, which the server would use as a\n    signal to make suggestions. When that happens, this destination would\n    only be a hint, not a hard constraint.\nFor each mode, other than cancellation, multiple proposals may be returned."
                },
                "type": {
                    "enum": [
                        "UNSPECIFIED",
                        "CREATE_TRIP",
                        "UPDATE_TRIP",
                        "CANCEL_TRIP",
                        "SUGGEST_TRIP"
                    ],
                    "enumDescriptions": [
                        "",
                        "A proposal to create a new trip.",
                        "A proposal to update a trip that has already been created (i.e. trip_id\nexists).",
                        "A proposal to cancel a trip that has already been created.",
                        "A proposal to recommend/suggest a trip to the user."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProposeTripPlanResponse": {
            "id": "ProposeTripPlanResponse",
            "properties": {
                "proposal": {
                    "description": "Trip plans that satisfy the proposed pickup and dropoff. When multiple\nproposals are returned, they're always ordered from most likely to least\nliekly to be picked by the user. Ie, in the descending order of the\nlikelihood. When the status is not OK, we will not return any proposal.",
                    "items": {
                        "$ref": "TripPlanProposal"
                    },
                    "type": "array"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "description": "Status for overall request. If there's at least one vehicle_trip_plan that\nis feasible, status will be OK.",
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "UNAVAILABLE",
                        "WAYPOINTS_TOO_CLOSE",
                        "OUTSIDE_SERVICE_AREA",
                        "TAAS_PROVIDER_CHANGED",
                        "ALREADY_PENDING",
                        "PROPOSAL_STALE",
                        "NO_CHANGE_TO_UPDATE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Request is possible with the given constraints, though creating a trip\nmay require more constraints to be filled in or confirmed. For example,\nif pickup was inferred and ETA is approximate, then the client should\nallow the user to make those choices.",
                        "No cars are available so we cannot provide any proposal.",
                        "At least two consecutive waypoints are too close for us to return a\ntrip plan.",
                        "Not all proposed waypoints are within the service area.",
                        "Backend cannot serve the request with the given taas provider. Feasible\ntaas provider(s) will be available in one (or more) of the response\nproposal(s). Client needs to pick one of them and re-propose.",
                        "Client attempted to modify a trip while some other update (possibly\na cancellation) was still not accepted.",
                        "Situation has changed and the proposal is rendered out of date (trip\nalready terminated, wrong active_trip_id and etc). Client should start\nafresh. ProposeTripPlan will use expired proposals as previous and\ncontinue the process. Ie, it doesn't return this error based on that the\nprevious proposal has expired.",
                        "The requested trip plan is identical to the current active one. We will\nnot return any proposal but just inform the client in this case. This is\nonly applicable during UPDATE_TRIP."
                    ],
                    "type": "string"
                },
                "taasProvider": {
                    "description": "The taas provider backend wants to use. For successful calls, client can\nuse it for verification with local state. On TAAS_PROVIDER_CHANGED error,\nclient should set provider to this and try again.",
                    "enum": [
                        "UNSPECIFIED",
                        "WAYMO",
                        "POODLE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Regular Waymo trips.",
                        "Trips provided by Poodle."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProposedWaypoint": {
            "description": "How a vehicle will get to a waypoint in the requested plan and how the user\nwill get to/from that waypoint from their actual location.",
            "id": "ProposedWaypoint",
            "properties": {
                "attributes": {
                    "description": "Attributes associated with proposed location.",
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "UNSPECIFIED",
                            "IN_PARKING_LOT"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "preferredPulloverReason": {
                    "description": "Indicates that this location has been marked as a PREFERRED_PULLOVER\nregion by MOPs. If unset, equivalent to a reason of UNSPECIFIED, the\nlocation is not a preferred pullover location.",
                    "enum": [
                        "UNSPECIFIED",
                        "GOOD_LOCATION",
                        "CLOSE_TO_ENTRANCE",
                        "UNKNOWN_REASON"
                    ],
                    "enumDescriptions": [
                        "When returned by ProposeTripPlan, this means it's not a preferred\nlocation.",
                        "Good location for car to pull over.",
                        "Close to building entrance.",
                        "Preferred pullover location, but reason unknown."
                    ],
                    "type": "string"
                },
                "routePolyline": {
                    "$ref": "EncodedPolyline",
                    "description": "The route the vehicle would take to get to this waypoint. Only populated\nfor post-pickup segments. Not populated if the segment is already\ncomplete."
                },
                "status": {
                    "description": "Status of the proposed waypoint.",
                    "enum": [
                        "UNSPECIFIED",
                        "UNREACHABLE",
                        "DESIRED_LOCATION_ADJUSTED",
                        "SNAPPED_TO_TARGET_LOCATION",
                        "ADJUSTED_LOCATION_UPDATED",
                        "ADJUSTED_LOCATION_CONFIRMED",
                        "DESIRED_LOCATION_RETURNED_AS_ADJUSTED",
                        "SNAPPED_TO_DESIRED_LOCATION"
                    ],
                    "enumDescriptions": [
                        "",
                        "This waypoint cannot be reached by the assigned car or all available\ncars. The former only applies to active trip updates and the latter\napplies to trip creation.",
                        "Ran location check on the desired location and filled in the adjusted\nlocation along with the address descriptions for the desired location\nwhen possible.",
                        "The returned adjusted_location is a nearest to the given\ntarget_location.",
                        "The adjusted_location passed in had to be changed in order to stay\nwithin the service area. The updated location is the nearest to the\npassed in adjusted_location.",
                        "No change to the adjusted_location; ie, confirmed it's still in the\nservice area. We always check it when there's an adjusted_location.",
                        "The result location is the same as the desired passed in. Currently\nonly used by Poodle as we don't adjust the requested location. Note\nthat UNREACHABLE may still apply if the requested location is outside\nthe service area.",
                        "There's no target location nor adjusted location and the location\nsource is MAP_PAN. This normally means some non-sticky pans."
                    ],
                    "type": "string"
                },
                "walkingDirections": {
                    "description": "Walking directions to reach the pickup point specified by the\nadjusted_location of the waypoint, or to walk from a dropoff point to the\nproposed desired_location.",
                    "items": {
                        "$ref": "RouteSummary"
                    },
                    "type": "array"
                },
                "waypoint": {
                    "$ref": "Waypoint",
                    "description": "Contains the adjusted and desired locations for this waypoint in the\nproposed plan."
                },
                "waypointDuration": {
                    "description": "Incremental time it would take for the car to get to this\nwaypoint in the request trip_plan, if the trip were requested\nright now by the same user, and with the same waypoints and\nother trip parameters.  It is assumed that the pickup BOARDING\nstep and intermediate dropoffs would happen instantaneously.",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Pullover": {
            "description": "Progress of vehicle's attempt to find a place to pull over for either pickup\nor dropoff.",
            "id": "Pullover",
            "properties": {
                "latLng": {
                    "$ref": "LatLng",
                    "description": "The pullover spot if available. It will never be set if `stage' is\nSTAGE_UNSPECIFIED, and may or not be empty in other cases, depending\non the nearby roadgraph and other factors onboard."
                },
                "stage": {
                    "description": "The current pullover stage.",
                    "enum": [
                        "STAGE_UNSPECIFIED",
                        "LOOKING",
                        "FOUND",
                        "FINDING_BETTER",
                        "PULLING_IN",
                        "ARRIVED"
                    ],
                    "enumDescriptions": [
                        "Not trying to pull in. May be not close enough to location to try that\nyet.",
                        "The vehicle is looking for an open space to pull in to.",
                        "The vehicle has found a space to pull in to.",
                        "The vehicle is finding a better place to pull in.",
                        "The vehicle is actually pulling in to an acceptable space.",
                        "The vehicle has finished pulling in."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RegisterUserRequest": {
            "id": "RegisterUserRequest",
            "properties": {
                "latLng": {
                    "$ref": "LatLng",
                    "description": "User's location at the time of registration."
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "RegisterUserResponse": {
            "id": "RegisterUserResponse",
            "properties": {
                "accountState": {
                    "enum": [
                        "ACCOUNT_STATE_UNSPECIFIED",
                        "ACTIVE",
                        "DISABLED",
                        "UNREGISTERED",
                        "WAITLISTED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Regular state. User can make trips, etc.",
                        "Disabled. User prevented from doing anything.",
                        "User is not registered for service.",
                        "User is waitlisted for the app, pending further approval."
                    ],
                    "type": "string"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "ALREADY_EXISTS",
                        "REDIRECT_TO_CANARY",
                        "CHILD_ACCOUNT_NOT_ALLOWED"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "'RegisterUser' has already been invoked on this user. To get more\ndetails, call GetAccountStatus.",
                        "This user cannot be registered in this universe. The client should try\nagain in canary.",
                        "This user cannot be registered because they are considered a child\naccount."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RequestCommon": {
            "description": "Common messages for all the requests",
            "id": "RequestCommon",
            "properties": {
                "clientVersion": {
                    "$ref": "ClientVersion"
                },
                "forcedExperimentIds": {
                    "description": "IDs of experiments to force-enable. These must be configured to be\nforceable by attaching taas-specific metadata to the Mendel experiments,\notherwise they will be ignored. See:\ngoogle3/googledata/experiments/chauffeur/trips/experiment_metadata.proto.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "requestId": {
                    "description": "ID generated by the client for each request. This does not have to be\nglobally unique, since it is client generated, but should be easy to\nidentify in logs for a specific user.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResponseCommon": {
            "description": "Common messages for all the responses",
            "id": "ResponseCommon",
            "properties": {
                "requestId": {
                    "description": "ID generated by the client sent in the original request. For each request\nwith a RequestCommon::request_id, this should be its match.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RouteSegment": {
            "description": "This message describing the stages of the route for the trip. This includes\nthe route the vehicle is taking as well as that of the user (eg. walking\ndirections).",
            "id": "RouteSegment",
            "properties": {
                "estimatedDuration": {
                    "description": "Currently only provided for walking directions segments. See\nTripStatus::WaypointStatus for ETAs of vehicle-driven portions.",
                    "format": "google-duration",
                    "type": "string"
                },
                "polyline": {
                    "$ref": "EncodedPolyline",
                    "description": "If the client's GetActiveTripRequest...route_segment_version\nmatches the current version, then the route_segment_version in\nthe response will be set but the encoded_polyline will be empty.\nCorner case: an error on the server side may cause the\nencoded_polyline to be empty if the versions mismatched. In that\ncase, simply provide the updated version in the followup request."
                },
                "pullover": {
                    "$ref": "Pullover",
                    "description": "If the vehicle is pulling over, the current stage and intended location."
                },
                "routeSegmentVersion": {
                    "description": "The version of the route polyline. The route changes over time as\nthe vehicle moves, or as the route is replanned.  May be empty if\nno polyline is available or applicable (e.g. when vehicle is\npulling over). It is annotated as precision\nlocation PII and timestamp since the version may include\nencoded versions of trip waypoints, current user location, and\nvehicle timestamps.",
                    "type": "string"
                },
                "snappedPolyline": {
                    "$ref": "EncodedPolyline",
                    "description": "If polyline is filled in, this is the snapped version to GMM's roadgraph."
                },
                "stage": {
                    "description": "The stage of this segment.",
                    "enum": [
                        "STAGE_UNSPECIFIED",
                        "TO_PREVIOUS_DROPOFF",
                        "TO_PICKUP",
                        "WALK_TO_PICKUP",
                        "PICKUP_TO_DROPOFF",
                        "WALK_FROM_DROPOFF"
                    ],
                    "enumDescriptions": [
                        "Unspecified",
                        "If the assigned vehicle is currently servicing another trip, this is the\ndriving route segment to the dropoff of that previous trip.",
                        "Vehicle driving route segment to the pickup point.",
                        "Passenger walking directions from their last known location to the\nadjusted pickup point.",
                        "Vehicle driving route segment from passenger pickup to dropoff.",
                        "Passenger walking directions from the adjusted dropoff."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RouteSummary": {
            "id": "RouteSummary",
            "properties": {
                "distanceM": {
                    "description": "in meters.",
                    "format": "int32",
                    "type": "integer"
                },
                "encodedPolyline": {
                    "$ref": "EncodedPolyline"
                },
                "responseStatus": {
                    "enum": [
                        "UNSPECIFIED",
                        "ROUTE_FOUND",
                        "BAD_START_COORDINATES",
                        "BAD_END_COORDINATES",
                        "NO_ROUTE",
                        "UNSPECIFIED_ERROR"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "walkingDuration": {
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RouteVersion": {
            "description": "Key of a route segment.",
            "id": "RouteVersion",
            "properties": {
                "routeSegmentVersion": {
                    "description": "Version of the route segment. It is annotated as precision\nlocation PII and timestamp since the version may include\nencoded versions of trip waypoints, current user location, and\nvehicle timestamps.",
                    "type": "string"
                },
                "stage": {
                    "description": "Route stage of the trip.",
                    "enum": [
                        "STAGE_UNSPECIFIED",
                        "TO_PREVIOUS_DROPOFF",
                        "TO_PICKUP",
                        "WALK_TO_PICKUP",
                        "PICKUP_TO_DROPOFF",
                        "WALK_FROM_DROPOFF"
                    ],
                    "enumDescriptions": [
                        "Unspecified",
                        "If the assigned vehicle is currently servicing another trip, this is the\ndriving route segment to the dropoff of that previous trip.",
                        "Vehicle driving route segment to the pickup point.",
                        "Passenger walking directions from their last known location to the\nadjusted pickup point.",
                        "Vehicle driving route segment from passenger pickup to dropoff.",
                        "Passenger walking directions from the adjusted dropoff."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SaveRunletRequest": {
            "id": "SaveRunletRequest",
            "properties": {
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "requestOrigin": {
                    "enum": [
                        "REQUEST_ORIGIN_UNSPECIFIED",
                        "DSAM",
                        "USAM"
                    ],
                    "enumDescriptions": [
                        "",
                        "Submitted via the Dsam UI by an ops driver or concierge.",
                        "Submitted via the Usam UI."
                    ],
                    "type": "string"
                },
                "samScale": {
                    "enum": [
                        "SAM_UNSPECIFIED",
                        "L1",
                        "L2",
                        "L3",
                        "L4"
                    ],
                    "enumDescriptions": [
                        "",
                        "Level to describe discomfort: \"odd\", \"timid\"",
                        "Level to describe discomfort: \"confused\", \"disturbed\"",
                        "Level to describe discomfort: \"humiliated\", \"stressed\"",
                        "Level to describe discomfort: \"nightmare\", \"terrified\""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SaveRunletResponse": {
            "id": "SaveRunletResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "NO_VEHICLE_FOR_USER"
                    ],
                    "enumDescriptions": [
                        "",
                        "RPC was successfully sent. This doesn't imply the car saved the runlet,\njust that offboard accepted the request.",
                        "The current user does not have a vehicle paired with them."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SendCarActionRequest": {
            "id": "SendCarActionRequest",
            "properties": {
                "button": {
                    "enum": [
                        "BUTTON_UNSPECIFIED",
                        "PULLOVER",
                        "START_RIDE",
                        "SKIP_BLE_AUTHENTICATION",
                        "WAYFINDING_ACTION",
                        "SKIP_AUTH_AND_OPEN_DOOR"
                    ],
                    "enumDescriptions": [
                        "",
                        "Triggers a pullover (ex. PULLOVER_SOON).",
                        "Starts the ride if the car is in the correct states.",
                        "Skips BLE authentication, unlocks the doors, and advances the onboard\nstate machine if auth has not occurred yet, and the car is in the correct\nstate (stopped at the pickup location.)",
                        "Triggers the car to perform the wayfinding action to help locate the car.",
                        "Unlocks the doors and then auto-opens the door (last door that failed to\nopen on this trip).  Note that this will cancel the no-show timer, and\nprevent the car from looping around the block (because the door is now\nopen)."
                    ],
                    "type": "string"
                },
                "deadline": {
                    "description": "If deadline is not set, the server will use a reasonable default.\nThis is an absolute timestamp, so current time + delay.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "SendCarActionResponse": {
            "id": "SendCarActionResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "BAD_REQUEST",
                        "NO_ACTIVE_TRIP",
                        "WRONG_TRIP_STATE",
                        "CAR_RESPONSE_DEADLINE_EXCEEDED",
                        "CAR_REJECTED",
                        "UNKNOWN_SERVER_ERROR"
                    ],
                    "enumDescriptions": [
                        "",
                        "Vehicle received, accepted and executed.",
                        "Bad request. e.g. invalid button() or deadline().",
                        "No trip active.",
                        "A trip is active, but the server rejected the request because the\ntrip is not in a suitable state for this action. I.e. the assigned\nvehicle is busy with another trip.",
                        "Server sent request to car but could not confirm that the car\nreceived, though it may have.",
                        "Car rejected request. car_rejected_reason will contain details.",
                        "Unknown internal error on server. Should never happen. Try again."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SendLocationDataRequest": {
            "id": "SendLocationDataRequest",
            "properties": {
                "accuracyMetersE1": {
                    "description": "Lat/Lng accuracy of this fix in meters\nWe define accuracy as the radius of 68% confidence. In other words, if you\ndraw a circle centered at this location's latitude and longitude, and with\na radius equal to the accuracy, then there is a 68% probability that the\ntrue location is inside the circle.\nIn statistical terms, it is assumed that location errors are random with a\nnormal distribution, so the 68% confidence circle represents one standard\ndeviation. Note that in practice, location errors do not always follow such\na simple distribution.",
                    "format": "int32",
                    "type": "integer"
                },
                "altitudeMetersE2": {
                    "description": "Altitude in meters above the WGS 84 reference ellipsoid.",
                    "format": "int32",
                    "type": "integer"
                },
                "blePacketTime": {
                    "description": "Time when the phone last received a BLE packet from the car.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "detail": {
                    "description": "List of current details about location and BLE (Bluetooth Low Energy).",
                    "enumDescriptions": [
                        "",
                        "Android system setting - location is disabled.",
                        "Android per-app setting.",
                        "BLE is not supported.",
                        "BLE has been disabled.",
                        "App failed to start scanner.",
                        "App is scanning but doesn't currently see any boards.",
                        "At least one board is seen (and the app is attempting to connect).",
                        "At least one board is connected - this is onboard's copy of what the\nphone is reporting (and is expected to lag the report from the UXC's\nBLE board(s)).",
                        "All active connection are failing.",
                        "Connection succeeded to exchange auth token."
                    ],
                    "items": {
                        "enum": [
                            "UNKNOWN",
                            "LOCATION_SERVICE_OFF",
                            "LOCATION_SERVICE_NO_PERMISSION",
                            "BLE_SERVICE_UNSUPPORTED",
                            "BLE_SERVICE_OFF",
                            "BLE_SCAN_FAILURE",
                            "BLE_SCANNING",
                            "BLE_CONNECTING",
                            "BLE_CONNECTED",
                            "BLE_CONNECTION_FAILURE",
                            "BLE_AUTHENTICATED"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "position": {
                    "$ref": "LatLng"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "time": {
                    "description": "Time of this fix from phone app.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SendLocationDataResponse": {
            "id": "SendLocationDataResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "UNSPECIFIED",
                        "OK",
                        "NO_ACTIVE_TRIP",
                        "WRONG_TRIP_STATE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ServiceAreaDescription": {
            "description": "A description of a service area displayed in the app.",
            "id": "ServiceAreaDescription",
            "properties": {
                "name": {
                    "type": "string"
                },
                "polygon": {
                    "$ref": "Polygon"
                }
            },
            "type": "object"
        },
        "SideOfStreetDetails": {
            "id": "SideOfStreetDetails",
            "properties": {
                "etaSavingsForCurrentSegment": {
                    "description": "Eta savings for current segment from this user interaction request.",
                    "format": "google-duration",
                    "type": "string"
                },
                "overallEtaSavings": {
                    "description": "Overall eta savings from this user interaction request.",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StartPhoneNumberVerificationRequest": {
            "id": "StartPhoneNumberVerificationRequest",
            "properties": {
                "androidSignatureHash": {
                    "description": "Provided by Android clients to allow for automatic verification. This will\nbe attached to the verification SMS.",
                    "type": "string"
                },
                "phoneNumber": {
                    "description": "Phone number to be verified (in E.164 format, ie +14081234567).\nThe request will fail if the phone number is not formatted correctly.",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "verificationMethod": {
                    "enum": [
                        "METHOD_UNSPECIFIED",
                        "SMS",
                        "PHONE_CALL"
                    ],
                    "enumDescriptions": [
                        "Not specifying the verification method lets the backend select the\ndefault.",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StartPhoneNumberVerificationResponse": {
            "id": "StartPhoneNumberVerificationResponse",
            "properties": {
                "deliveryFeedback": {
                    "enum": [
                        "FEEDBACK_UNSPECIFIED",
                        "NO_FEEDBACK",
                        "SMS_BETTER_THAN_VOICE",
                        "VOICE_BETTER_THAN_SMS",
                        "SMS_AND_VOICE_BAD"
                    ],
                    "enumDescriptions": [
                        "",
                        "Everything is fine, or there is not enough data about this\ncarrier to say.",
                        "A voice call was placed, but if it is not received, the user may\nhave better luck trying again with an SMS.",
                        "SMS was sent, but if it is not received, the user may have better\nluck trying a voice call.",
                        "Everything is terrible. Ask the user to wait 15 minutes and try again."
                    ],
                    "type": "string"
                },
                "requestId": {
                    "description": "Globally unique request identifier that must be returned in\nFinishPhoneNumberVerification.",
                    "type": "string"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "sessionData": {
                    "description": "This must be returned in the FinishPhoneNumberVerification() call.",
                    "format": "byte",
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "INVALID_PHONE_NUMBER",
                        "OVER_ABUSE_THRESHOLD",
                        "UNKNOWN_FAILURE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Request succeded. Move on to the Finish call.",
                        "Invalid phone number.",
                        "Phone number has gone over the abuse threshold. Wait an hour to\ntry again.",
                        "Unknown error. See server logs."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Status": {
            "description": "Current status of the pending trip request.",
            "id": "Status",
            "properties": {
                "failureDetail": {
                    "$ref": "FailureDetail",
                    "description": "If the system failed to fulfill the client's request, the details about\nthe failure."
                },
                "state": {
                    "description": "The state of the client's pending trip request.",
                    "enum": [
                        "STATE_UNSPECIFIED",
                        "OK",
                        "PENDING",
                        "FAILURE",
                        "FAILURE_ACKNOWLEDGED"
                    ],
                    "enumDescriptions": [
                        "Unspecified state.",
                        "The request has been accepted by the server and the car.",
                        "The request was sent and received by the server. But we are either\nwaiting for the car or the scheduler to accept it.",
                        "The request was rejected by the car or the scheduler.",
                        "The failure was already acknowledged by the client."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TickleMessage": {
            "description": "This message contains information for a tickle.\nOnce read the client needs to mark the tickle as read by calling the server\nwith the id of the tickle that need to be marked as read.",
            "id": "TickleMessage",
            "properties": {
                "appUpgradeAvailableTickle": {
                    "$ref": "AppUpgradeAvailableTickle",
                    "description": "New version of app available."
                },
                "authChangeTickle": {
                    "$ref": "AuthChangeTickle",
                    "description": "Auth information changed. No extra payload. Phone must request\nfresh TripStatus with necessary keys and MAC addresses."
                },
                "customTickle": {
                    "$ref": "CustomTickle",
                    "description": "Ad-hoc custom event - server provides a one-off message to show the user."
                },
                "expirationTime": {
                    "description": "The time at which this tickle expires and should be hidden by the client\nand acknowledged.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "feedbackRequestedTickle": {
                    "$ref": "FeedbackRequestedTickle",
                    "description": "Notification for requesting feedback once the trip finishes. Note that\nthis will only be sent for inactive trips so we don't expect this to\nbe returned as a tickle to be acknowledged ever."
                },
                "lockedDoorOpenAttemptTickle": {
                    "$ref": "LockedDoorOpenAttemptTickle",
                    "description": "A user tried to open a door while it was still locked during pickup."
                },
                "noShowWarningTickle": {
                    "$ref": "NoShowWarningTickle",
                    "description": "Warning that the car will soon depart the pickup location if no one\narrives and boards."
                },
                "pickupEtaTickle": {
                    "$ref": "PickupEtaTickle",
                    "description": "Estimated time of arrival to pickup point. Fill pickup_eta_time\nfield with the details."
                },
                "tickleId": {
                    "description": "The globally unique id of this tickle.",
                    "type": "string"
                },
                "time": {
                    "description": "The timestamp of when the tickle was issued.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "tripStateChangeTickle": {
                    "$ref": "TripStateChangeTickle",
                    "description": "Trip status changed. Details in new_trip_state."
                },
                "unreachableDestinationTickle": {
                    "$ref": "UnreachableDestinationTickle",
                    "description": "Destination changed because the previous one was unreachable."
                },
                "userInteractionChangeTickle": {
                    "$ref": "UserInteractionChangeTickle",
                    "description": "A change to an acknowledged user interaction"
                },
                "userInteractionTickle": {
                    "$ref": "UserInteractionTickle",
                    "description": "New / Unacknowledged user interaction available"
                },
                "vehicleChangeTickle": {
                    "$ref": "VehicleChangeTickle",
                    "description": "Vehicle assignment has changed."
                }
            },
            "type": "object"
        },
        "TimeOfDay": {
            "description": "Represents a time of day. The date and time zone are either not significant\nor are specified elsewhere. An API may choose to allow leap seconds. Related\ntypes are google.type.Date and `google.protobuf.Timestamp`.",
            "id": "TimeOfDay",
            "properties": {
                "hours": {
                    "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose\nto allow the value \"24:00:00\" for scenarios like business closing time.",
                    "format": "int32",
                    "type": "integer"
                },
                "minutes": {
                    "description": "Minutes of hour of day. Must be from 0 to 59.",
                    "format": "int32",
                    "type": "integer"
                },
                "nanos": {
                    "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
                    "format": "int32",
                    "type": "integer"
                },
                "seconds": {
                    "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may\nallow the value 60 if it allows leap-seconds.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "TripFeedback": {
            "id": "TripFeedback",
            "properties": {
                "cancelFeedback": {
                    "$ref": "CancelFeedback"
                },
                "clientVersion": {
                    "$ref": "ClientVersion",
                    "description": "Version of the app used to insert this feedback. Useful because\ndifferent app versions may present different feedback options."
                },
                "inRideFeedback": {
                    "$ref": "InRideFeedback"
                },
                "postTripFeedback": {
                    "$ref": "PostTripFeedback"
                },
                "preRideFeedback": {
                    "$ref": "PreRideFeedback"
                },
                "tripId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TripPlanParameters": {
            "description": "Parameters for a trip. Currently the only supported parameter\nis the number of passengers, but eventually this may include\nother required features of the vehicle, like eg. accessibility,\npet-friendly, etc.",
            "id": "TripPlanParameters",
            "properties": {
                "fleet": {
                    "description": "The meaning of \"fleet\" will evolve over time. Consumer users will\nessentially be able only to specify a preferred \"vehicle type\" via the\nfleet field, while internal users will be able to specify the scheduler\nfleet as they do now.",
                    "type": "string"
                },
                "internalParameters": {
                    "$ref": "InternalTripParameters",
                    "description": "Internal parameters for the requested trip."
                },
                "numPassengers": {
                    "description": "The number of passengers for this trip plan.",
                    "format": "int32",
                    "type": "integer"
                },
                "partnerTripParameters": {
                    "$ref": "PartnerTripParameters",
                    "description": "Information that's only meaningful for trips ordered through the Partner\nTrip API, i.e., created at a request of a partner ride-sharing company\nfor their end user.\n\nThe phone apps used by direct customers of Waymo TaaS should leave this\nempty."
                }
            },
            "type": "object"
        },
        "TripPlanProposal": {
            "description": "A way to serve a proposed trip plan, with the fare, times it takes for the\nvehicle to get to each waypoint in the plan, and additional information the\nuser needs about each waypoint, like the pullover location and the walking\ndirections to to the pullover.",
            "id": "TripPlanProposal",
            "properties": {
                "billingData": {
                    "$ref": "ClientBillingData",
                    "description": "Fare information for the pending trip plan, with FareStatus of ESTIMATE."
                },
                "proposalToken": {
                    "description": "The proposal token that corresponds to this prospective trip plan. This\nmust be\u00a0sent by the client in subsequent requests to refine the trip plan\nor request the trip.",
                    "type": "string"
                },
                "proposedWaypoints": {
                    "description": "Server will guarantee to return the same number of waypoins passed in, even\nif some of them may be outside of service area and we cannot provide an\nadjusted location.",
                    "items": {
                        "$ref": "ProposedWaypoint"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TripStateChangeTickle": {
            "description": "A tickle informing the client that the TripStatus.state of the active trip\nhas changed.",
            "id": "TripStateChangeTickle",
            "properties": {
                "licensePlate": {
                    "description": "License plate of the vehicle.",
                    "type": "string"
                },
                "newTripState": {
                    "description": "The new TripStatus.state of the state change.",
                    "enum": [
                        "STATE_UNSPECIFIED",
                        "REQUESTED",
                        "INFEASIBLE",
                        "QUEUED",
                        "TO_PICKUP",
                        "PICKUP_MOVE_ALONG",
                        "PICKUP_NEED_AUTH",
                        "AT_PICKUP",
                        "NO_SHOW",
                        "PICKUP_HAVE_AUTH",
                        "BOARDING",
                        "RIDING",
                        "STOP_DROPOFF",
                        "FINAL_DROPOFF",
                        "CANCEL_REQUESTED",
                        "STRANDED",
                        "COMPLETED",
                        "CANCELLED"
                    ],
                    "enumDescriptions": [
                        "Unspecified trip state.",
                        "The trip was accepted by the server, and is waiting to be assigned\nto a vehicle.",
                        "The trip was accepted by the server but later rejected by the server.",
                        "The trip was accepted by the server. A car has been selected but it is\ncurrently serving another trip.",
                        "The car is on its way to pick up the user.",
                        "The car had already reached pickup, but needed to \"move along\", and is in\nthe process of circling the block or otherwise reparking.",
                        "The car is at pickup and is waiting for authentication.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The car is at pickup, waiting for the user.",
                        "The passenger did not arrive at the pickup location.",
                        "The car is at pickup and is authenticated.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The user has opened the door and is boarding the car.",
                        "The car is riding with a user on board.",
                        "The car arrived at a stop dropoff.",
                        "The car arrived at the final dropoff.",
                        "A trip cancelation was requested.\nDEPRECATED in favor of TripStatus#is_cancel_requested.",
                        "The car cannot complete the trip, and the user is stranded. This can\nhappen either pre- or post- pickup.",
                        "The trip has completed.",
                        "The trip is canceled."
                    ],
                    "type": "string"
                },
                "tripId": {
                    "description": "ID of the active trip.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TripStatus": {
            "description": "Overall state of the trip.",
            "id": "TripStatus",
            "properties": {
                "cancelDetails": {
                    "$ref": "CancelDetails",
                    "description": "This field is populated iff 'state' is CANCELLED. It includes more\ncontext into why a trip was cancelled so that the App can provide a\nmeaningful message to the user (e.g. \"Your trip was cancelled because no\nvehicles were available to serve your request.\")."
                },
                "cancelRequestStatus": {
                    "enum": [
                        "CANCEL_REQUEST_STATUS_UNSPECIFIED",
                        "CANCEL_NOT_CURRENTLY_ALLOWED",
                        "CANCEL_REQUEST_ALLOWED",
                        "CANCEL_ALREADY_REQUESTED"
                    ],
                    "enumDescriptions": [
                        "",
                        "In the current state we cannot allow cancellations.",
                        "Cancellation requests are permitted.",
                        "A cancellation has already been requested."
                    ],
                    "type": "string"
                },
                "isCancelRequested": {
                    "description": "When true, the trip is being cancelled by the user, scheduler, or live\nhelp. This boolean can be set in any trip state and thus is not a TripState\nitself.",
                    "type": "boolean"
                },
                "noShowDepartureTime": {
                    "description": "If the car is waiting for a passenger, it will leave due to no-show at this\ntime.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "state": {
                    "description": "The current state.",
                    "enum": [
                        "STATE_UNSPECIFIED",
                        "REQUESTED",
                        "INFEASIBLE",
                        "QUEUED",
                        "TO_PICKUP",
                        "PICKUP_MOVE_ALONG",
                        "PICKUP_NEED_AUTH",
                        "AT_PICKUP",
                        "NO_SHOW",
                        "PICKUP_HAVE_AUTH",
                        "BOARDING",
                        "RIDING",
                        "STOP_DROPOFF",
                        "FINAL_DROPOFF",
                        "CANCEL_REQUESTED",
                        "STRANDED",
                        "COMPLETED",
                        "CANCELLED"
                    ],
                    "enumDescriptions": [
                        "Unspecified trip state.",
                        "The trip was accepted by the server, and is waiting to be assigned\nto a vehicle.",
                        "The trip was accepted by the server but later rejected by the server.",
                        "The trip was accepted by the server. A car has been selected but it is\ncurrently serving another trip.",
                        "The car is on its way to pick up the user.",
                        "The car had already reached pickup, but needed to \"move along\", and is in\nthe process of circling the block or otherwise reparking.",
                        "The car is at pickup and is waiting for authentication.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The car is at pickup, waiting for the user.",
                        "The passenger did not arrive at the pickup location.",
                        "The car is at pickup and is authenticated.\nDEPRECATED in favor of Vehicle#auth_state.",
                        "The user has opened the door and is boarding the car.",
                        "The car is riding with a user on board.",
                        "The car arrived at a stop dropoff.",
                        "The car arrived at the final dropoff.",
                        "A trip cancelation was requested.\nDEPRECATED in favor of TripStatus#is_cancel_requested.",
                        "The car cannot complete the trip, and the user is stranded. This can\nhappen either pre- or post- pickup.",
                        "The trip has completed.",
                        "The trip is canceled."
                    ],
                    "type": "string"
                },
                "stateChangeTime": {
                    "description": "The last time the state changed.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "taasProvider": {
                    "description": "The taas provider for the current trip.",
                    "enum": [
                        "UNSPECIFIED",
                        "WAYMO",
                        "POODLE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Regular Waymo trips.",
                        "Trips provided by Poodle."
                    ],
                    "type": "string"
                },
                "userInteraction": {
                    "$ref": "UserInteraction",
                    "description": "Event requiring user interaction."
                },
                "waypointStatus": {
                    "items": {
                        "$ref": "WaypointStatus"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnreachableDestinationDetails": {
            "id": "UnreachableDestinationDetails",
            "properties": {
                "alternativeDestinations": {
                    "description": "Alternative destinations present if:\nUserInteractionType == UNREACHABLE_DESTINATION.\nPrimary suggested alternate location is not present in the list.",
                    "items": {
                        "$ref": "AlternativeLocation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnreachableDestinationTickle": {
            "description": "A tickle indicating that a waypoint in the plan changed because the previous\none was unreachable.",
            "id": "UnreachableDestinationTickle",
            "properties": {
                "affectedLocation": {
                    "description": "The action at the modified destination.",
                    "enum": [
                        "LOCATION_ACTION_UNSPECIFIED",
                        "ACTION_PICKUP",
                        "ACTION_DROPOFF",
                        "ACTION_MIDDLE_STOP",
                        "ACTION_ROUTE_THROUGH",
                        "ACTION_PARK"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "newDestination": {
                    "$ref": "LatLng",
                    "description": "The new destination the vehicle is traveling to."
                },
                "previousDestination": {
                    "$ref": "LatLng",
                    "description": "The previous destination that was unreachable."
                },
                "tripId": {
                    "description": "ID of the active trip.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateActiveTripPaymentMethodRequest": {
            "description": "Request to modify the payment method to charge for the active trip.",
            "id": "UpdateActiveTripPaymentMethodRequest",
            "properties": {
                "paymentMethodId": {
                    "description": "The payment method that should be used to pay for the active trip.",
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "UpdateActiveTripPaymentMethodResponse": {
            "id": "UpdateActiveTripPaymentMethodResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "INVALID_PAYMENT_METHOD_ID",
                        "INVALID_TRIP_ID"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "Indicates that the provided trip ID does not exist."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateActiveTripRequest": {
            "description": "Request to modify the currently active trip, e.g. change the\ndesired dropoff point. It is not correct to request a modification\nwhile another modification (including trip creation or cancellation) is\npending, i.e., waiting for the response from the car. (This can be found out\nby calling GetActiveTrip.)",
            "id": "UpdateActiveTripRequest",
            "properties": {
                "planUpdate": {
                    "$ref": "ClientTripPlan",
                    "description": "The proposed updated plan. plan_update.plan_version must be equal\nthe most recent one seen in a response to GetActiveTrip, or any\nmodifications call as they all return the ClientTrip, otherwise\nthe request will be ignored as stale. (Note that the response in general\ncontains two plan versions: for the current accepted plan, and for\nthe pending plan. If ClientTrip.pending_trip_plan is really not pending\nbut unacknowledged, then both ClientTrip.client_trip_plan\nand ClientTrip.pending_trip_plan should have the same version.\nThe client shouldn't call UpdateActiveTrip when the latter is really\npending; should instead wait for the pending update to be accepted or\nrejected by the car. An exception is when the trip is queued behind\nanother trip; then it may take a long time for the trip plan\nto be accepted by the car, and in such case we allow the client to\nmodify a pending plan. In this case, the pending plan version should\nbe used.)"
                },
                "polylinePrecision": {
                    "description": "Returned polylines will be E5 precision if unspecified.\nServer may return polylines at a precision other than the one requested.",
                    "enum": [
                        "UNSPECIFIED",
                        "E5",
                        "E6",
                        "E7"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "tripProposalToken": {
                    "description": "Token for the updated trip proposal. Client should use ProposeTripPlan to\nobtain this prior calling UpdateActiveTrip. When this is set, the trip\nupdate and trip_id will be retrieved from the proposal and the trip_id and\nplan_update fields above will be ignored.",
                    "type": "string"
                },
                "walkingDirectionsOrigin": {
                    "$ref": "LatLng",
                    "description": "Location for start of walking directions. This is applicable for filling\nin the RouteSegment.Stage.WALK_TO_PICKUP"
                }
            },
            "type": "object"
        },
        "UpdateActiveTripResponse": {
            "description": "Response to a request to modify the active trip.",
            "id": "UpdateActiveTripResponse",
            "properties": {
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "description": "All status values other than OK mean the request had no effect.",
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "ALREADY_PENDING",
                        "STALE_VERSION",
                        "PROPOSAL_EXPIRED",
                        "NO_EFFECTIVE_CHANGE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Client attempted to modify a trip while some other update (possibly\na cancellation) was still not accepted.",
                        "Trip plan version in the update does not match current version.\nAlso returned if the client attempted to modify a trip which is not\nthe active trip (either because there is no active trip, or some other\ntrip is active.)",
                        "The proposal used for this update has expired and can no longer be used\nto update this trip. Client is expected to re-create a new proposal using\nthe ProposeTripPlan API.",
                        "The proposed update has no effective change. No changes will be applied."
                    ],
                    "type": "string"
                },
                "trip": {
                    "$ref": "ClientTrip",
                    "description": "Updated details of the active trip, including details of the pending\nchange. If the update was rejected, contains the current active trip as\nwould be returned from GetActiveTrip()."
                }
            },
            "type": "object"
        },
        "UpdateFavoriteLocationRequest": {
            "id": "UpdateFavoriteLocationRequest",
            "properties": {
                "desiredLocation": {
                    "$ref": "Location",
                    "description": "Updated details for favorite."
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "UpdateFavoriteLocationResponse": {
            "id": "UpdateFavoriteLocationResponse",
            "properties": {
                "location": {
                    "$ref": "HistoricalLocation",
                    "description": "Updated favorite."
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "updateMask": {
                    "description": "TODO(mmcnaugh) Respect req->update_mask(). Currently ignored.",
                    "format": "google-fieldmask",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdatePaymentMethodRequest": {
            "id": "UpdatePaymentMethodRequest",
            "properties": {
                "cardholderInfo": {
                    "$ref": "CardholderInfo",
                    "description": "Cardholder information for the payment method for screening purposes."
                },
                "id": {
                    "description": "Identifies the payment method to make updates to.",
                    "type": "string"
                },
                "nonce": {
                    "description": "The nonce containing the updates to payment information that was submitted\nby the client. Required when making changes to the PCI data (managed and\nstored by Braintree), but not when only changing card metadata (e.g. card\nnickname).\n\nThink of this nonce as a register that stores some \"edits\" to a payment\nmethod, and the edits are applied by Braintree when the update request is\nmade.",
                    "type": "string"
                },
                "paymentMethod": {
                    "$ref": "ClientPaymentMethod",
                    "description": "Most of the information passed down by the client here is only for\nvalidation purposes (e.g. verifying a supported scheme). Any payment state\nstate that is written is based on the Braintree response.\n\nThe only field that's used for updating state for this payment method is\nthe embedded 'PaymentMethodProperty'. This property will overwrite any\nexisting stored PaymentMethodProperty associated with the payment method."
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "UpdatePaymentMethodResponse": {
            "id": "UpdatePaymentMethodResponse",
            "properties": {
                "paymentMethod": {
                    "$ref": "ClientPaymentMethod"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK",
                        "FAILED_INTERNAL_REASON",
                        "PROCESSOR_DECLINED",
                        "GATEWAY_REJECTED_FAILED_TO_VERIFY_ADDRESS",
                        "GATEWAY_REJECTED_FAILED_TO_VERIFY_CVV",
                        "GATEWAY_REJECTED_FAILED_TO_VERIFY_CVV_AND_AVS",
                        "GATEWAY_REJECTED_GENERIC"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Payment method was not updated due to an internal reason.",
                        "The processor (Visa/MC) rejected the card.",
                        "The Payment Gateway (braintree) was unable to validate the address.",
                        "The Payment Gateway (braintree) did not like the CVV (3 digit code on the\nback of the card)",
                        "The Payment Gateway (braintree) did not like the CVV AND couldn't\nvalidate the address",
                        "The Payment Gateway (braintree) rejected the card for a reason not\nenumerated above"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateUserPreferencesRequest": {
            "id": "UpdateUserPreferencesRequest",
            "properties": {
                "preferences": {
                    "$ref": "ClientUserPreferences"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                },
                "updateMask": {
                    "description": "Will update and store any settings and permissions that are explicitly\nspecified in the field mask. If a field is not explicitly specified here,\nno changes will be performed to that preference.\n\nE.g. \"settings.accessibility_settings.wheelchair_service\",\n     \"permissions.gaia\"",
                    "format": "google-fieldmask",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateUserPreferencesResponse": {
            "id": "UpdateUserPreferencesResponse",
            "properties": {
                "preferences": {
                    "$ref": "ClientUserPreferences",
                    "description": "The latest snapshot of preferences."
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        "OK"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UploadLogsRequest": {
            "id": "UploadLogsRequest",
            "properties": {
                "entry": {
                    "items": {
                        "$ref": "PhoneLog"
                    },
                    "type": "array"
                },
                "requestCommon": {
                    "$ref": "RequestCommon",
                    "description": "Common fields for all requests."
                }
            },
            "type": "object"
        },
        "UploadLogsResponse": {
            "id": "UploadLogsResponse",
            "properties": {
                "genericFailureReason": {
                    "type": "string"
                },
                "numEntriesWritten": {
                    "description": "Number of entries written.",
                    "format": "int32",
                    "type": "integer"
                },
                "responseCommon": {
                    "$ref": "ResponseCommon",
                    "description": "Common fields for all responses."
                },
                "status": {
                    "enum": [
                        "UNSPECIFIED",
                        "OK",
                        "GENERIC_FAILURE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Any errors are likely due to a bug in the app. Log the failure_reason\nfor debugging but don't show it to the user.\nPossible errors:\n- log entries not all for the same account.\n- timestamp missing from a log entry.\n- account email messing from a log entry.\n- requestor not permitted to upload logs for the account."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserInteraction": {
            "description": "Represents a user interaction event pending user response (unacknowledged\naka unseen by the user).",
            "id": "UserInteraction",
            "properties": {
                "defaultBehavior": {
                    "description": "Default behavior of car in this user interaction.",
                    "enum": [
                        "DEFAULT_BEHAVIOR_UNSPECIFIED",
                        "HEAD_TOWARDS_ORIGINAL_DESTINATION",
                        "HEAD_TOWARDS_PRIMARY_ALTERNATIVE_DESTINATION"
                    ],
                    "enumDescriptions": [
                        "",
                        "The default behavior of the car for this user interaction is to head\ntowards the original destination.",
                        "The default behavior of the car for this user interaction is to head\ntowards a different (chosen by car) destination."
                    ],
                    "type": "string"
                },
                "expirationTime": {
                    "description": "Time (UTC epoch) when this interaction is no longer valid.\nPopulated only for a subset of user interaction events.\nIf the car hasn't received a UserInteractionConfirmationRequest by this\ntime, it will use the default behavior specified above and implicitly\nacknowledge the user interaction as well as send a tickle\nregarding the change if a decision hasn't been received by this timestamp.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "noShowWarningDetails": {
                    "$ref": "NoShowWarningDetails"
                },
                "originalDestination": {
                    "$ref": "Location",
                    "description": "Original destination that this user interaction is pertaining to.\nThis destination is what the car sends as the original destination.\nIt may differ slightly from the original destination in the trip plan."
                },
                "primaryAlternativeDestination": {
                    "$ref": "AlternativeLocation",
                    "description": "Primary suggested destination from car."
                },
                "requestType": {
                    "description": "Type of user interaction request i.e. decision / information.",
                    "enum": [
                        "REQUEST_TYPE_UNSPECIFIED",
                        "INFORMATION_ONLY",
                        "DECISION_REQUESTED"
                    ],
                    "enumDescriptions": [
                        "",
                        "This is a one-way information-only notification.",
                        "The car desires input from the user."
                    ],
                    "type": "string"
                },
                "segmentIndex": {
                    "description": "Index of segment this user interaction event is for. Zero is pickup, and\nany non-zero value is another stop that the client should be aware of.\nNote that zero is the default so this must be filled in, otherwise the\nclient will assume this is for pickup.",
                    "format": "uint32",
                    "type": "integer"
                },
                "sideOfStreetDetails": {
                    "$ref": "SideOfStreetDetails"
                },
                "type": {
                    "description": "Type of user interaction i.e. side of street / unreachable destination.",
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "SIDE_OF_STREET",
                        "UNREACHABLE_DESTINATION",
                        "NO_SHOW_WARNING"
                    ],
                    "enumDescriptions": [
                        "",
                        "User interaction event impacts the destination's side of street.",
                        "User interaction event notifies destination is unreachable.",
                        "User interaction event notifies that the car will soon depart."
                    ],
                    "type": "string"
                },
                "unreachableDestinationDetails": {
                    "$ref": "UnreachableDestinationDetails"
                },
                "userInteractionId": {
                    "description": "UUID for the interaction.",
                    "type": "string"
                },
                "version": {
                    "description": "Current version of the interaction",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserInteractionChangeTickle": {
            "id": "UserInteractionChangeTickle",
            "properties": {
                "displayMessage": {
                    "type": "string"
                },
                "displayTitle": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserInteractionTickle": {
            "id": "UserInteractionTickle",
            "properties": {
                "displayMessage": {
                    "type": "string"
                },
                "displayTitle": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserSetting": {
            "id": "UserSetting",
            "properties": {
                "value": {
                    "enum": [
                        "UNSPECIFIED",
                        "ENABLED",
                        "DISABLED"
                    ],
                    "enumDescriptions": [
                        "The user has not set this setting explicitly.",
                        "The user has explicitly enabled this setting.",
                        "The user has explicitly disabled this setting."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserSettings": {
            "id": "UserSettings",
            "properties": {
                "accessibilitySettings": {
                    "$ref": "AccessibilitySettings"
                },
                "googleCalendar": {
                    "$ref": "UserSetting"
                },
                "googlePlayMusic": {
                    "$ref": "UserSetting"
                },
                "language": {
                    "description": "Customer setting for display language in RFC 3066 identifier format.\nThis has the flexibility to support different language tags\n(e.g., \"en\", \"en-US\", \"zh-Hant\"), but initially we'll only support simple\ntwo character languages.  All customer touch-points (App, ICX, Support)\nshould localize for this language.  In unknown or an unsupported language,\ndefaults to \"en\".  See go/iii for more details.",
                    "type": "string"
                },
                "locationHistory": {
                    "$ref": "UserSetting"
                }
            },
            "type": "object"
        },
        "UserTokens": {
            "description": "Auth tokens for car-side features that make use of user credentials.",
            "id": "UserTokens",
            "properties": {
                "uxcGpmOauthCredential": {
                    "description": "An OAuth access token sufficient for use of GPM from UXC.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Vehicle": {
            "description": "Details about the vehicle scheduled or actually serving the user.",
            "id": "Vehicle",
            "properties": {
                "authState": {
                    "description": "Vehicle's current state of authentication.",
                    "enum": [
                        "AUTH_STATE_UNSPECIFIED",
                        "DISABLED",
                        "NOT_YET_REQUIRED",
                        "WAITING_FOR_AUTH",
                        "AUTHENTICATED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Authentication disabled.",
                        "The vehicle has no interest in authentication in its current state.",
                        "The vehicle requires authentication by the user.",
                        "The vehicle has authenticated the user by which ever means it needs."
                    ],
                    "type": "string"
                },
                "enabledButtons": {
                    "description": "Current set of buttons the vehicle will accept. This is not the full scope\nof the capabilities of the vehicle, only the ones that it won't reject at\nthis time.",
                    "enumDescriptions": [
                        "",
                        "Triggers a pullover (ex. PULLOVER_SOON).",
                        "Starts the ride if the car is in the correct states.",
                        "Skips BLE authentication, unlocks the doors, and advances the onboard\nstate machine if auth has not occurred yet, and the car is in the correct\nstate (stopped at the pickup location.)",
                        "Triggers the car to perform the wayfinding action to help locate the car.",
                        "Unlocks the doors and then auto-opens the door (last door that failed to\nopen on this trip).  Note that this will cancel the no-show timer, and\nprevent the car from looping around the block (because the door is now\nopen)."
                    ],
                    "items": {
                        "enum": [
                            "BUTTON_UNSPECIFIED",
                            "PULLOVER",
                            "START_RIDE",
                            "SKIP_BLE_AUTHENTICATION",
                            "WAYFINDING_ACTION",
                            "SKIP_AUTH_AND_OPEN_DOOR"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "lastReportTime": {
                    "description": "When we last heard from the car.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "licensePlate": {
                    "description": "License plate of the vehicle. May be empty.",
                    "type": "string"
                },
                "maxPassengerCapacity": {
                    "description": "The maximum number of passengers this vehicle can carry. This does not\nchange with state or current vehicle occupancy.",
                    "format": "int32",
                    "type": "integer"
                },
                "monologue": {
                    "$ref": "Monologue"
                },
                "opsDriver": {
                    "$ref": "OpsDriverInfo",
                    "description": "Identifies the ops driver in the vehicle. Expensive to fetch; returned in\nGetActiveTrip responses along with an 'ops_driver_info_token' token that\nshould be passed back in subsequent GetActiveTrip requests, to allow the\nserver to determine whether this field should be populated. The client\nshould cache this OpsDriverInfo for the duration of the trip or until a\nnew value is returned.\nNot populated if EDS."
                },
                "poodleDriver": {
                    "$ref": "PoodleDriver"
                },
                "poodleVehicle": {
                    "$ref": "PoodleVehicle"
                },
                "position": {
                    "$ref": "LatLng",
                    "description": "The current position of the vehicle."
                },
                "routeSegments": {
                    "description": "Route visualization for legs of the trip, including walking directions\n(e.g. walk-to-pickup) and vehicle-driven portions.\nThis field is repeated to\nallow splitting the route into segments: car to previous dropoff,\ndropoff to next pickup etc...  A segment may start from the\ncar's current position, or from the planned start of a segment\nthat is not yet being driven. The \"to-previous-dropoff\" route\nmay be missing until that trip is nearly finished, to maintain\nprivacy.",
                    "items": {
                        "$ref": "RouteSegment"
                    },
                    "type": "array"
                },
                "snappedPosition": {
                    "$ref": "LatLng",
                    "description": "If position is filled in, this is the snapped version to GMM's roadgraph.\nCorresponds with the RouteSegment::snapped_polyline."
                },
                "taasDriverMode": {
                    "description": "Driver mode as it pertains to Taas at car assignment time.",
                    "enum": [
                        "TAAS_DRIVER_MODE_UNSPECIFIED",
                        "POODLE",
                        "WAYMO_DRIVER",
                        "WAYMO_DRIVER_SUP",
                        "EDS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "SUP = Supervised.",
                        ""
                    ],
                    "type": "string"
                },
                "vehicleId": {
                    "description": "Id of the vehicle.",
                    "type": "string"
                },
                "vehicleType": {
                    "description": "VEHICLE_TYPE_UNSPECIFIED may be returned for unannounced vehicle types.",
                    "enum": [
                        "VEHICLE_TYPE_UNSPECIFIED",
                        "V5",
                        "LIBERTY",
                        "POODLE"
                    ],
                    "enumDescriptions": [
                        "VEHICLE_TYPE_UNSPECIFIED may be returned for unannounced vehicle types.",
                        "",
                        "",
                        "Representing all vehicles from Poodle, not a particular type."
                    ],
                    "type": "string"
                },
                "yawE3": {
                    "description": "Just to avoid using double. Choose e3 as we want to use 0.007 radian\nas a threshold for down sampling.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "VehicleChangeTickle": {
            "description": "A tickle informing the user that the vehicle scheduled for pickup has\nchanged.",
            "id": "VehicleChangeTickle",
            "properties": {
                "explanation": {
                    "$ref": "ClientVehicleChangeExplanation",
                    "description": "An explanation for the user about why their vehicle changed."
                },
                "licensePlate": {
                    "description": "License plate of the newly assigned vehicle.",
                    "type": "string"
                },
                "tripId": {
                    "description": "ID of the active trip.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VehicleSegment": {
            "description": "For Reachability segments.",
            "id": "VehicleSegment",
            "properties": {
                "laneIdHash": {
                    "description": "Lane ID hash should be considered as opaque by clients (there is\nno way reverse engineer the actual map feature ID). However,\nwithin a GetReachabilitySegmentsResponse (see below), they can\nbe compared for equality (to determine if two segments are part\nof the same lane or not).",
                    "format": "int64",
                    "type": "string"
                },
                "preferredFeatureIdHash": {
                    "description": "A hash for preferred feature if\npreferred_pullover=true. Different (but spatially close) ReachableSegment-s\ncan have the same hash, if conceptually they are part of the same preferred\nregion. Since this is a hash and not a full identifier, collisions are\npossible (but unlikely). Clients should only attempt to match spatially\nclose features with this hash, instead of using it as a global identifier.",
                    "type": "string"
                },
                "preferredPullover": {
                    "description": "Indicates that at least some part of this segment has been\nmarked as a PREFERRED_PULLOVER region by MOPs.",
                    "type": "boolean"
                },
                "preferredPulloverName": {
                    "description": "Name for preferred pullover spot.",
                    "type": "string"
                },
                "preferredPulloverReason": {
                    "description": "If preferred_pullover=true, contains the reason why the location is\npreferred.",
                    "enum": [
                        "UNSPECIFIED",
                        "GOOD_LOCATION",
                        "CLOSE_TO_ENTRANCE",
                        "UNKNOWN_REASON"
                    ],
                    "enumDescriptions": [
                        "When returned by ProposeTripPlan, this means it's not a preferred\nlocation.",
                        "Good location for car to pull over.",
                        "Close to building entrance.",
                        "Preferred pullover location, but reason unknown."
                    ],
                    "type": "string"
                },
                "segmentEncodedPolyline": {
                    "$ref": "EncodedPolyline"
                },
                "segmentId": {
                    "description": "Segment IDs start at 0 and are consecutive when the only reason the\nsegment changed is because the preferred pullover reason changed or\nwe reached the maximum segment length. Otherwise, we create a 'gap'\nin segment IDs. Clients can use this to draw consecutive segments\ndifferently (eg. completely joined together, or as separate lines).",
                    "format": "int32",
                    "type": "integer"
                },
                "vehicleType": {
                    "enumDescriptions": [
                        "VEHICLE_TYPE_UNSPECIFIED may be returned for unannounced vehicle types.",
                        "",
                        "",
                        "Representing all vehicles from Poodle, not a particular type."
                    ],
                    "items": {
                        "enum": [
                            "VEHICLE_TYPE_UNSPECIFIED",
                            "V5",
                            "LIBERTY",
                            "POODLE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Waypoint": {
            "description": "A waypoint along the trip, this could be a pickup (first waypoint), stop or\ndropoff (last waypoint).",
            "id": "Waypoint",
            "properties": {
                "action": {
                    "description": "The action taken at the waypoint when used in a ClientTripPlan. Client\nmust set this explicitly for each waypoint in the plan.",
                    "enum": [
                        "LOCATION_ACTION_UNSPECIFIED",
                        "ACTION_PICKUP",
                        "ACTION_DROPOFF",
                        "ACTION_MIDDLE_STOP",
                        "ACTION_ROUTE_THROUGH",
                        "ACTION_PARK"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "adjustedLocation": {
                    "$ref": "Location",
                    "description": "A point the system thinks the car can actually reach. The client receives\nthis point from ProposeTripPlan() and must set it in CreateTrip() and\nUpdateActiveTrip(). The Location.id field is not used by client or server.\nIf the client sets this in ProposeTripPlan, offboard will validate it and\nindicate the validation result via per-waypoint status in\nProposeTripPlanResponse."
                },
                "desiredLocation": {
                    "$ref": "Location",
                    "description": "The location the user would like to be picked up/dropped off at.\nUsed by the system to suggest and score alternatives. Walking directions\nwill always be between this and the adjusted_location.\nTODO(mmcnaugh) The client should have the option of providing only\nLocation.id and no other fields."
                },
                "desiredLocationSource": {
                    "description": "Details about where desired location comes from, indicating how the user\nselected this location.  May be set by client when creating or updating a\ntrip plan, and will be returned in GetActiveTrip() calls.\n\n*Not* returned in the ListLocations() API call.",
                    "enum": [
                        "UNSPECIFIED",
                        "GPS",
                        "SEARCH",
                        "MAP_PAN",
                        "POI",
                        "PREFERRED",
                        "FAVORITE"
                    ],
                    "enumDescriptions": [
                        "",
                        "GPS Location.",
                        "Location extracted from search query.",
                        "Location manually changed by panning in client apps.",
                        "Location extracted from point of interest.",
                        "Location extracted from preferred segment.",
                        "Location extracted from a favorite."
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The name of the waypoint (ie: set by the user, or inherited from a search\nor POI). Deprecated in favor of desired_location#name and\nadjusted_location#name.",
                    "type": "string"
                },
                "segmentId": {
                    "description": "A unique ID (within scope of a single trip plan) for the waypoint\nassigned by the client.",
                    "format": "int32",
                    "type": "integer"
                },
                "targetLocation": {
                    "$ref": "LatLng",
                    "description": "When specified, used to determine the adjusted location (using a data\nsource of MAP_PAN)."
                },
                "type": {
                    "description": "The type of the location. Must not be set by client. The point at\ndesired_location::lat_lng is matched by the server against\nfavorites created and manipulated with the *Favorite() API calls,\nand 'type' is set appropriately.",
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "FAVORITE",
                        "RECENT"
                    ],
                    "enumDescriptions": [
                        "Unspecified type.",
                        "A location set as a favorite by the user in the client app.",
                        "A location recently used by the user."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "WaypointStatus": {
            "description": "Represent the time at which the vehicle is predicted to arrive at\neach waypoint in the trip plan. Always has the same number of entries\nas the corresponding number of waypoints in TripPlan.",
            "id": "WaypointStatus",
            "properties": {
                "etaTime": {
                    "description": "May not be present.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "isImmutable": {
                    "description": "True if it is no longer possible that an edit to this waypoint will be\naccepted. Note that this field being false does not guarantee acceptance;\nif the vehicle finishes the segment in a race with an edit, for example,\nthe plan can still be rejected with an ALREADY_COMPLETED failure detail.",
                    "type": "boolean"
                },
                "segmentId": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Car Trip Private API (Canary)",
    "version": "v2alpha",
    "version_module": true
}