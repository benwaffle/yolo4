{
    "basePath": "",
    "baseUrl": "https://test-ytvops-pa.sandbox.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "YouTube TV Ops",
    "description": "An API for manipulating YouTube TV data for for operations.",
    "discoveryVersion": "v1",
    "documentationLink": "http://tv.youtube.com",
    "fullyEncodeReservedExpansion": true,
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "ytvops_pa:v1",
    "kind": "discovery#restDescription",
    "name": "ytvops_pa",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "blackout": {
            "methods": {
                "create": {
                    "description": "Create an OpsBlackout",
                    "flatPath": "v1/blackout:create",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.blackout.create",
                    "parameterOrder": [],
                    "parameters": {
                        "auditDetails.description": {
                            "description": "Human-readable description of audit",
                            "location": "query",
                            "type": "string"
                        },
                        "auditDetails.source": {
                            "description": "Audit source of action",
                            "location": "query",
                            "type": "string"
                        },
                        "forceUseV2Backend": {
                            "description": "override to force using v2",
                            "location": "query",
                            "type": "boolean"
                        }
                    },
                    "path": "v1/blackout:create",
                    "request": {
                        "$ref": "OpsBlackout"
                    },
                    "response": {
                        "$ref": "OpsBlackout"
                    }
                },
                "delete": {
                    "description": "Delete an OpsBlackout",
                    "flatPath": "v1/blackout:delete",
                    "httpMethod": "DELETE",
                    "id": "ytvops_pa.blackout.delete",
                    "parameterOrder": [],
                    "parameters": {
                        "auditDetails.description": {
                            "description": "Human-readable description of audit",
                            "location": "query",
                            "type": "string"
                        },
                        "auditDetails.source": {
                            "description": "Audit source of action",
                            "location": "query",
                            "type": "string"
                        },
                        "name": {
                            "description": "OpsBlackout name to delete",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/blackout:delete",
                    "response": {
                        "$ref": "OpsBlackout"
                    }
                },
                "get": {
                    "description": "Get an OpsBlackout by name",
                    "flatPath": "v1/blackout:get",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.blackout.get",
                    "parameterOrder": [],
                    "parameters": {
                        "name": {
                            "description": "OpsBlackout name to get",
                            "location": "query",
                            "type": "string"
                        },
                        "view": {
                            "description": "View to use when populating blackout object",
                            "enum": [
                                "OPS_BLACKOUT_VIEW_FULL_NO_AUDIT_DEFAULT",
                                "OPS_BLACKOUT_VIEW_FULL_WITH_AUDIT",
                                "OPS_BLACKOUT_VIEW_FULL_WITH_FULL_AUDIT_FOR_EXPORT"
                            ],
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/blackout:get",
                    "response": {
                        "$ref": "OpsBlackout"
                    }
                },
                "list": {
                    "description": "List OpsBlackouts",
                    "flatPath": "v1/blackout:list",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.blackout.list",
                    "parameterOrder": [],
                    "parameters": {
                        "filter.endTime": {
                            "description": "filter by end time",
                            "format": "google-datetime",
                            "location": "query",
                            "type": "string"
                        },
                        "filter.includeDeleted": {
                            "description": "Whether to include deleted blackouts",
                            "location": "query",
                            "type": "boolean"
                        },
                        "filter.primaryTypes": {
                            "description": "filter by primary types",
                            "enum": [
                                "PRIMARY_TYPE_UNKNOWN",
                                "PRIMARY_TYPE_OTT_ALL",
                                "PRIMARY_TYPE_MLB_CHECK_IN",
                                "PRIMARY_TYPE_LOCATION",
                                "PRIMARY_TYPE_DEVICE",
                                "PRIMARY_TYPE_OVERRIDE",
                                "PRIMARY_TYPE_STATION_OUTAGE"
                            ],
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "filter.sourceTypes": {
                            "description": "filter by source types",
                            "enum": [
                                "SOURCE_UNKNOWN",
                                "SOURCE_MANUAL",
                                "SOURCE_RULE_SYSTEM",
                                "SOURCE_AUTOMATIC"
                            ],
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "filter.startTime": {
                            "description": "filter by start time",
                            "format": "google-datetime",
                            "location": "query",
                            "type": "string"
                        },
                        "filter.stationIds": {
                            "description": "filter by station ids",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "filter.view": {
                            "description": "View to use when populating blackout objects",
                            "enum": [
                                "OPS_BLACKOUT_VIEW_FULL_NO_AUDIT_DEFAULT",
                                "OPS_BLACKOUT_VIEW_FULL_WITH_AUDIT",
                                "OPS_BLACKOUT_VIEW_FULL_WITH_FULL_AUDIT_FOR_EXPORT"
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "forceUseV2Backend": {
                            "description": "override to force using v2",
                            "location": "query",
                            "type": "boolean"
                        }
                    },
                    "path": "v1/blackout:list",
                    "response": {
                        "$ref": "ListOpsBlackoutsResponse"
                    }
                },
                "update": {
                    "description": "Update an OpsBlackout",
                    "flatPath": "v1/blackout:update",
                    "httpMethod": "PATCH",
                    "id": "ytvops_pa.blackout.update",
                    "parameterOrder": [],
                    "parameters": {
                        "auditDetails.description": {
                            "description": "Human-readable description of audit",
                            "location": "query",
                            "type": "string"
                        },
                        "auditDetails.source": {
                            "description": "Audit source of action",
                            "location": "query",
                            "type": "string"
                        },
                        "name": {
                            "description": "OpsBlackout name to update",
                            "location": "query",
                            "type": "string"
                        },
                        "updateMask": {
                            "description": "Update field mask",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/blackout:update",
                    "request": {
                        "$ref": "OpsBlackout"
                    },
                    "response": {
                        "$ref": "OpsBlackout"
                    }
                }
            }
        },
        "metadata": {
            "methods": {
                "batchGetStations": {
                    "description": "Retrieves multiple named stations based on the YouTube TV station id.\nThe name field must be populated with api names \"stations/<station_id>\"",
                    "flatPath": "v1/metadata:batchGetStations",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.metadata.batchGetStations",
                    "parameterOrder": [],
                    "parameters": {
                        "blackoutsBackend": {
                            "description": "blackout backend version.",
                            "location": "query",
                            "type": "string"
                        },
                        "names": {
                            "description": "Resource names\ne.g. stations/ST12345",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "view": {
                            "description": "Controls how much data the server fills in about a station",
                            "enum": [
                                "VIEW_FULL",
                                "VIEW_METADATA_ONLY",
                                "VIEW_INGESTION_METADATA"
                            ],
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/metadata:batchGetStations",
                    "response": {
                        "$ref": "BatchGetStationsResponse"
                    }
                },
                "channelSignals": {
                    "description": "Looks up YouTube TV search & discovery ChannelSignals.",
                    "flatPath": "v1/metadata:channelSignals",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.metadata.channelSignals",
                    "parameterOrder": [],
                    "parameters": {
                        "channelId": {
                            "description": "The channel ID the ChannelSignals is indexed by.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/metadata:channelSignals",
                    "response": {
                        "$ref": "LookupChannelSignalsResponse"
                    }
                },
                "listMajorEvents": {
                    "description": "Retrieves the major events based on the query terms.",
                    "flatPath": "v1/metadata:majorEvents",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.metadata.listMajorEvents",
                    "parameterOrder": [],
                    "parameters": {
                        "dmaCodes": {
                            "description": "The DMA code list to query for, e.g., ['803', '802'].",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "entityTypes": {
                            "description": "The entity types to filter for. If the list is empty, ignores filtering and\naccepts all entity types.",
                            "enum": [
                                "UNKNOWN",
                                "SHOW",
                                "PROGRAM",
                                "AIRING",
                                "STATION",
                                "NETWORK",
                                "SEASON",
                                "PERSON",
                                "SPORTS_TEAM",
                                "MOVIE",
                                "EVENT",
                                "EPISODE",
                                "SPORTS_LEAGUE",
                                "SPORTS_EVENT",
                                "MICROGENRE",
                                "SCHEDULE",
                                "POP",
                                "MARKET",
                                "PACKAGE",
                                "INGESTION_STREAM",
                                "BROADCAST_STREAM",
                                "ACQUISITION_STREAM",
                                "SPORTS_ATHLETE",
                                "LEMONAID_METRIC"
                            ],
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "lookupDate.day": {
                            "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.",
                            "format": "int32",
                            "location": "query",
                            "type": "integer"
                        },
                        "lookupDate.month": {
                            "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.",
                            "format": "int32",
                            "location": "query",
                            "type": "integer"
                        },
                        "lookupDate.year": {
                            "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
                            "format": "int32",
                            "location": "query",
                            "type": "integer"
                        },
                        "maxNumRows": {
                            "description": "The maximum number or rows to be retrieved.",
                            "format": "int32",
                            "location": "query",
                            "type": "integer"
                        },
                        "scoreThreshold": {
                            "description": "The minimum score which the major events retrieved be scored higher than.",
                            "format": "float",
                            "location": "query",
                            "type": "number"
                        },
                        "signalType.type": {
                            "enum": [
                                "UNKNOWN",
                                "CHUCK_DEFAULT_POPULARITY",
                                "CHUCK_SHORT_TERM_POPULARITY",
                                "CHUCK_TRENDING",
                                "QUERY_VOLUME_RZ_TRENDING",
                                "CHUCK_VIEWERSHIP",
                                "CHUCK_VIEWERSHIP_AGG",
                                "CHUCK_SPORTS_POPULARITY",
                                "QUERY_SPANNING_MENTIONS",
                                "RM_QUERY_SPANNING_MENTIONS",
                                "RM_QUERY_SPANNING_MENTIONS_AGG",
                                "LOG_IMPRESSIONS",
                                "RM_LOG_IMPRESSIONS",
                                "CHUCK_USER_BASED_RATING",
                                "CHUCK_TMS_QUALITY_RATING",
                                "BONES_TMS_QUALITY_RATING",
                                "BONES_TOMATO_CRITIC_RATING",
                                "BONES_TOMATO_FAN_RATING",
                                "TS_TOMATO_CRITIC_RATING",
                                "TS_IMDB_RATING",
                                "TS_TV_COM_RATING",
                                "TS_METACRITIC_RATING",
                                "POPULARITY_RESCALED",
                                "POPULARITY_SHORTTERM_RESCALED",
                                "TRENDING_RESCALED",
                                "RATING_RESCALED",
                                "VIEWERSHIP_RESCALED",
                                "YOUTUBE_WATCHTIME_RESCALED",
                                "YT_UNPLUGGED_WATCHTIME_RESCALED",
                                "YT_UNPLUGGED_WATCHTIME",
                                "YT_UNPLUGGED_VIEWCOUNT",
                                "YT_UNPLUGGED_STATION_WATCHTIME",
                                "YT_UNPLUGGED_STATION_VIEWCOUNT",
                                "YT_UNPLUGGED_COLLECTS",
                                "YT_UNPLUGGED_COLLECTS_RESCALED",
                                "YT_UNPLUGGED_COLLECTS_SHORTTERM",
                                "YT_UNPLUGGED_COLLECTS_SHORTTERM_RESCALED",
                                "YT_UNPLUGGED_USER_COLLECT_PERCENTAGE",
                                "YT_UNPLUGGED_RECENT_COLLECT_RATIO",
                                "YT_UNPLUGGED_ACTIVE_DVR_RATIO",
                                "YTV_RATING",
                                "YTV_VIEWERSHIP",
                                "YTV_VIEWERSHIP_SIX_MONTHS",
                                "YOUTUBE_HOTNESS_AGG",
                                "QV_7D_RESCALED",
                                "MAPPED_YOUTUBE_RELATED_GRAPH",
                                "RM_CHUCK_SIMILARITY",
                                "RM_WEB_COOCCURRENCE",
                                "RM_YOUTUBE_COWATCHED_CHANNELS",
                                "RELATEDNESS_FROM_TAGS_SIMILARITY",
                                "RELATEDNESS_FROM_EMBEDDING_SIMILARITY",
                                "BLENDED_RELATEDNESS",
                                "BLENDED_RELATEDNESS_MODEL_BASED",
                                "GLOBAL_RM_CHUCK_SIMILARITY",
                                "GLOBAL_NETWORK_TO_YTV_RELATEDNESS",
                                "INVERTED_GLOBAL_RM_CHUCK_SIMILARITY",
                                "INVERTED_GLOBAL_NETWORK_TO_YTV_RELATEDNESS",
                                "CHANNEL_AFFINITY",
                                "YTV_BELL_WTR"
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "sortCriterion": {
                            "description": "The sort criterion to applied to the result data.",
                            "enum": [
                                "MAJOR_EVENTS_SORT_BY_DEFAULT",
                                "MAJOR_EVENTS_SORT_BY_SCORE_DESCENDING",
                                "MAJOR_EVENTS_SORT_BY_SCORE_ASCENDING",
                                "MAJOR_EVENTS_SORT_BY_TIME_ASCENDING",
                                "MAJOR_EVENTS_SORT_BY_TIME_DESCENDING",
                                "MAJOR_EVENTS_SORT_BY_AUTOMATIC_CRITERION"
                            ],
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/metadata:majorEvents",
                    "response": {
                        "$ref": "ListMajorEventsResponse"
                    }
                },
                "search": {
                    "description": "Searches for stations in YouTube TV based on a set of filter criteria",
                    "flatPath": "v1/metadata:search",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.metadata.search",
                    "parameterOrder": [],
                    "parameters": {
                        "blackoutsBackend": {
                            "description": "blackout backend version.",
                            "location": "query",
                            "type": "string"
                        },
                        "pageSize": {
                            "description": "The number of results to return in a page.",
                            "format": "int32",
                            "location": "query",
                            "type": "integer"
                        },
                        "pageToken": {
                            "description": "A token representing the page to fetch, empty for the first fetch.",
                            "location": "query",
                            "type": "string"
                        },
                        "query": {
                            "description": "A query to search the station database\nThis field is unstructured and attempts to interpret the data to search,\nExamples:\nSimple searches: FOX, KTVU, ST12345\nExplicit station ids: ST1, ST2, ST3\nStructured rquery: callsign:( FOX | KTVU) access_group:PUBLIC",
                            "location": "query",
                            "type": "string"
                        },
                        "queryOptions.queryType": {
                            "description": "The type of the query.",
                            "enum": [
                                "QUERY_TYPE_UNSPECIFIED",
                                "QUERY_TYPE_RQUERY_EXPANDED",
                                "QUERY_TYPE_RAW",
                                "QUERY_TYPE_RQUERY"
                            ],
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/metadata:search",
                    "request": {
                        "$ref": "SearchRestrictions"
                    },
                    "response": {
                        "$ref": "SearchResponse"
                    }
                },
                "ust": {
                    "description": "Looks up YouTube TV search & discovery ChannelSignals.",
                    "flatPath": "v1/metadata:ust",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.metadata.ust",
                    "parameterOrder": [],
                    "parameters": {
                        "channelId": {
                            "description": "The channel ID the signals data is indexed by.",
                            "location": "query",
                            "type": "string"
                        },
                        "columnNames": {
                            "description": "The names of the columns selected for the lookup.",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "videoId": {
                            "description": "The video ID the signals data is indexed by.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/metadata:ust",
                    "response": {
                        "$ref": "LookupUnpluggedSignalsTableResponse"
                    }
                }
            }
        },
        "schedule": {
            "methods": {
                "adjustSchedules": {
                    "description": "Adjusts station schedule by using effective_timestamp. Deprecate this RPC\nonce we have migrated to AdjustSchedulesWithTargetingCriteria rpc.",
                    "flatPath": "v1/schedule:adjustSchedules",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.schedule.adjustSchedules",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/schedule:adjustSchedules",
                    "request": {
                        "$ref": "AdjustSchedulesRequest"
                    },
                    "response": {
                        "$ref": "AdjustSchedulesResponse"
                    }
                },
                "batchGet": {
                    "description": "Retrieves schedules of certain stations while also\nsatisfies conditions in schedule_fetch_params",
                    "flatPath": "v1/schedule:batchGet",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.schedule.batchGet",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/schedule:batchGet",
                    "request": {
                        "$ref": "BatchGetSchedulesRequest"
                    },
                    "response": {
                        "$ref": "BatchGetSchedulesResponse"
                    }
                },
                "batchGetStationScheduleStatus": {
                    "description": "Retrieves schedule status of specific stations.",
                    "flatPath": "v1/schedule:batchGetStationScheduleStatus",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.schedule.batchGetStationScheduleStatus",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/schedule:batchGetStationScheduleStatus",
                    "request": {
                        "$ref": "BatchGetStationsScheduleStatusRequest"
                    },
                    "response": {
                        "$ref": "BatchGetStationsScheduleStatusResponse"
                    }
                },
                "createStationAiring": {
                    "description": "Create airing of specific station.",
                    "flatPath": "v1/schedule:createStationAiring",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.schedule.createStationAiring",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/schedule:createStationAiring",
                    "request": {
                        "$ref": "CreateStationAiringRequest"
                    },
                    "response": {
                        "$ref": "CreateStationAiringResponse"
                    }
                },
                "getLatestActiveManualScheduleVersion": {
                    "description": "Retrieves latest active manual schedule version timestamp of specific\nstations from cms",
                    "flatPath": "v1/schedule:getLatestActiveManualScheduleVersion",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.schedule.getLatestActiveManualScheduleVersion",
                    "parameterOrder": [],
                    "parameters": {
                        "stationIds": {
                            "description": "station names",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/schedule:getLatestActiveManualScheduleVersion",
                    "response": {
                        "$ref": "GetLatestActiveManualScheduleVersionResponse"
                    }
                }
            }
        },
        "sideline": {
            "methods": {
                "get": {
                    "description": "General user info.",
                    "flatPath": "v1/sideline/{userId}",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.sideline.get",
                    "parameterOrder": [
                        "userId"
                    ],
                    "parameters": {
                        "email": {
                            "description": "Email to search user.",
                            "location": "query",
                            "type": "string"
                        },
                        "gaiaId": {
                            "description": "Gaia Id to get user info.",
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "userId": {
                            "description": "Obfuscated gaia id.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/sideline/{userId}",
                    "response": {
                        "$ref": "UserInfo"
                    }
                },
                "getLibrary": {
                    "description": "Get list of LibraryItems in user's library.",
                    "flatPath": "v1/sideline/{userId}/library",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.sideline.getLibrary",
                    "parameterOrder": [
                        "userId"
                    ],
                    "parameters": {
                        "gaiaId": {
                            "description": "Gaia Id of library owner.",
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "userId": {
                            "description": "Obfuscated gaia id.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/sideline/{userId}/library",
                    "response": {
                        "$ref": "GetUserLibraryResponse"
                    }
                },
                "getStations": {
                    "description": "Get list Stations available for user in given location.",
                    "flatPath": "v1/sideline/{userId}/stations",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.sideline.getStations",
                    "parameterOrder": [
                        "userId"
                    ],
                    "parameters": {
                        "gaiaId": {
                            "description": "Gaia Id of library owner.",
                            "format": "int64",
                            "location": "query",
                            "type": "string"
                        },
                        "location.dmaId": {
                            "description": "Which market does this location refer to? Format: 3-digit code, e.g., 510\nfor Cleveland.",
                            "location": "query",
                            "type": "string"
                        },
                        "location.isoCountryCode": {
                            "description": "What country are we in?",
                            "location": "query",
                            "type": "string"
                        },
                        "location.zipCode": {
                            "description": "What zip code does this location refer to? Format: 5-digit US zip code,\ne.g., 94043 for Mountain View.",
                            "location": "query",
                            "type": "string"
                        },
                        "userId": {
                            "description": "Obfuscated gaia id.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/sideline/{userId}/stations",
                    "response": {
                        "$ref": "GetUserStationsResponse"
                    }
                }
            },
            "resources": {
                "library": {
                    "methods": {
                        "get": {
                            "description": "Get list of Recordings related to LibraryItem.",
                            "flatPath": "v1/sideline/{userId}/library/{libraryItemId}",
                            "httpMethod": "GET",
                            "id": "ytvops_pa.sideline.library.get",
                            "parameterOrder": [
                                "userId",
                                "libraryItemId"
                            ],
                            "parameters": {
                                "gaiaId": {
                                    "description": "Gaia Id of library owner.",
                                    "format": "int64",
                                    "location": "query",
                                    "type": "string"
                                },
                                "libraryItemId": {
                                    "description": "Channel id of library item.\nOr Entity.Recording.Entity",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "Obfuscated gaia id.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/sideline/{userId}/library/{libraryItemId}",
                            "response": {
                                "$ref": "GetUserVideosResponse"
                            }
                        }
                    }
                },
                "search": {
                    "methods": {
                        "get": {
                            "description": "General user info.",
                            "flatPath": "v1/sideline/search/{email}",
                            "httpMethod": "GET",
                            "id": "ytvops_pa.sideline.search.get",
                            "parameterOrder": [
                                "email"
                            ],
                            "parameters": {
                                "email": {
                                    "description": "Email to search user.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "gaiaId": {
                                    "description": "Gaia Id to get user info.",
                                    "format": "int64",
                                    "location": "query",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "Obfuscated gaia id.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/sideline/search/{email}",
                            "response": {
                                "$ref": "UserInfo"
                            }
                        }
                    }
                },
                "stations": {
                    "methods": {
                        "batchGetSchedules": {
                            "description": "Retrieves schedules of certain stations while also\nsatisfies conditions in schedule_fetch_params\nThis is proxy call of YouTubeTVOpsService.BatchGetSchedules because of ACL.",
                            "flatPath": "v1/sideline/stations:batchGetSchedules",
                            "httpMethod": "POST",
                            "id": "ytvops_pa.sideline.stations.batchGetSchedules",
                            "parameterOrder": [],
                            "parameters": {},
                            "path": "v1/sideline/stations:batchGetSchedules",
                            "request": {
                                "$ref": "BatchGetSchedulesRequest"
                            },
                            "response": {
                                "$ref": "BatchGetSchedulesResponse"
                            }
                        },
                        "listBatchGetBlackouts": {
                            "description": "List OpsBlackouts\nThis is proxy call of YouTubeTVOpsService.ListOpsBlackouts because of ACL.",
                            "flatPath": "v1/sideline/stations:batchGetBlackouts",
                            "httpMethod": "GET",
                            "id": "ytvops_pa.sideline.stations.listBatchGetBlackouts",
                            "parameterOrder": [],
                            "parameters": {
                                "filter.endTime": {
                                    "description": "filter by end time",
                                    "format": "google-datetime",
                                    "location": "query",
                                    "type": "string"
                                },
                                "filter.includeDeleted": {
                                    "description": "Whether to include deleted blackouts",
                                    "location": "query",
                                    "type": "boolean"
                                },
                                "filter.primaryTypes": {
                                    "description": "filter by primary types",
                                    "enum": [
                                        "PRIMARY_TYPE_UNKNOWN",
                                        "PRIMARY_TYPE_OTT_ALL",
                                        "PRIMARY_TYPE_MLB_CHECK_IN",
                                        "PRIMARY_TYPE_LOCATION",
                                        "PRIMARY_TYPE_DEVICE",
                                        "PRIMARY_TYPE_OVERRIDE",
                                        "PRIMARY_TYPE_STATION_OUTAGE"
                                    ],
                                    "location": "query",
                                    "repeated": true,
                                    "type": "string"
                                },
                                "filter.sourceTypes": {
                                    "description": "filter by source types",
                                    "enum": [
                                        "SOURCE_UNKNOWN",
                                        "SOURCE_MANUAL",
                                        "SOURCE_RULE_SYSTEM",
                                        "SOURCE_AUTOMATIC"
                                    ],
                                    "location": "query",
                                    "repeated": true,
                                    "type": "string"
                                },
                                "filter.startTime": {
                                    "description": "filter by start time",
                                    "format": "google-datetime",
                                    "location": "query",
                                    "type": "string"
                                },
                                "filter.stationIds": {
                                    "description": "filter by station ids",
                                    "location": "query",
                                    "repeated": true,
                                    "type": "string"
                                },
                                "filter.view": {
                                    "description": "View to use when populating blackout objects",
                                    "enum": [
                                        "OPS_BLACKOUT_VIEW_FULL_NO_AUDIT_DEFAULT",
                                        "OPS_BLACKOUT_VIEW_FULL_WITH_AUDIT",
                                        "OPS_BLACKOUT_VIEW_FULL_WITH_FULL_AUDIT_FOR_EXPORT"
                                    ],
                                    "location": "query",
                                    "type": "string"
                                },
                                "forceUseV2Backend": {
                                    "description": "override to force using v2",
                                    "location": "query",
                                    "type": "boolean"
                                }
                            },
                            "path": "v1/sideline/stations:batchGetBlackouts",
                            "response": {
                                "$ref": "ListOpsBlackoutsResponse"
                            }
                        }
                    }
                }
            }
        },
        "stream": {
            "methods": {
                "cancelOverride": {
                    "description": "Cancel current manual override of specific user stations.",
                    "flatPath": "v1/stream:cancelOverride",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.stream.cancelOverride",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/stream:cancelOverride",
                    "request": {
                        "$ref": "CancelStationsStreamSourceOverrideRequest"
                    },
                    "response": {
                        "$ref": "CancelStationsStreamSourceOverrideResponse"
                    }
                },
                "getScte": {
                    "description": "Get SCTE-35 Markers for a station",
                    "flatPath": "v1/stream:getScte",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.stream.getScte",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/stream:getScte",
                    "request": {
                        "$ref": "GetStationScteMarkersRequest"
                    },
                    "response": {
                        "$ref": "GetStationScteMarkersResponse"
                    }
                },
                "getStationScteConfig": {
                    "description": "Fetch station SCTE info to generate station config report.",
                    "flatPath": "v1/stream:getStationScteConfig",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.stream.getStationScteConfig",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/stream:getStationScteConfig",
                    "request": {
                        "$ref": "GetStationScteConfigRequest"
                    },
                    "response": {
                        "$ref": "GetStationScteConfigResponse"
                    }
                },
                "setScteAdMarkerOffset": {
                    "description": "Set the min and max offset for a SCTE-35 marker",
                    "flatPath": "v1/stream:setScteAdMarkerOffset",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.stream.setScteAdMarkerOffset",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/stream:setScteAdMarkerOffset",
                    "request": {
                        "$ref": "SetScteAdMarkerOffsetRequest"
                    },
                    "response": {
                        "$ref": "SetScteAdMarkerOffsetResponse"
                    }
                },
                "stationsUsingStreamSource": {
                    "description": "Fetch stations which use the specific station as source station.",
                    "flatPath": "v1/stream:stationsUsingStreamSource",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.stream.stationsUsingStreamSource",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/stream:stationsUsingStreamSource",
                    "request": {
                        "$ref": "GetStationsUsingStreamSourceRequest"
                    },
                    "response": {
                        "$ref": "GetStationsUsingStreamSourceResponse"
                    }
                },
                "switch": {
                    "description": "Force stream switching by sending faux scte35 markers, or force override\nuser station by a source station.",
                    "flatPath": "v1/stream:switch",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.stream.switch",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/stream:switch",
                    "request": {
                        "$ref": "SwitchStationsStreamSourceRequest"
                    },
                    "response": {
                        "$ref": "SwitchStationsStreamSourceResponse"
                    }
                }
            }
        },
        "tvIngestion": {
            "methods": {
                "batchGetAttributes": {
                    "description": "Get McStreamy Attributes for Stations.",
                    "flatPath": "v1/tvIngestion:batchGetAttributes",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.tvIngestion.batchGetAttributes",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:batchGetAttributes",
                    "request": {
                        "$ref": "BatchGetMcStreamyAttributesRequest"
                    },
                    "response": {
                        "$ref": "BatchGetMcStreamyAttributesResponse"
                    }
                },
                "batchGetIncidents": {
                    "description": "Retrieves multiple YtvIncidents based on incident ids.",
                    "flatPath": "v1/tvIngestion:batchGetIncidents",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.tvIngestion.batchGetIncidents",
                    "parameterOrder": [],
                    "parameters": {
                        "incidentIds": {
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/tvIngestion:batchGetIncidents",
                    "response": {
                        "$ref": "BatchGetIncidentsResponse"
                    }
                },
                "getAlertingStations": {
                    "description": "Get all active alerts for any station.",
                    "flatPath": "v1/tvIngestion:alertingStations",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.tvIngestion.getAlertingStations",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:alertingStations",
                    "response": {
                        "$ref": "GetAlertingStationsResponse"
                    }
                },
                "getAllIncidents": {
                    "description": "Get all YtvIncidents.",
                    "flatPath": "v1/tvIngestion:allIncidents",
                    "httpMethod": "GET",
                    "id": "ytvops_pa.tvIngestion.getAllIncidents",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:allIncidents",
                    "response": {
                        "$ref": "GetAllIncidentsResponse"
                    }
                },
                "listEntities": {
                    "description": "List information about tv ingestion monitoring",
                    "flatPath": "v1/tvIngestion:listEntities",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.tvIngestion.listEntities",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:listEntities",
                    "request": {
                        "$ref": "ListEntitiesRequest"
                    },
                    "response": {
                        "$ref": "ListEntitiesResponse"
                    }
                },
                "metricData": {
                    "description": "Get Data of certain station metric.",
                    "flatPath": "v1/tvIngestion:metricData",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.tvIngestion.metricData",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:metricData",
                    "request": {
                        "$ref": "GetStationMetricDataRequest"
                    },
                    "response": {
                        "$ref": "GetStationMetricDataResponse"
                    }
                },
                "stationIncidentInfo": {
                    "description": "Get IncidentInfo for a single Station.",
                    "flatPath": "v1/tvIngestion:stationIncidentInfo",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.tvIngestion.stationIncidentInfo",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:stationIncidentInfo",
                    "request": {
                        "$ref": "GetStationIncidentInfoRequest"
                    },
                    "response": {
                        "$ref": "GetStationIncidentInfoResponse"
                    }
                },
                "stationsAcqStreamsInfo": {
                    "description": "Get acquisition streams information of multiple stations.",
                    "flatPath": "v1/tvIngestion:stationsAcqStreamsInfo",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.tvIngestion.stationsAcqStreamsInfo",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:stationsAcqStreamsInfo",
                    "request": {
                        "$ref": "BatchGetStationsAcquisitionStreamsInfoRequest"
                    },
                    "response": {
                        "$ref": "BatchGetStationsAcquisitionStreamsInfoResponse"
                    }
                },
                "updateAttributes": {
                    "description": "Update station attributes, which must be under /youtube/unplugged/catcom/",
                    "flatPath": "v1/tvIngestion:updateAttributes",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.tvIngestion.updateAttributes",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/tvIngestion:updateAttributes",
                    "request": {
                        "$ref": "UpdateStationAttributesRequest"
                    },
                    "response": {
                        "$ref": "UpdateStationAttributesResponse"
                    }
                },
                "updateIncidents": {
                    "description": "Update incident information of multiple stations",
                    "flatPath": "v1/tvIngestion:updateIncidents",
                    "httpMethod": "POST",
                    "id": "ytvops_pa.tvIngestion.updateIncidents",
                    "parameterOrder": [],
                    "parameters": {
                        "stationIds": {
                            "description": "ids of stations that is to update the incident",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/tvIngestion:updateIncidents",
                    "request": {
                        "$ref": "IncidentInfoUpdateDetails"
                    },
                    "response": {
                        "$ref": "UpdateStationsIncidentInfoResponse"
                    }
                }
            }
        }
    },
    "revision": "20190920",
    "rootUrl": "https://test-ytvops-pa.sandbox.googleapis.com/",
    "schemas": {
        "AccessibilityData": {
            "description": "A set of accessibility data that can be used to help locate elements\non screen.",
            "id": "AccessibilityData",
            "properties": {
                "accessibilityIdentifier": {
                    "description": "DEPRECATED in favor of AccessibilityId version. An arbitrary identifier\nthat helps uniquely identify an element.",
                    "type": "string"
                },
                "identifier": {
                    "$ref": "AccessibilityId",
                    "description": "An arbitrary identifier enum that helps uniquely identify an element."
                },
                "label": {
                    "description": "Text that can be spoken by text-to-speech software.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AccessibilityId": {
            "description": "Next ID: 2",
            "id": "AccessibilityId",
            "properties": {
                "accessibilityIdType": {
                    "enum": [
                        "UNKNOWN",
                        "MENU_ADD_TO_WATCH_LATER",
                        "MENU_REMOVE_FROM_WATCH_LATER",
                        "MENU_ADD_TO_PLAYLIST",
                        "MENU_REMOVE_FROM_PLAYLIST",
                        "MENU_SHARE_VIDEO",
                        "MENU_SHARE_PLAYLIST",
                        "MENU_SHARE_ARTIST",
                        "MENU_OFFLINE_VIDEO",
                        "MENU_OFFLINE_PLAYLIST",
                        "MENU_OFFLINE_UPSELL",
                        "MENU_DELETE_VIDEO",
                        "MENU_DELETE_PLAYLIST",
                        "MENU_EDIT_VIDEO_METADATA",
                        "MENU_HIDE",
                        "MENU_REMOVE_FROM_HISTORY",
                        "MENU_LIKE",
                        "MENU_INFO",
                        "MENU_ADD_TO_REMOTE_QUEUE",
                        "MENU_REMOVE_FROM_REMOTE_QUEUE",
                        "MENU_INSERT_IN_REMOTE_QUEUE",
                        "MENU_CREATE_PLAYLIST",
                        "MENU_SETTINGS",
                        "MENU_PRIVACY",
                        "MENU_FEEDBACK",
                        "MENU_HELP",
                        "MENU_DELETE_CHANNEL_POST",
                        "MENU_PLAYLIST_JOIN_COLLABORATION",
                        "MENU_EDIT_PLAYLIST",
                        "MENU_OFFLINE_REMOVE",
                        "MENU_OFFLINE_PAUSE",
                        "MENU_OFFLINE_RESUME",
                        "MENU_UNSUBSCRIBE",
                        "MENU_GET_ALL_UPDATES",
                        "MENU_DISMISS",
                        "MENU_CANCEL_UPLOAD",
                        "MENU_TAKE_PHOTO",
                        "MENU_CHOOSE_PHOTO",
                        "MENU_CHOOSE_FROM_CHANNEL_ART_GALLERY",
                        "MENU_FILTER_VIDEOS_ONLY",
                        "MENU_FILTER_VIDEOS_AND_POSTS",
                        "MENU_WATCH_ON_TV",
                        "MENU_ADD_UPCOMING_EVENT_REMINDER",
                        "MENU_REMOVE_UPCOMING_EVENT_REMINDER",
                        "MENU_TOGGLE_DENSITY_MODE",
                        "MENU_MORE_LIKE_THIS",
                        "MENU_CREATE_VIDEO",
                        "MENU_CREATE_LIVE_STREAM",
                        "MENU_CREATE_REEL_ITEM",
                        "MENU_CREATE_POST",
                        "MENU_LESS_LIKE_THIS",
                        "MENU_REEL_OVERFLOW",
                        "MENU_DELETE_REEL",
                        "MENU_EDIT_REEL",
                        "MENU_REMOVE_FROM_QUEUE",
                        "MENU_REEL_SHELF_OVERFLOW",
                        "MENU_REEL_SHELF_DISMISS",
                        "MENU_ABOUT_RECOMMENDATION"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "MENU_ADD_TO_REMOTE_QUEUE, MENU_REMOTE_FROM_REMOTE_QUEUE and\nMENU_INSERT_IN_REMOTE_QUEUE (a.k.a. \"Play next\") are accessibility\nidentifiers for MDx remote queue actions in video renderer menus.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "MENU_TAKE_PHOTO, MENU_CHOOSE_PHOTO and\nMENU_CHOOSE_FROM_CHANNEL_ART_GALLERY belong to the photo editing menu\nitems. Screenshots:\n  https://screenshot.googleplex.com/zv4LxhZ7uTF\n  https://screenshot.googleplex.com/pEHYhmt6bAA",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "MENU_MORE_LIKE_THIS is a button that will return similar content.\nhttps://screenshot.googleplex.com/cxuk123jcJ1.png",
                        "Creation menu buttons.\nhttps://screenshot.googleplex.com/BWAF0EwAQP1",
                        "",
                        "",
                        "",
                        "",
                        "Reel item overflow menu.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AccessibilitySupportedDatas": {
            "id": "AccessibilitySupportedDatas",
            "properties": {
                "accessibilityData": {
                    "$ref": "AccessibilityData"
                }
            },
            "type": "object"
        },
        "AcquisitionStreamInfo": {
            "id": "AcquisitionStreamInfo",
            "properties": {
                "acquisitionType": {
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_OTA",
                        "TYPE_STUDIO",
                        "TYPE_FIBER",
                        "TYPE_VYVX",
                        "TYPE_IRD"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "broadcasterProviderName": {
                    "type": "string"
                },
                "circuitInfo": {
                    "$ref": "CircuitInfo"
                },
                "contactPhoneNumber": {
                    "type": "string"
                },
                "dmaName": {
                    "type": "string"
                },
                "dmaRank": {
                    "format": "int32",
                    "type": "integer"
                },
                "irdInfo": {
                    "$ref": "IrdInfo"
                },
                "mediusIp": {
                    "type": "string"
                },
                "mediusName": {
                    "type": "string"
                },
                "mediusServiceName": {
                    "type": "string"
                },
                "multicastIp": {
                    "type": "string"
                },
                "otaInfo": {
                    "$ref": "OtaInfo"
                },
                "popCode": {
                    "type": "string"
                },
                "programNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "sentryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "sentryName": {
                    "type": "string"
                },
                "sentryPortNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "stationId": {
                    "description": "UnpluggedId.STATION",
                    "type": "string"
                },
                "studioInfo": {
                    "$ref": "StudioInfo"
                },
                "tmsName": {
                    "type": "string"
                },
                "tsid": {
                    "format": "int32",
                    "type": "integer"
                },
                "udpPort": {
                    "format": "int32",
                    "type": "integer"
                },
                "vlproServiceName": {
                    "type": "string"
                },
                "vyvxInfo": {
                    "$ref": "VyvxInfo"
                }
            },
            "type": "object"
        },
        "ActiveSeason": {
            "id": "ActiveSeason",
            "properties": {
                "conferenceSeasons": {
                    "description": "When filled, used to retrieve schedule instead of directly using League id\nCurrently only used by NCAA-F and NCAA-B",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "season": {
                    "$ref": "EntityEntity"
                }
            },
            "type": "object"
        },
        "AdBreak": {
            "description": "AdBreak describes a single Ad break inside a VOD program.\nNext tag: 4",
            "id": "AdBreak",
            "properties": {
                "durationMs": {
                    "description": "Required except for AD_BREAK_VOD_DAI, Ad podding is disabled when duration\nnot provided.",
                    "format": "int64",
                    "type": "string"
                },
                "startTimeMs": {
                    "description": "Offset from start of program to the Ad break.",
                    "format": "int64",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "AD_BREAK_UNKNOWN",
                        "AD_BREAK_VOD_DAI",
                        "AD_BREAK_VOD_BURN_IN_MARK"
                    ],
                    "enumDescriptions": [
                        "",
                        "Marks an Ad insertion oppounity.",
                        "Marks a range of burn in Ad that we cannot directly DAI, future workflow\nmay or may not convert it to AD_BREAK_VOD_DAI."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AdTransition": {
            "id": "AdTransition",
            "properties": {
                "adjustment": {
                    "description": "Offset compensated at the cue point.",
                    "format": "google-duration",
                    "type": "string"
                },
                "cueToneId": {
                    "type": "string"
                },
                "cueToneTimestamp": {
                    "description": "Timestamp for when the SCTE35 Marker was received.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "frames": {
                    "items": {
                        "$ref": "AdTransitionFrame"
                    },
                    "type": "array"
                },
                "isCueOut": {
                    "type": "boolean"
                },
                "maxOffset": {
                    "format": "google-duration",
                    "type": "string"
                },
                "minOffset": {
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AdTransitionFrame": {
            "description": "Information of a frame that belongs to the video close to an ad transition\n(start/end of an ad break).\nNext ID: 7",
            "id": "AdTransitionFrame",
            "properties": {
                "bigstorePath": {
                    "description": "Bigstore path to the frame image.",
                    "type": "string"
                },
                "chunkBeginStreamElapsedTime": {
                    "description": "Elapsed stream time at the beginning of the video chunk which contains this\nframe.",
                    "format": "google-duration",
                    "type": "string"
                },
                "chunkBeginWalltime": {
                    "description": "Walltime at the beginning of the video chunk which contains this frame.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "chunkOffset": {
                    "description": "Frame offset in the chunk, obtained by (frame time) - (chunk begin time).",
                    "format": "google-duration",
                    "type": "string"
                },
                "fifeUrl": {
                    "description": "URL to the FIFE'd frame image.",
                    "type": "string"
                },
                "offset": {
                    "description": "The offset between the frame and the corresponding SCTE35 marker.\nOffset = (frame timestamp) - (marker timestamp).",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AdjustSchedulesRequest": {
            "description": "Request message for the OpsScheduleService.AdjustSchedules RPC",
            "id": "AdjustSchedulesRequest",
            "properties": {
                "activeTime": {
                    "description": "timestamp specified by user to make adjustment.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "criteria": {
                    "description": "Targeting criteria to identify the airing that needs to be modified.",
                    "items": {
                        "$ref": "TargetingCriteria"
                    },
                    "type": "array"
                },
                "oldAiringReference": {
                    "$ref": "EntityReference",
                    "description": "If set, then we will find the blackout whose start/end time matches\nblackout's start/end time. More correctly, If |operation.operation_type| is\n|end-at| then we will find a blackout whose end-time matches with end-time\nof the |old_airing_ref|. If |operation.operation_type| is |Start-at| then\nwe will find a blackout whose start-time matches with start-time of the\n|old_airing_ref|."
                },
                "operation": {
                    "$ref": "SchedulesOperationDetails",
                    "description": "params of this operation"
                },
                "preview": {
                    "description": "if in preview mode, it just return a preview adjusted stations list, not\nreally change the schedules.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AdjustSchedulesResponse": {
            "description": "Response message for the OpsScheduleService.AdjustSchedules RPC",
            "id": "AdjustSchedulesResponse",
            "properties": {
                "failureStations": {
                    "description": "stations which failed when adjusting in cora.",
                    "items": {
                        "$ref": "StationsWithError"
                    },
                    "type": "array"
                },
                "stations": {
                    "description": "adjusted stations",
                    "items": {
                        "$ref": "AdjustedStation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AdjustedStation": {
            "description": "An object contains information of adjusted station.",
            "id": "AdjustedStation",
            "properties": {
                "airingsAffected": {
                    "description": "list of affected airings",
                    "items": {
                        "$ref": "AffectedAiring"
                    },
                    "type": "array"
                },
                "blackoutsAffected": {
                    "description": "list of affected blackouts",
                    "items": {
                        "$ref": "AffectedBlackout"
                    },
                    "type": "array"
                },
                "manualScheduleVersion": {
                    "$ref": "ScheduleVersion",
                    "description": "version of manual schedule of station."
                },
                "name": {
                    "description": "Resource name\ne.g. stations/ST12345",
                    "type": "string"
                },
                "previewAiringEntries": {
                    "description": "airing entries after adjusted, set when previewing only.",
                    "items": {
                        "$ref": "ScheduleEntry"
                    },
                    "type": "array"
                },
                "previewBlackouts": {
                    "description": "blackouts after adjusted, set when previewing only.",
                    "items": {
                        "$ref": "OpsBlackout"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AffectedAiring": {
            "description": "Information of affected airing.",
            "id": "AffectedAiring",
            "properties": {
                "airingId": {
                    "description": "affected airing id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AffectedBlackout": {
            "description": "Information of affected blackout.",
            "id": "AffectedBlackout",
            "properties": {
                "blackoutId": {
                    "description": "affected blackout id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Airing": {
            "id": "Airing",
            "properties": {
                "encryptedVideoId": {
                    "description": "encrypted video id for the airing",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AiringAnnotations": {
            "description": "Annotations for an airing.",
            "id": "AiringAnnotations",
            "properties": {
                "metadataAnnotations": {
                    "$ref": "AiringMetadataAnnotations"
                },
                "monitoringSourcesAnnotations": {
                    "$ref": "MonitoringSourcesAnnotations"
                },
                "qualityAnnotations": {
                    "$ref": "AiringQualityAnnotations"
                }
            },
            "type": "object"
        },
        "AiringDetails": {
            "description": "Details of creating airing.",
            "id": "AiringDetails",
            "properties": {
                "annotations": {
                    "$ref": "AiringAnnotations",
                    "description": "Annotations for airing."
                },
                "cmsId": {
                    "description": "cms id",
                    "type": "string"
                },
                "programActuality": {
                    "$ref": "ProgramActualityValue",
                    "description": "Program actuality for airing."
                },
                "timeRange": {
                    "$ref": "TimeRange",
                    "description": "Time range of the airing."
                },
                "umsId": {
                    "$ref": "UnpluggedId",
                    "description": "ums id"
                }
            },
            "type": "object"
        },
        "AiringFlags": {
            "id": "AiringFlags",
            "properties": {
                "airingExtended": {
                    "description": "Whether the airing is extended during livestream. Updated at airing's\nscheduled end time.",
                    "type": "boolean"
                },
                "airingExtensionEnded": {
                    "description": "Whether the extended airing has ended in the livestream.\nIf airing_extended is True, this will be set to True at the extended end\ntime.",
                    "type": "boolean"
                },
                "extensionState": {
                    "enum": [
                        "EXTENSION_STATE_UNKNOWN",
                        "EXTENSION_STATE_NOT_EXTENDED",
                        "EXTENSION_STATE_EXTENDED_NOT_ENDED",
                        "EXTENSION_STATE_EXTENDED_AND_ENDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "programCorrectness": {
                    "enum": [
                        "PROGRAM_CORRECTNESS_UNKNOWN",
                        "PROGRAM_CORRECTNESS_CORRECT",
                        "PROGRAM_CORRECTNESS_INCORRECT"
                    ],
                    "enumDescriptions": [
                        "Default value. This program correctness is not checked yet, or we are not\nsure whether the program is correct or not. This may be used when it is\ndifficult to tell whether the program information is correct, e.g., the\nshow of a program looks correct but it is uncertain whether the episode\nis correct.",
                        "Program is correct.",
                        "Program is incorrect."
                    ],
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "STATE_UNKNOWN",
                        "STATE_ACTIVE",
                        "STATE_INACTIVE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AiringMetadataAnnotations": {
            "description": "Annotations about an airing metadata.",
            "id": "AiringMetadataAnnotations",
            "properties": {
                "kgModificationInfo": {
                    "$ref": "ModificationInfo"
                },
                "manualModificationInfo": {
                    "$ref": "ModificationInfo",
                    "description": "Fields to record whether start/end time of the airing was modified by\nspecified sources."
                },
                "programCorrectness": {
                    "enum": [
                        "PROGRAM_CORRECTNESS_UNKNOWN",
                        "PROGRAM_CORRECT",
                        "PROGRAM_INCORRECT",
                        "PROGRAM_UNCERTAIN"
                    ],
                    "enumDescriptions": [
                        "Default value - do not use. Typically means the correctness value has not\nbeen set.",
                        "Program is correct.",
                        "Program is incorrect.",
                        "Uncertain whether the program is correct or not. This may be used when\nthe show of a program looks correct but it is uncertain whether the\nepisode is correct."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AiringQualityAnnotations": {
            "description": "Annotations affecting the quality of airings",
            "id": "AiringQualityAnnotations",
            "properties": {
                "dvrFlaggingWorkflowId": {
                    "description": "The id of a dvr flagging workflow affecting this airing",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AlertInfo": {
            "id": "AlertInfo",
            "properties": {
                "affectedIngestConfigIds": {
                    "description": "ids of affected ingest configs, empty if this is station alert.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "alertEntityType": {
                    "description": "Type of entity that alert related to.",
                    "enum": [
                        "ALERT_TYPE_UNKNOWN",
                        "ALERT_TYPE_STATION",
                        "ALERT_TYPE_STREAM"
                    ],
                    "enumDescriptions": [
                        "Unknown type.",
                        "Station-level alert.",
                        "Stream-level alert."
                    ],
                    "type": "string"
                },
                "attributeName": {
                    "description": "If set, the McStreamy Attribute to which this Alert applies.",
                    "type": "string"
                },
                "auditSource": {
                    "description": "audit source of this alert info",
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_OPS_SERVER",
                        "SOURCE_MR_AIRINGS",
                        "SOURCE_GRACENOTE_SPORTS_PARSER",
                        "SOURCE_HUMAN",
                        "SOURCE_SCHEDULE_PROCESSOR",
                        "SOURCE_BACKLOT_SERVER",
                        "SOURCE_TMS_PROGRAM_PROCESSOR",
                        "SOURCE_TMS_IMAGE_PROCESSOR",
                        "SOURCE_TMS_PERSON_PROCESSOR",
                        "SOURCE_TMS_SHOW_PROCESSOR",
                        "SOURCE_TMS_TEAM_PROCESSOR",
                        "SOURCE_VALIDATE_SCHEDULE_PROCESSOR",
                        "SOURCE_KG_LEAGUE_PROCESSOR",
                        "SOURCE_KG_SPORTS_PARTICIPANT_PROCESSOR",
                        "SOURCE_KG_SPORTS_EVENT_PROCESSOR",
                        "SOURCE_KG_LEAGUE_SPORTS_EVENTS_PROCESSOR",
                        "SOURCE_KG_TEAM_SPORTS_EVENTS_PROCESSOR",
                        "SOURCE_KG_PERSON_PROCESSOR",
                        "SOURCE_MANUAL_LEAGUE_PROCESSOR",
                        "SOURCE_TMS_TEAM_UPDATER",
                        "SOURCE_TMS_SCHEDULE_WATCHER",
                        "SOURCE_TMS_SHOWS_UPDATER",
                        "SOURCE_TMS_IMAGES_UPDATER",
                        "SOURCE_TMS_PROGRAMS_UPDATER",
                        "SOURCE_TMS_PROGRAM_REFRESHER",
                        "SOURCE_AIRING_PUBLISHER",
                        "SOURCE_BLACKOUT_RULES_PUBLISHER",
                        "SOURCE_BLACKOUT_RULES_STATION_PUBLISHER",
                        "SOURCE_DVRINIT_PUBLISHER",
                        "SOURCE_DVRSCHEDULE_PUBLISHER",
                        "SOURCE_EPISODE_PUBLISHER",
                        "SOURCE_EVENT_PUBLISHER",
                        "SOURCE_LIVE_BROADCAST_PUBLISHER",
                        "SOURCE_MOVIE_PUBLISHER",
                        "SOURCE_NETWORK_PUBLISHER",
                        "SOURCE_PERSON_PUBLISHER",
                        "SOURCE_PROGRAM_PUBLISHER",
                        "SOURCE_SHOW_PUBLISHER",
                        "SOURCE_STATION_PUBLISHER",
                        "SOURCE_VOD_DELIVERY_PUBLISHER",
                        "SOURCE_YTSERIES_PUBLISHER",
                        "SOURCE_PREFETCH_DVR_USERS_PROCESSOR",
                        "SOURCE_DVR_LIVE_EXTENSION_PROCESSOR",
                        "SOURCE_TVOD_CATALOG",
                        "SOURCE_CMS_API_SERVER",
                        "SOURCE_CMS_ACTION_SERVICES",
                        "SOURCE_CMS_DEV_RESETTER",
                        "SOURCE_DVR_MASTER",
                        "SOURCE_POLICY_ADMIN",
                        "SOURCE_PCC_SERVER",
                        "SOURCE_SCTE224_SERVER",
                        "SOURCE_SCTE35_SERVER",
                        "SOURCE_OPS_BPARSER",
                        "SOURCE_OPS_SYMPHONY",
                        "SOURCE_WHISPER_SERVER",
                        "SOURCE_URSA_MAJOR",
                        "SOURCE_STREAM_PROBER",
                        "SOURCE_TMS_SCHEDULE_GAP_FIXER",
                        "SOURCE_SLURP",
                        "SOURCE_OPS_INGESTOR",
                        "SOURCE_OPS_WEB_TOOL",
                        "SOURCE_LIVE_AGENT",
                        "SOURCE_WON_KG_ADAPTER",
                        "SOURCE_MCSTREAMY",
                        "SOURCE_SPORT_LEAGUE_EVENT_SPREADSHEET_READER",
                        "SOURCE_TMS",
                        "SOURCE_UMC",
                        "SOURCE_NUCLEUS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors/kg",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors/manual",
                        "The binary lives in /video/youtube/tvfilm/unplugged/platform\n/backlot/updater/.",
                        "binary @ video/youtube/tvfilm/unplugged/platform/backlot/tools",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/tools/tms_xml_watcher",
                        "",
                        "",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/backlot/tools/tms_program_refresher",
                        "binary @\nvideo/youtube/tvfilm/unplugged/publisher",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "DVR related bt processors.\nbinary dvr_init_worker @\nvideo/youtube/tvfilm/unplugged/publisher/processors",
                        "",
                        "binary@\nvideo/youtube/tvfilm/tvod/catalog/batch",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/api_server",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/actions",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/tools/cms_dev_resetter",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/dvr_master:dvr_master",
                        "Source for policies created/updated/deleted using blackouts v2 admin api.",
                        "Source for policies creating using PCC API.\nbinary @\njava/com/google/video/youtube/tvfilm/unplugged/linear/pcc:PccServer",
                        "Source for policies created using SCTE224.\nbinary @\njava/com/google/video/youtube/tvfilm/unplugged/linear/pcc:Scte224Server",
                        "binary @\nvideo/youtube/tvfilm/unplugged/linear/scte35:server",
                        "Ops team blackouts parser, See go/bparser",
                        "Ops team Symphony workflows. See go/symphony",
                        "Whisper server, video/youtube/tvfilm/unplugged/linear/whisper\nSee go/part-time-station.",
                        "Ursa major server.",
                        "Stream prober.",
                        "Schedule gap fixer",
                        "Slurp server\nvideo/youtube/tvfilm/unplugged/linear/slurp",
                        "Ops team blackouts ingestor, see go/ytspe-blackouts-ingestor",
                        "Ops Web Tool (Truman)",
                        "YT Live Agent (usually via Stream Prober on behalf of Live Agent).",
                        "Won Kg Adapter",
                        "McStreamy monitoring service",
                        "Sport league and events spreadsheet reader",
                        "TMS Schedule source.",
                        "UMC",
                        "Nucleus, Linear TV Team data portal."
                    ],
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "firedAt": {
                    "description": "Time at which this Alert fired as per AlertManager; distinct from the first\ntime of occurrence as reported by the underlying monitoring system.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Alert labels, as per the AlertManager API.",
                    "type": "object"
                },
                "message": {
                    "description": "Alert message and details.",
                    "type": "string"
                },
                "name": {
                    "description": "Name and source of the Alert.",
                    "type": "string"
                },
                "severity": {
                    "description": "severity of this alert info",
                    "enum": [
                        "SEVERITY_UNKNOWN",
                        "SEVERITY_OUTAGE",
                        "SEVERITY_NONREDUNDANT",
                        "SEVERITY_DEGRADED",
                        "SEVERITY_NOTICE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "url": {
                    "description": "URLs attached to the Alert, typically as HTML.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AlertList": {
            "id": "AlertList",
            "properties": {
                "alerts": {
                    "items": {
                        "$ref": "AlertInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AllowedTags": {
            "description": "Restricts the tags on an entity.",
            "id": "AllowedTags",
            "properties": {
                "anyTagMatches": {
                    "description": "If true tags are or'd together instead of and'd",
                    "type": "boolean"
                },
                "tags": {
                    "description": "Returns content matching any tag in this list.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Athlete": {
            "description": "Next tag: 11",
            "id": "Athlete",
            "properties": {
                "entity": {
                    "$ref": "EntityEntity"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "entity ID that will be populated in addition to entity.id field",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "IdSet."
                },
                "info": {
                    "$ref": "AthleteData",
                    "description": "Extra information about the athlete."
                },
                "teams": {
                    "$ref": "AthleteTeams",
                    "description": "Current and previous teams the athlete plays/played for or coaches/coached."
                }
            },
            "type": "object"
        },
        "AthleteData": {
            "id": "AthleteData",
            "properties": {
                "education": {
                    "description": "The athlete's education.",
                    "items": {
                        "$ref": "Education"
                    },
                    "type": "array"
                },
                "heightMeters": {
                    "description": "The athlete's height in meters.",
                    "format": "float",
                    "type": "number"
                },
                "nationality": {
                    "description": "Nationality(-ies) that the athlete has.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "placeOfBirth": {
                    "$ref": "EntityEntity",
                    "description": "The athlete's place of birth."
                },
                "socialProfiles": {
                    "description": "Social Profiles for the athlete.",
                    "items": {
                        "$ref": "SocialProfile"
                    },
                    "type": "array"
                },
                "weightKgs": {
                    "description": "The athlete's weight in kilograms.",
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "AthleteTeamData": {
            "id": "AthleteTeamData",
            "properties": {
                "dateSpanMember": {
                    "$ref": "DateSpan",
                    "description": "When was the athlete a member of this team."
                },
                "number": {
                    "description": "The athlete's number (e.g., jersey number) within the team.",
                    "type": "string"
                },
                "relationshipType": {
                    "description": "Athlete's relationship type to this team.",
                    "enum": [
                        "RELATIONSHIP_TYPE_UNKNOWN",
                        "RELATIONSHIP_TYPE_PLAYER",
                        "RELATIONSHIP_TYPE_COACH"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "roles": {
                    "description": "The athlete's role within the team.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "status": {
                    "$ref": "EntityEntity",
                    "description": "Athlete's status. E.g., Active, Suspended, Retired etc."
                },
                "team": {
                    "$ref": "EntityEntity",
                    "description": "The team that the athlete belongs/used to belong to."
                }
            },
            "type": "object"
        },
        "AthleteTeams": {
            "id": "AthleteTeams",
            "properties": {
                "coachTeams": {
                    "description": "Current and previous teams the coach coaches/coached.",
                    "items": {
                        "$ref": "AthleteTeamData"
                    },
                    "type": "array"
                },
                "mostRecentTeam": {
                    "$ref": "AthleteTeamData",
                    "description": "Current/last team that this person plays/played/coaches/coached."
                },
                "playerTeams": {
                    "description": "Current and previous teams the athlete plays/played.",
                    "items": {
                        "$ref": "AthleteTeamData"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AttributeValue": {
            "description": "Support updating multiple attributes in a single request.",
            "id": "AttributeValue",
            "properties": {
                "attribute": {
                    "description": "Attribute to update, which must begin with '/youtube/unplugged/catcom/'.",
                    "type": "string"
                },
                "value": {
                    "description": "Value to which to set the attribute.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AuditSource": {
            "id": "AuditSource",
            "properties": {
                "context": {
                    "description": "Context from which this operation was made",
                    "type": "string"
                },
                "gaiaId": {
                    "format": "int64",
                    "type": "string"
                },
                "peerRole": {
                    "type": "string"
                },
                "peerUsername": {
                    "type": "string"
                },
                "reason": {
                    "description": "Human readable reason/explanation for operation",
                    "type": "string"
                },
                "skynetHostname": {
                    "type": "string"
                },
                "sourceId": {
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_OPS_SERVER",
                        "SOURCE_MR_AIRINGS",
                        "SOURCE_GRACENOTE_SPORTS_PARSER",
                        "SOURCE_HUMAN",
                        "SOURCE_SCHEDULE_PROCESSOR",
                        "SOURCE_BACKLOT_SERVER",
                        "SOURCE_TMS_PROGRAM_PROCESSOR",
                        "SOURCE_TMS_IMAGE_PROCESSOR",
                        "SOURCE_TMS_PERSON_PROCESSOR",
                        "SOURCE_TMS_SHOW_PROCESSOR",
                        "SOURCE_TMS_TEAM_PROCESSOR",
                        "SOURCE_VALIDATE_SCHEDULE_PROCESSOR",
                        "SOURCE_KG_LEAGUE_PROCESSOR",
                        "SOURCE_KG_SPORTS_PARTICIPANT_PROCESSOR",
                        "SOURCE_KG_SPORTS_EVENT_PROCESSOR",
                        "SOURCE_KG_LEAGUE_SPORTS_EVENTS_PROCESSOR",
                        "SOURCE_KG_TEAM_SPORTS_EVENTS_PROCESSOR",
                        "SOURCE_KG_PERSON_PROCESSOR",
                        "SOURCE_MANUAL_LEAGUE_PROCESSOR",
                        "SOURCE_TMS_TEAM_UPDATER",
                        "SOURCE_TMS_SCHEDULE_WATCHER",
                        "SOURCE_TMS_SHOWS_UPDATER",
                        "SOURCE_TMS_IMAGES_UPDATER",
                        "SOURCE_TMS_PROGRAMS_UPDATER",
                        "SOURCE_TMS_PROGRAM_REFRESHER",
                        "SOURCE_AIRING_PUBLISHER",
                        "SOURCE_BLACKOUT_RULES_PUBLISHER",
                        "SOURCE_BLACKOUT_RULES_STATION_PUBLISHER",
                        "SOURCE_DVRINIT_PUBLISHER",
                        "SOURCE_DVRSCHEDULE_PUBLISHER",
                        "SOURCE_EPISODE_PUBLISHER",
                        "SOURCE_EVENT_PUBLISHER",
                        "SOURCE_LIVE_BROADCAST_PUBLISHER",
                        "SOURCE_MOVIE_PUBLISHER",
                        "SOURCE_NETWORK_PUBLISHER",
                        "SOURCE_PERSON_PUBLISHER",
                        "SOURCE_PROGRAM_PUBLISHER",
                        "SOURCE_SHOW_PUBLISHER",
                        "SOURCE_STATION_PUBLISHER",
                        "SOURCE_VOD_DELIVERY_PUBLISHER",
                        "SOURCE_YTSERIES_PUBLISHER",
                        "SOURCE_PREFETCH_DVR_USERS_PROCESSOR",
                        "SOURCE_DVR_LIVE_EXTENSION_PROCESSOR",
                        "SOURCE_TVOD_CATALOG",
                        "SOURCE_CMS_API_SERVER",
                        "SOURCE_CMS_ACTION_SERVICES",
                        "SOURCE_CMS_DEV_RESETTER",
                        "SOURCE_DVR_MASTER",
                        "SOURCE_POLICY_ADMIN",
                        "SOURCE_PCC_SERVER",
                        "SOURCE_SCTE224_SERVER",
                        "SOURCE_SCTE35_SERVER",
                        "SOURCE_OPS_BPARSER",
                        "SOURCE_OPS_SYMPHONY",
                        "SOURCE_WHISPER_SERVER",
                        "SOURCE_URSA_MAJOR",
                        "SOURCE_STREAM_PROBER",
                        "SOURCE_TMS_SCHEDULE_GAP_FIXER",
                        "SOURCE_SLURP",
                        "SOURCE_OPS_INGESTOR",
                        "SOURCE_OPS_WEB_TOOL",
                        "SOURCE_LIVE_AGENT",
                        "SOURCE_WON_KG_ADAPTER",
                        "SOURCE_MCSTREAMY",
                        "SOURCE_SPORT_LEAGUE_EVENT_SPREADSHEET_READER",
                        "SOURCE_TMS",
                        "SOURCE_UMC",
                        "SOURCE_NUCLEUS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors/kg",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors/manual",
                        "The binary lives in /video/youtube/tvfilm/unplugged/platform\n/backlot/updater/.",
                        "binary @ video/youtube/tvfilm/unplugged/platform/backlot/tools",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/tools/tms_xml_watcher",
                        "",
                        "",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/backlot/tools/tms_program_refresher",
                        "binary @\nvideo/youtube/tvfilm/unplugged/publisher",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "DVR related bt processors.\nbinary dvr_init_worker @\nvideo/youtube/tvfilm/unplugged/publisher/processors",
                        "",
                        "binary@\nvideo/youtube/tvfilm/tvod/catalog/batch",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/api_server",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/actions",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/tools/cms_dev_resetter",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/dvr_master:dvr_master",
                        "Source for policies created/updated/deleted using blackouts v2 admin api.",
                        "Source for policies creating using PCC API.\nbinary @\njava/com/google/video/youtube/tvfilm/unplugged/linear/pcc:PccServer",
                        "Source for policies created using SCTE224.\nbinary @\njava/com/google/video/youtube/tvfilm/unplugged/linear/pcc:Scte224Server",
                        "binary @\nvideo/youtube/tvfilm/unplugged/linear/scte35:server",
                        "Ops team blackouts parser, See go/bparser",
                        "Ops team Symphony workflows. See go/symphony",
                        "Whisper server, video/youtube/tvfilm/unplugged/linear/whisper\nSee go/part-time-station.",
                        "Ursa major server.",
                        "Stream prober.",
                        "Schedule gap fixer",
                        "Slurp server\nvideo/youtube/tvfilm/unplugged/linear/slurp",
                        "Ops team blackouts ingestor, see go/ytspe-blackouts-ingestor",
                        "Ops Web Tool (Truman)",
                        "YT Live Agent (usually via Stream Prober on behalf of Live Agent).",
                        "Won Kg Adapter",
                        "McStreamy monitoring service",
                        "Sport league and events spreadsheet reader",
                        "TMS Schedule source.",
                        "UMC",
                        "Nucleus, Linear TV Team data portal."
                    ],
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AvailabilityArea": {
            "description": "Defines the restrictions on where something is, or is not, available.\nIt is an error for the same location to be in both the blacklist and\nthe whitelist. If a location matches both the zip and the dma (a \"perfect\"\nmatch) in the black list, then the location is blacklisted and the result\nis NOT_AVAILABLE_HERE. If no location in either list is a \"perfect\" match,\nthen a match by zip code takes precedence over a match by DMA. Finally, if\nneither zip nor DMA can match, the default availability is applied. This\ncomplexity is a tradeoff between the logic for interpreting and the ability\nto specify arbitrary availability without explicitly listing every zip code.\n\nNext tag: 4",
            "id": "AvailabilityArea",
            "properties": {
                "blacklistedLocations": {
                    "description": "Do not use in content nodes, speak to kylesalasko@.",
                    "items": {
                        "$ref": "Location"
                    },
                    "type": "array"
                },
                "default": {
                    "enum": [
                        "UNKNOWN",
                        "NOT_AVAILABLE_HERE",
                        "AVAILABLE_HERE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Do not use in content nodes, speak to kylesalasko@."
                    ],
                    "type": "string"
                },
                "whitelistedLocations": {
                    "items": {
                        "$ref": "Location"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AvailabilityDerivedSignal": {
            "description": "Signals derived from EntityAvailability.",
            "id": "AvailabilityDerivedSignal",
            "properties": {
                "signalPerContentNode": {
                    "items": {
                        "$ref": "AvailabilitySignal"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AvailabilityLabel": {
            "id": "AvailabilityLabel",
            "properties": {
                "gaiaGroupIds": {
                    "description": "Set of gaia-groups which give access to the given label.",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                },
                "label": {
                    "enum": [
                        "UNKNOWN",
                        "FISHFOOD",
                        "DOGFOOD",
                        "LAUNCHED",
                        "OPS",
                        "TEST",
                        "TEST_TURNDOWN"
                    ],
                    "enumDescriptions": [
                        "UNKNOWN / Not available anywhere.",
                        "Available for fishfooders.",
                        "Available for dogfooders.",
                        "Launched for everyone.",
                        "Launched for the ops team.",
                        "Just for testing.",
                        "For turndown testing."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AvailabilityPerContentNode": {
            "description": "NOTE: For network channels only content_node.yt_external_id is filled in.",
            "id": "AvailabilityPerContentNode",
            "properties": {
                "airingAvailability": {
                    "description": "Time ranges during which the entity has Airing content under the content\nnode.",
                    "items": {
                        "$ref": "VideoWithAvailabilityDetails"
                    },
                    "type": "array"
                },
                "contentNode": {
                    "$ref": "ContentNode"
                },
                "svodAvailability": {
                    "description": "Time ranges during which the entity has SVOD content under the content\nnode.",
                    "items": {
                        "$ref": "VideoWithAvailabilityDetails"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AvailabilitySignal": {
            "id": "AvailabilitySignal",
            "properties": {
                "contentNode": {
                    "$ref": "ContentNode"
                },
                "latestAvailableVodVideos": {
                    "description": "Contains vod videos whose available start times fall between\n(current_time - 2 weeks, current_time + 2 weeks). Lookback and\nlookforward window are specified in commandline flags. These are used to\nfind out newly available vod content.\ne.g. to find shows that have new available episodes in the past 7 days.",
                    "items": {
                        "$ref": "VideoWithAvailabilityDetails"
                    },
                    "type": "array"
                },
                "seasonInfo": {
                    "description": "Full and premiere season episode info.",
                    "items": {
                        "$ref": "SeasonInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetIncidentsResponse": {
            "id": "BatchGetIncidentsResponse",
            "properties": {
                "incidents": {
                    "items": {
                        "$ref": "YtvIncident"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetMcStreamyAttributesRequest": {
            "id": "BatchGetMcStreamyAttributesRequest",
            "properties": {
                "attributeNames": {
                    "description": "Attributes to obtain, including any fields, like:\n   /youtube/unplugged/linear/ursa_major/copy_enabled{copy_id=0}\n   /youtube/unplugged/linear/sniff/tek_sentry_alert_active",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stationIds": {
                    "description": "Station IDs for which to obtain Attributes, like \"STxxxxx=\".",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetMcStreamyAttributesResponse": {
            "id": "BatchGetMcStreamyAttributesResponse",
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "YtvMcStreamyAttributes"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetSchedulesRequest": {
            "description": "Request message for the OpsScheduleService.BatchGetSchedules RPC",
            "id": "BatchGetSchedulesRequest",
            "properties": {
                "requests": {
                    "description": "Requests of get schedule of each station.",
                    "items": {
                        "$ref": "GetScheduleRequest"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetSchedulesResponse": {
            "description": "Response message for the OpsScheduleService.BatchGetSchedules RPC",
            "id": "BatchGetSchedulesResponse",
            "properties": {
                "responses": {
                    "description": "The returned schedules or error string.",
                    "items": {
                        "$ref": "ScheduleResponse"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetStationsAcquisitionStreamsInfoRequest": {
            "id": "BatchGetStationsAcquisitionStreamsInfoRequest",
            "properties": {
                "stationIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetStationsAcquisitionStreamsInfoResponse": {
            "id": "BatchGetStationsAcquisitionStreamsInfoResponse",
            "properties": {
                "stationsAcquisitionStreamsInfo": {
                    "items": {
                        "$ref": "YtvStationAcquisitionStreamsInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetStationsResponse": {
            "description": "Response message for the  YouTubeTVOpsService.BatchGetStation RPC",
            "id": "BatchGetStationsResponse",
            "properties": {
                "stations": {
                    "description": "The returned list of stations.",
                    "items": {
                        "$ref": "YtvStation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetStationsScheduleStatusRequest": {
            "id": "BatchGetStationsScheduleStatusRequest",
            "properties": {
                "stationIds": {
                    "description": "id of stations.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchGetStationsScheduleStatusResponse": {
            "id": "BatchGetStationsScheduleStatusResponse",
            "properties": {
                "stationScheduleStatus": {
                    "items": {
                        "$ref": "StationScheduleStatus"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BlackoutKey": {
            "description": "Proto used to define the externally provided ids which are received\nin the blackout feeds from various providers.",
            "id": "BlackoutKey",
            "properties": {
                "api": {
                    "enum": [
                        "API_UNKNOWN",
                        "API_SCTE_224",
                        "API_VENDOR_API"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "vendorId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BlackoutLocations": {
            "description": "Type to capture info about an area related to blackouts",
            "id": "BlackoutLocations",
            "properties": {
                "areaIds": {
                    "description": "area ids that define this location",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "zipCodes": {
                    "description": "zip codes that define this location",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BonesIdSet": {
            "description": "Next id: 13",
            "id": "BonesIdSet",
            "properties": {
                "bonesId": {
                    "description": "The main id of an entity.\nFor example for shows is series_id, for program is program_id, etc.\nAirings don't come with a defined id, so we create one by concatenating\nsomething of the form \"<program_id>_<station_id>_<start_time>_<end_time>\".",
                    "type": "string"
                },
                "personId": {
                    "type": "string"
                },
                "programId": {
                    "type": "string"
                },
                "programRootId": {
                    "type": "string"
                },
                "seasonId": {
                    "type": "string"
                },
                "seasonRootId": {
                    "type": "string"
                },
                "seriesId": {
                    "type": "string"
                },
                "seriesRootId": {
                    "type": "string"
                },
                "sportsTeamId": {
                    "type": "string"
                },
                "stationCallSign": {
                    "type": "string"
                },
                "stationId": {
                    "type": "string"
                },
                "stationRootId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BonesSportsDetails": {
            "description": "Next tag: 7",
            "id": "BonesSportsDetails",
            "properties": {
                "gameDate": {
                    "description": "The date of the game in yyyy-mm-dd format.",
                    "type": "string"
                },
                "seasonType": {
                    "description": "Season type",
                    "enum": [
                        "SPORTS_SEASON_UNKNOWN",
                        "SPORTS_SEASON_TYPE_PRE",
                        "SPORTS_SEASON_TYPE_REG",
                        "SPORTS_SEASON_TYPE_POST"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "seasonYear": {
                    "description": "The year of the season. Eg. 2012 or 2012-2013",
                    "type": "string"
                },
                "sportsTeamDetails": {
                    "description": "List of details for teams in this program",
                    "items": {
                        "$ref": "TeamDetails"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BoundIngestion": {
            "description": "Broadcast Ingestion ids and related data.\nRequired. This field is critical for Nielson viewing report.",
            "id": "BoundIngestion",
            "properties": {
                "broadcastIngestionId": {
                    "description": "YouTube Video Stream Lookup Id/Ingestion id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Boxscore": {
            "description": "Structured event scores / stats. Look at\nhttps://en.wikipedia.org/wiki/Box_score",
            "id": "Boxscore",
            "properties": {
                "away": {
                    "$ref": "TeamBoxScore"
                },
                "home": {
                    "$ref": "TeamBoxScore"
                }
            },
            "type": "object"
        },
        "BroadcastDetails": {
            "description": "Details of broadcast",
            "id": "BroadcastDetails",
            "properties": {
                "broadcastEndTimeSec": {
                    "description": "Time in sec when the broadcast ended. This is only set when the\nStation Publisher deletes an active broadcast. This time may overlap with\nthe start of the next broadcast in order to allow DVR to be completed.",
                    "format": "int64",
                    "type": "string"
                },
                "broadcastStartTimeSec": {
                    "description": "Broadcast scheduled start time in sec for the assigned livestream.",
                    "format": "int64",
                    "type": "string"
                },
                "broadcastVideoId": {
                    "description": "YouTube Video Id where the live feed to station is being broadcasted.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BroadcastUpdate": {
            "description": "Next tag: 23",
            "id": "BroadcastUpdate",
            "properties": {
                "activeState": {
                    "description": "Current broadcast state.",
                    "enum": [
                        "UPDATE_STATE_UNKNOWN",
                        "UPDATE_STATE_NEW_BROADCAST",
                        "UPDATE_STATE_PUBLISH_BROADCAST",
                        "UPDATE_STATE_USER_REDIRECTION_TO_NEW_BROADCAST",
                        "UPDATE_STATE_DELETE_BROADCAST"
                    ],
                    "enumDescriptions": [
                        "Default state or state after deletion.",
                        "State for creation of new broadcast.",
                        "State for publishing recently created broadcast.",
                        "State for Fresca update to redirect users to new broadcast.",
                        "State for deletion of broadcast."
                    ],
                    "type": "string"
                },
                "broadcastContentId": {
                    "description": "Content id for creation of new broadcast, which is the version of video id\nstarting from 0.",
                    "type": "string"
                },
                "broadcastScheduledStartTimeSec": {
                    "format": "int64",
                    "type": "string"
                },
                "broadcastVideoId": {
                    "description": "Video id for creation of new broadcast.",
                    "type": "string"
                },
                "deleteBroadcastCompletionTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "deleteBroadcastTriggerTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "newBroadcastCompletionTime": {
                    "description": "Fields below keep the record of each state is completed. The time\ndifference between trigger time and completion time doesn't represent\ntime spent on state transition. It also includes big table update latency.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "newBroadcastTriggerTime": {
                    "description": "Fields below keep the record of each state is triggered.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "nextState": {
                    "description": "Next broadcast state.",
                    "enum": [
                        "UPDATE_STATE_UNKNOWN",
                        "UPDATE_STATE_NEW_BROADCAST",
                        "UPDATE_STATE_PUBLISH_BROADCAST",
                        "UPDATE_STATE_USER_REDIRECTION_TO_NEW_BROADCAST",
                        "UPDATE_STATE_DELETE_BROADCAST"
                    ],
                    "enumDescriptions": [
                        "Default state or state after deletion.",
                        "State for creation of new broadcast.",
                        "State for publishing recently created broadcast.",
                        "State for Fresca update to redirect users to new broadcast.",
                        "State for deletion of broadcast."
                    ],
                    "type": "string"
                },
                "nextTriggerTime": {
                    "description": "The time when next state is going to trigger.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "oldBroadcastVideoId": {
                    "description": "Video id for old broadcast",
                    "type": "string"
                },
                "overrideDeleteBroadcastTriggerTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "overrideNewBroadcastTriggerTime": {
                    "description": "Fields below are records of Stubby api call to override trigger time of\neach state. Only valid trigger time will override successfully, which allow\n(1) previous state to finish and (2) user redirect to new broadcast(~5min).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "overridePublishBroadcastTriggerTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "overrideUserRedirectionTriggerTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "publishBroadcastCompletionTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "publishBroadcastTriggerTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "restartingState": {
                    "enum": [
                        "RESTARTING_STATE_UNKNOWN",
                        "RESTARTING_STATE_RUNNING",
                        "RESTARTING_STATE_COMPLETE",
                        "RESTARTING_STATE_ABORTED",
                        "RESTARTING_STATE_MANUALLY_TERMINATED"
                    ],
                    "enumDescriptions": [
                        "No broadcast stream restarting scheduled.",
                        "Broadcast stream restarting is working in progress.",
                        "Broadcast stream restarting is complete.",
                        "Broadcast stream restarting is aborted because of fatal error, e.g.,\nbroadcast has been terminated by admin.",
                        "Broadcast stream restarting is manually terminated."
                    ],
                    "type": "string"
                },
                "streamLookupId": {
                    "description": "Information for updating historic_broadcast_details.",
                    "type": "string"
                },
                "triggerTime": {
                    "description": "The time when active/current state is triggered.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "userRedirectionCompletionTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "userRedirectionTriggerTime": {
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CancelStationsStreamSourceOverrideRequest": {
            "id": "CancelStationsStreamSourceOverrideRequest",
            "properties": {
                "userStationIds": {
                    "description": "id of stations that need to be cancelled override",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CancelStationsStreamSourceOverrideResponse": {
            "id": "CancelStationsStreamSourceOverrideResponse",
            "properties": {
                "failedStations": {
                    "items": {
                        "$ref": "FailedStationInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ChannelSignals": {
            "description": "This is the proto published to sstable (UST laelaps) for serving p13n\n(scoring feature extraction, VSL, unplugged profile generation etc.).\nTypically the signals stored here are derived from other columns in UST.\nNext tag: 32",
            "id": "ChannelSignals",
            "properties": {
                "awayTeamChannelId": {
                    "type": "string"
                },
                "broadcastVideoId": {
                    "description": "The broadcast video id for Station.",
                    "type": "string"
                },
                "channelType": {
                    "enum": [
                        "UNKNOWN",
                        "SHOW",
                        "PROGRAM",
                        "AIRING",
                        "STATION",
                        "NETWORK",
                        "SEASON",
                        "PERSON",
                        "SPORTS_TEAM",
                        "MOVIE",
                        "EVENT",
                        "EPISODE",
                        "SPORTS_LEAGUE",
                        "SPORTS_EVENT",
                        "MICROGENRE",
                        "SCHEDULE",
                        "POP",
                        "MARKET",
                        "PACKAGE",
                        "INGESTION_STREAM",
                        "BROADCAST_STREAM",
                        "ACQUISITION_STREAM",
                        "SPORTS_ATHLETE",
                        "LEMONAID_METRIC"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Broadcast id, e.g., ogfYd705cRs.",
                        "<Multicast IP:Port:Program Number> of an acquistion stream.",
                        "",
                        "A lemonaid metrics is of the form <stream id>/<metric>/<cell>:<task id>\nExample: yt-tv:1234/agent/health/cb:1"
                    ],
                    "type": "string"
                },
                "chips": {
                    "description": "Chips associated with this Unplugged channel.",
                    "items": {
                        "$ref": "Chip"
                    },
                    "type": "array"
                },
                "demographicAffinities": {
                    "items": {
                        "$ref": "DemographicAffinity"
                    },
                    "type": "array"
                },
                "detailsLinkLeagueChannelId": {
                    "description": "The details page that displayed this league. Used for flexible sports\ngrouping. See youtube.unplugged.sports.LeagueInfo for details.",
                    "type": "string"
                },
                "embedding": {
                    "$ref": "Embedding"
                },
                "epgCommonalityMap": {
                    "additionalProperties": {
                        "$ref": "EpgCommonality"
                    },
                    "description": "Station channels only. Key is time bucket hour of week (0-167), with 0\nbeing Sunday 0AM-1AM.",
                    "type": "object"
                },
                "episodesDisplayType": {
                    "description": "Show channels only.",
                    "enum": [
                        "EPISODES_DISPLAY_TYPE_UNKNOWN",
                        "EPISODES_DISPLAY_TYPE_SEASON_BASED",
                        "EPISODES_DISPLAY_TYPE_MONTHLY_BASED",
                        "EPISODES_DISPLAY_TYPE_WEEKLY_BASED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Standard season based shows, displaying episodes by season.",
                        "Daily shows with new airings 4-5 times/week, displaying episodes by month.",
                        "Daily shows with new airings > 5 times/week, displaying episodes by week."
                    ],
                    "type": "string"
                },
                "episodesOriginalAiringTimeSecs": {
                    "description": "Show channels only. Past 28 and future 14 premier timestamps generated for\nepisodes of the season based show. Sorted by descending order.",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                },
                "homeTeamChannelId": {
                    "description": "Channel ids for the associated teams (for Events.)",
                    "type": "string"
                },
                "isPaidProgramming": {
                    "type": "boolean"
                },
                "isSportsEvent": {
                    "description": "Whether the channel is a sports event (game).",
                    "type": "boolean"
                },
                "isYoutubeContent": {
                    "description": "Whether the channel is YT/YTO.",
                    "type": "boolean"
                },
                "language": {
                    "description": "The language code of this channel (for Show/Movie.)\nExamples: \"en\", \"es\", \"fr\". Uses the ISO 639 standard.",
                    "type": "string"
                },
                "leagueChannelIds": {
                    "description": "Channel ids for the associated leagues (for Teams and Events.)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "microgenreChannelIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "microgenres": {
                    "description": "Microgenres related to the entity.",
                    "items": {
                        "$ref": "EntityMicrogenre"
                    },
                    "type": "array"
                },
                "nonSeasonalShowFrequencyInLast7Days": {
                    "description": "Show channels only. Frequency in last 7 days generated for non season based\nShows.",
                    "format": "int32",
                    "type": "integer"
                },
                "originalAirTimeSecs": {
                    "description": "Only exists for movie and event channels.",
                    "format": "int64",
                    "type": "string"
                },
                "primaryNetworkChannelId": {
                    "description": "Primary network for Show/Movie/Event.",
                    "type": "string"
                },
                "rankingSignalMap": {
                    "additionalProperties": {
                        "format": "float",
                        "type": "number"
                    },
                    "description": "Global signals, such as popularity, trendiness, etc.\nKey is Signal.Type enum value, value is the signal score.",
                    "type": "object"
                },
                "rating": {
                    "description": "Rating and recommended_audience  are used to show appropriately rated\nrecommendations. (see go/upg-content-safety)",
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "recommendedAudience": {
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "roundType": {
                    "description": "Sports event channels only.",
                    "enum": [
                        "ROUND_TYPE_UNKNOWN",
                        "ROUND_TYPE_FINALS",
                        "ROUND_TYPE_SEMI_FINALS",
                        "ROUND_TYPE_QUARTER_FINALS",
                        "ROUND_TYPE_ROUND_OF_16",
                        "ROUND_TYPE_ROUND_OF_32",
                        "ROUND_TYPE_ROUND_OF_64",
                        "ROUND_TYPE_ROUND_OF_128",
                        "ROUND_TYPE_ROUND_OF_256",
                        "ROUND_TYPE_GROUP_STAGE",
                        "ROUND_TYPE_FIRST_GROUP_STAGE",
                        "ROUND_TYPE_SECOND_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_FIRST_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_SECOND_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_FINALS_GROUP_STAGE",
                        "ROUND_TYPE_THIRD_PLACE",
                        "ROUND_TYPE_FIFTH_PLACE",
                        "ROUND_TYPE_SEVENTH_PLACE",
                        "ROUND_TYPE_NINTH_PLACE",
                        "ROUND_TYPE_ELEVENTH_PLACE",
                        "ROUND_TYPE_THIRTEENTH_PLACE",
                        "ROUND_TYPE_FIFTEENTH_PLACE",
                        "ROUND_TYPE_SEVENTEENTH_PLACE",
                        "ROUND_TYPE_NINETEENTH_PLACE",
                        "ROUND_TYPE_TWENTY_FIRST_PLACE",
                        "ROUND_TYPE_TWENTY_THIRD_PLACE",
                        "ROUND_TYPE_PRESEASON",
                        "ROUND_TYPE_REGULAR_SEASON",
                        "ROUND_TYPE_POST_SEASON",
                        "ROUND_TYPE_RECLASSIFICATION",
                        "ROUND_TYPE_FRIENDLY",
                        "ROUND_TYPE_QUALIFIER",
                        "ROUND_TYPE_FIRST_ROUND",
                        "ROUND_TYPE_SECOND_ROUND",
                        "ROUND_TYPE_THIRD_ROUND",
                        "ROUND_TYPE_FOURTH_ROUND",
                        "ROUND_TYPE_FIFTH_ROUND",
                        "ROUND_TYPE_SIXTH_ROUND",
                        "ROUND_TYPE_SEVENTH_ROUND",
                        "ROUND_TYPE_EIGHTH_ROUND",
                        "ROUND_TYPE_FINAL_ROUND",
                        "ROUND_TYPE_SUPER_CUP",
                        "ROUND_TYPE_PRELIMINARY_ROUND",
                        "ROUND_TYPE_FIRST_PRELIMINARY_ROUND",
                        "ROUND_TYPE_SECOND_PRELIMINARY_ROUND",
                        "ROUND_TYPE_PRELIMINARY_FINALS",
                        "ROUND_TYPE_INTER_CONFED_PLAYOFF",
                        "ROUND_TYPE_FIRST_QUALIFYING_ROUND",
                        "ROUND_TYPE_SECOND_QUALIFYING_ROUND",
                        "ROUND_TYPE_THIRD_QUALIFYING_ROUND",
                        "ROUND_TYPE_FOURTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_FIFTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_SIXTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_SEVENTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_PLAYOFFS",
                        "ROUND_TYPE_FIRST_PLAYOFF_ROUND",
                        "ROUND_TYPE_SECOND_PLAYOFF_ROUND",
                        "ROUND_TYPE_CONFERENCE_FINALS",
                        "ROUND_TYPE_CONFERENCE_SEMI_FINALS",
                        "ROUND_TYPE_CONFERENCE_QUARTER_FINALS",
                        "ROUND_TYPE_CONFERENCE_SECOND_ROUND",
                        "ROUND_TYPE_CONFERENCE_FIRST_ROUND",
                        "ROUND_TYPE_CONFERENCE_TOURNAMENT",
                        "ROUND_TYPE_ALL_STAR",
                        "ROUND_TYPE_WILD_CARD",
                        "ROUND_TYPE_ROUND_ROBIN",
                        "ROUND_TYPE_TOURNAMENT",
                        "ROUND_TYPE_BOWLS",
                        "ROUND_TYPE_CHAMPIONSHIP",
                        "ROUND_TYPE_RELEGATION",
                        "ROUND_TYPE_OPENING_SEASON",
                        "ROUND_TYPE_OPENING_SEASON_FINALS",
                        "ROUND_TYPE_OPENING_SEASON_SEMI_FINALS",
                        "ROUND_TYPE_OPENING_SEASON_QUARTER_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON",
                        "ROUND_TYPE_CLOSING_SEASON_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON_SEMI_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON_QUARTER_FINALS",
                        "ROUND_TYPE_APERTURA",
                        "ROUND_TYPE_APERTURA_FINALS",
                        "ROUND_TYPE_APERTURA_SEMI_FINALS",
                        "ROUND_TYPE_APERTURA_QUARTER_FINALS",
                        "ROUND_TYPE_APERTURA_EIGHTH_FINALS",
                        "ROUND_TYPE_CLAUSURA",
                        "ROUND_TYPE_CLAUSURA_FINALS",
                        "ROUND_TYPE_CLAUSURA_SEMI_FINALS",
                        "ROUND_TYPE_CLAUSURA_QUARTER_FINALS",
                        "ROUND_TYPE_CLAUSURA_EIGHTH_FINALS",
                        "ROUND_TYPE_FIRST_PHASE",
                        "ROUND_TYPE_FIRST_PHASE_SEMI_FINAL",
                        "ROUND_TYPE_FIRST_PHASE_FINAL",
                        "ROUND_TYPE_SECOND_PHASE",
                        "ROUND_TYPE_SECOND_PHASE_SEMI_FINAL",
                        "ROUND_TYPE_SECOND_PHASE_FINAL",
                        "ROUND_TYPE_HEXAGONAL_FINAL",
                        "ROUND_TYPE_QUALIFICATION_ROUND",
                        "ROUND_TYPE_GRAND_FINAL",
                        "ROUND_TYPE_ELIMINATION_FINAL",
                        "ROUND_TYPE_INITIAL_MATCH",
                        "ROUND_TYPE_DECIDER_MATCH",
                        "ROUND_TYPE_WINNERS_MATCH",
                        "ROUND_TYPE_WINNERS_FINALS",
                        "ROUND_TYPE_WINNERS_SEMI_FINALS",
                        "ROUND_TYPE_WINNERS_QUARTER_FINALS",
                        "ROUND_TYPE_WINNERS_ROUND_OF_16",
                        "ROUND_TYPE_WINNERS_FIRST_ROUND",
                        "ROUND_TYPE_WINNERS_SECOND_ROUND",
                        "ROUND_TYPE_WINNERS_THIRD_ROUND",
                        "ROUND_TYPE_LOSERS_MATCH",
                        "ROUND_TYPE_LOSERS_FINALS",
                        "ROUND_TYPE_LOSERS_SEMI_FINALS",
                        "ROUND_TYPE_LOSERS_QUARTER_FINALS",
                        "ROUND_TYPE_LOSERS_ROUND_OF_16",
                        "ROUND_TYPE_LOSERS_FIRST_ROUND",
                        "ROUND_TYPE_LOSERS_SECOND_ROUND",
                        "ROUND_TYPE_LOSERS_THIRD_ROUND",
                        "ROUND_TYPE_REGIONAL_QUALIFIERS",
                        "ROUND_TYPE_MAIN_CARD",
                        "ROUND_TYPE_PRELIMINARY_CARD",
                        "ROUND_TYPE_EARLY_PRELIMINARY_CARD"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "A game for places 3,4.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Final round before another round to come.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "\"Conference\" in the MLB is American/National League, so CONFERENCE_FINALS\ncan mean the League Championship Series for those leagues. In the NCAA\nBasketball post-season, conferences have tournaments, so\nCONFERENCE_FINALS is the final of the conference tournament.",
                        "For MLB, CONFERENCE_SEMI_FINALS is the Division Series.",
                        "",
                        "",
                        "",
                        "In the NCAA basketball post-season, conferences have post season\ntournaments.",
                        "",
                        "Wild Card game or series.",
                        "",
                        "A special tournamnt, e.g., \"Afghanistan, Ireland and Scotland tour of\nUAE\".",
                        "In college football, the post-season games are conducted in bowls. For\nmore information, see: https://en.wikipedia.org/wiki/Bowl_game.",
                        "",
                        "",
                        "The concept of season split into two is very popular among latin american\nleagues see: https://en.wikipedia.org/wiki/Apertura_and_Clausura",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Phases are similar to rounds but mostly used in Brazilian leagues where\nrounds are normally used in cups.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Some tournaments (for example, it's often seen in eSports tournaments)\nare divided into two sets of brackets, the winners (W) bracket and losers\n(L) bracket. Typically the tournament starts with initial matches between\nall teams which are followed by winners matches and losers matches. The\nlosers of the winners matches and the winners of the losers matches\ncompete in decider matches which determine which teams return to the W\nbracket. Afterwards any team that losses a match in the W bracket\ncontinues playing in the L bracket (for more info:\nhttps://en.wikipedia.org/wiki/Double-elimination_tournament).",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Often used in League of Legends leagues. the regional qualifiers decide\nwhich teams go to the world championship.",
                        "Used in UFC and MMA events, where fights are divided into \"Main\"\n\"Preliminary\" and \"Early Preliminary\" fight cards, for more info \"\n\"https://en.wikipedia.org/wiki/List_of_UFC_events\".",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "sportsEventsOriginalAiringTimeSecs": {
                    "description": "Team and league channels only. Past 28 and future 14 premier timestamps\ngenerated for:\n* Games of the team belonging to a head league.\n* Games of a tail league.\nSorted by descending order.",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                },
                "tags": {
                    "items": {
                        "$ref": "EntityTag"
                    },
                    "type": "array"
                },
                "title": {
                    "$ref": "TranslationPack"
                },
                "topTeamDmas": {
                    "description": "Sports event channels only. DMAs where at least one team playing is\nconsidered a \"top\" team. Top teams are hardcoded teams that are popular in\nthe DMA, intuitively, the home team in the DMA should be a top team.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uniqueContentCandidatesSignals": {
                    "$ref": "UniqueContentCandidatesSignals",
                    "description": "Unique content candidates used for unique content selection."
                }
            },
            "type": "object"
        },
        "Chip": {
            "description": "A compact External View of a Chip.",
            "id": "Chip",
            "properties": {
                "chipType": {
                    "enum": [
                        "CHIP_TYPE_UNKNOWN",
                        "CHIP_TYPE_CONTENT_TYPE",
                        "CHIP_TYPE_GENRE",
                        "CHIP_TYPE_SUBGENRE",
                        "CHIP_TYPE_FILM_OR_TV_SERIES",
                        "CHIP_TYPE_FILM_STUDIO_OR_NETWORK",
                        "CHIP_TYPE_SETTING_FICTIONAL_UNIVERSE",
                        "CHIP_TYPE_FOR_AGES",
                        "CHIP_TYPE_CHARACTER",
                        "CHIP_TYPE_CAST",
                        "CHIP_TYPE_ACCOLADE",
                        "CHIP_TYPE_SPORTS_GENRE",
                        "CHIP_TYPE_SPORTS_LEAGUE",
                        "CHIP_TYPE_SPORTS_TEAMS",
                        "CHIP_TYPE_SPORTS_CHAMPIONSHIP",
                        "CHIP_TYPE_INTENT"
                    ],
                    "enumDescriptions": [
                        "",
                        "Show, Movie, Event",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "displayName": {
                    "$ref": "TranslationPack",
                    "description": "Display name of a chip."
                },
                "embedding": {
                    "$ref": "UnpluggedEmbedding",
                    "description": "Unplugged embedding for this chip."
                },
                "id": {
                    "description": "Persistent Unique Identifier for a Chip.",
                    "format": "int64",
                    "type": "string"
                },
                "isJustificationChip": {
                    "description": "Indicates whether it can be used as part of justification text.",
                    "type": "boolean"
                },
                "isNavigationChip": {
                    "description": "Indicates whether it can be used for navigation.",
                    "type": "boolean"
                },
                "score": {
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Chips": {
            "description": "List of chips that are associated to a YouTube TV channel.",
            "id": "Chips",
            "properties": {
                "chips": {
                    "items": {
                        "$ref": "Chip"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CircuitInfo": {
            "id": "CircuitInfo",
            "properties": {
                "fiberCircuitContactNumber": {
                    "type": "string"
                },
                "fiberCircuitId": {
                    "type": "string"
                },
                "fiberCircuitProviderName": {
                    "type": "string"
                },
                "fiberContentDistributor": {
                    "type": "string"
                },
                "fiberSourceIpAddress": {
                    "type": "string"
                },
                "fiberSourcePortNumber": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "CmsIdSet": {
            "id": "CmsIdSet",
            "properties": {
                "reference": {
                    "$ref": "EntityReference",
                    "description": "The reference to the entity in CMS."
                }
            },
            "type": "object"
        },
        "CmsManualIdSet": {
            "id": "CmsManualIdSet",
            "properties": {
                "reference": {
                    "$ref": "EntityReference",
                    "description": "The reference to the manual source entity in CMS."
                },
                "sourceId": {
                    "$ref": "CmsSourceId",
                    "description": "The source id for the manual entity."
                }
            },
            "type": "object"
        },
        "CmsSourceId": {
            "description": "This message represents the id and type for any kind of source item\nthat is an input to CMS.",
            "id": "CmsSourceId",
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "ENTITY_TYPE_UNKNOWN",
                        "ENTITY_TYPE_SHOW",
                        "ENTITY_TYPE_EVENT",
                        "ENTITY_TYPE_MOVIE",
                        "ENTITY_TYPE_EPISODE",
                        "ENTITY_TYPE_NETWORK",
                        "ENTITY_TYPE_STATION",
                        "ENTITY_TYPE_PERSON",
                        "ENTITY_TYPE_AIRING",
                        "ENTITY_TYPE_PROGRAM",
                        "ENTITY_TYPE_IMAGE",
                        "ENTITY_TYPE_SCHEDULE",
                        "ENTITY_TYPE_AIRING_COLLECTION",
                        "ENTITY_TYPE_AIRING_OPERATION",
                        "ENTITY_TYPE_AIRING_OPERATION_COLLECTION",
                        "ENTITY_TYPE_BROADCAST",
                        "ENTITY_TYPE_LEAGUE",
                        "ENTITY_TYPE_SPORTS_PARTICIPANT",
                        "ENTITY_TYPE_SPORTS_EVENT",
                        "ENTITY_TYPE_VIDEO_METADATA",
                        "ENTITY_TYPE_ACQUISITION_STREAM",
                        "ENTITY_TYPE_SPORTS_MATCHUP"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Color": {
            "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
            "id": "Color",
            "properties": {
                "alpha": {
                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                    "format": "float",
                    "type": "number"
                },
                "blue": {
                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "green": {
                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "red": {
                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ComplexEpisode": {
            "description": "A Complex episode object. This is comprised of a list of youtube video ids,\nwith start, and end time.",
            "id": "ComplexEpisode",
            "properties": {
                "playlistId": {
                    "description": "We also represent the complex-video as a playlist. This represents the\nid for that playlist.",
                    "type": "string"
                },
                "videoInfo": {
                    "items": {
                        "$ref": "VideoInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ContentAvailability": {
            "description": "Stores availability data: where & to whom the content is available.",
            "id": "ContentAvailability",
            "properties": {
                "epgStationLabel": {
                    "description": "For epg2.0 user customized sort order, travel use case: go/ytv-epg20-infra\nStations that are available at different locations, but share the same\nepg_station_label are considered equivalent.",
                    "type": "string"
                },
                "locationAvailability": {
                    "$ref": "LocationAvailability"
                },
                "outageConfiguration": {
                    "$ref": "OutageConfiguration"
                },
                "userAvailability": {
                    "$ref": "UserAvailability"
                }
            },
            "type": "object"
        },
        "ContentFlags": {
            "description": "next tag: 11",
            "id": "ContentFlags",
            "properties": {
                "airingFlags": {
                    "$ref": "AiringFlags"
                },
                "contentSource": {
                    "enum": [
                        "CONTENT_SOURCE_UNKNOWN",
                        "CONTENT_SOURCE_TV",
                        "CONTENT_SOURCE_YOUTUBE",
                        "CONTENT_SOURCE_PARTNER_VOD"
                    ],
                    "enumDescriptions": [
                        "",
                        "This content is TV content from TMS.\nThis is valid on airings and programs.",
                        "This content is an external YT content.\nThis is valid on shows,seasons, episodes, and programs.",
                        "This content is VOD content\nThis is valid on programs only."
                    ],
                    "type": "string"
                },
                "deletionFlags": {
                    "$ref": "DeletionFlags"
                },
                "dvrFlags": {
                    "$ref": "DvrFlags"
                },
                "episodeFlags": {
                    "$ref": "EpisodeFlags"
                },
                "programFlags": {
                    "$ref": "ProgramFlags"
                },
                "searchTags": {
                    "description": "Indexed searchable terms for the entity.",
                    "items": {
                        "$ref": "SearchTag"
                    },
                    "type": "array"
                },
                "showFlags": {
                    "$ref": "ShowFlags"
                },
                "stationFlags": {
                    "$ref": "StationFlags"
                },
                "viewership": {
                    "enum": [
                        "VIEWERSHIP_UNKNOWN",
                        "VIEWERSHIP_HIGH",
                        "VIEWERSHIP_NORMAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ContentNode": {
            "description": "Next tag: 11",
            "id": "ContentNode",
            "properties": {
                "availability": {
                    "$ref": "AvailabilityArea"
                },
                "details": {
                    "$ref": "ContentNodeDetails"
                },
                "epgStationLabel": {
                    "description": "For epg2.0 user customized sort order, travel use case: go/ytv-epg20-infra\nStations that are available at different locations, but share the same\nepg_station_label are considered equivalent.",
                    "type": "string"
                },
                "flags": {
                    "description": "Flag enums inferred from raw content node data.",
                    "enumDescriptions": [
                        "",
                        "Station is available in lock mode. Applies when the station is in region:\n1. National\n2. East Coast\n2. West Coast",
                        "Whether this content node maps to a mobile-feed station; This maps to\nstation.details.is_mobile_feed in UMS.\nNote: this only applies to NBA LP as of Q3 2018."
                    ],
                    "items": {
                        "enum": [
                            "CONTENT_NODE_FLAG_UNKNOWN",
                            "CONTENT_NODE_FLAG_AVAILABLE_IN_LOCATION_LOCK",
                            "CONTENT_NODE_FLAG_IS_MOBILE_FEED"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "isNational": {
                    "description": "Note that is_national, network_id and package_id are computed in UPS,\nnot filled in config files.",
                    "type": "boolean"
                },
                "labels": {
                    "description": "where all is this content node available?",
                    "items": {
                        "$ref": "AvailabilityLabel"
                    },
                    "type": "array"
                },
                "networkId": {
                    "type": "string"
                },
                "nodeType": {
                    "description": "LINT.ThenChange(//depot/google3/video/youtube/personalization/recommendations/platform/unplugged/util/unplugged_util.cc)",
                    "enum": [
                        "UNKNOWN",
                        "STATION",
                        "VOD",
                        "AFFILIATE_STATION",
                        "REGIONAL_SPORTS_STATION"
                    ],
                    "enumDescriptions": [
                        "",
                        "A station with live content that is not an \"affiliate\". This distinction\nis necessary to detect the case where we are missing coverage for a\nparticular network.",
                        "No live content in this node.",
                        "A station that is covered as an \"affiliate\". It is an error for a node\nto have type AFFILIATE_STATION if the containing network type is\nnot AFFILIATE_NETWORK. See README.md for more information about node\ntypes and how they interact with network types.",
                        "A station that is part of a regional sports network (RSN). Note there is\nno corresponding REGIONAL_SPORTS_NETWORK enum value, because these can be\nintermingled with normal STATIONs in a STANDARD_NETWORK."
                    ],
                    "type": "string"
                },
                "packageId": {
                    "type": "string"
                },
                "ytExternalId": {
                    "$ref": "YTExternalId"
                }
            },
            "type": "object"
        },
        "ContentNodeDetails": {
            "description": "The details protos will be widened to include whatever information is needed\nfor purchase, account modification flows and EPG rendering.\nNext ID: 8",
            "id": "ContentNodeDetails",
            "properties": {
                "callSign": {
                    "type": "string"
                },
                "channelNumber": {
                    "description": "Used to rank channels on EPG.\nIf channel_number is not set, channel will be put at last.\nIf channel_number equal, rank by call_sign.",
                    "format": "int32",
                    "type": "integer"
                },
                "description": {
                    "$ref": "TranslationPack"
                },
                "hideFromOnboarding": {
                    "description": "Do not display this station in onboarding (but still let the user have\naccess to it). This is useful for channels that (for whatever reason)\nwe do not want to pollute the package page. In the staging environment,\nthis is any station that is a test stream (dev keyrotation, etc) or that\nwe are checking the feeds for but don't intend to make available in prod\nany time soon. Note: this boolean is framed as a negation: False means\nit should show, so most checks will involve a \"not\".",
                    "type": "boolean"
                },
                "icon": {
                    "$ref": "Image",
                    "description": "A representative image for the content node. This will likely be a vanilla\nstation icon (\"ABC\"), but might be the local affiliate's (\"KGO\") logo\ninstead."
                },
                "nodeRank": {
                    "description": "Determines the ordering of display of this content nodes within a list of\nnodes. Enables this:\nhttps://folio.googleplex.com/unplugged/mobile/onboarding/_latest/#%2F10%20UPG%20Base%20Package%20All%20Networks.jpeg%3Fz=fit",
                    "format": "int32",
                    "type": "integer"
                },
                "outageDetails": {
                    "$ref": "OutageDetails",
                    "description": "go/ytv-dm-outages Details of outages of this content node"
                }
            },
            "type": "object"
        },
        "ContentRestricts": {
            "id": "ContentRestricts",
            "properties": {
                "releaseStage": {
                    "enum": [
                        "UNKNOWN",
                        "TEST",
                        "FISHFOOD",
                        "DOGFOOD",
                        "LIVE",
                        "HIDDEN"
                    ],
                    "enumDescriptions": [
                        "Any content in this state shouldn't be available anywhere.",
                        "This represents test only content. Should be used by developers\nand trusted users (ie. fishfood) only.",
                        "DEPRECATED",
                        "DEPRECATED",
                        "Available to all the users.",
                        "Any content in this state has been explicitly marked to not be available\nanywhere."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ContentSafety": {
            "description": "Content safety signals for the entity.",
            "id": "ContentSafety",
            "properties": {
                "recommendedAudience": {
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CountryRestriction": {
            "description": "Countries are represented as ISO 3166-1 alpha-2 : two-letter country codes\nAlso see https://en.wikipedia.org/wiki/ISO_3166-1",
            "id": "CountryRestriction",
            "properties": {
                "blacklist": {
                    "description": "List of countries where the item may not be used. Ignore when\ncountry_whitelist is not present.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "whitelist": {
                    "description": "List of countries where the item can be used. When empty, every country is\nallowed except the countries in country_blacklist.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CreateStationAiringRequest": {
            "description": "Request message for the OpsScheduleService.CreateStationAiring RPC",
            "id": "CreateStationAiringRequest",
            "properties": {
                "airingDetails": {
                    "description": "Details of airing.",
                    "items": {
                        "$ref": "AiringDetails"
                    },
                    "type": "array"
                },
                "context": {
                    "description": "Context of the client making the request (e.g. 'eog' or schedule-audit')",
                    "type": "string"
                },
                "reason": {
                    "description": "reasons for creating.",
                    "type": "string"
                },
                "scheduleSource": {
                    "description": "Source of the schedule which airing will be added to.",
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_BLACKOUT",
                        "SOURCE_UMS",
                        "SOURCE_CMS_CANONICAL",
                        "SOURCE_CMS_MANUAL",
                        "SOURCE_TMS",
                        "SOURCE_KG",
                        "SOURCE_GROUND_TRUTH",
                        "SOURCE_SCTE224"
                    ],
                    "enumDescriptions": [
                        "Unknown schedule source.",
                        "Blackout Schedule.",
                        "Schedule fetch from ums.",
                        "Canonical schedule from cms.",
                        "Manual schedule from cms.",
                        "Schedule fetch from tms.",
                        "Knowledge Graph.",
                        "Ground Truth from CMS",
                        "SCTE 224 schedule that contains source station info"
                    ],
                    "type": "string"
                },
                "stationId": {
                    "description": "Id of the station which operation will apply to.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreateStationAiringResponse": {
            "description": "Response message for the OpsScheduleService.CreateStationAiring RPC",
            "id": "CreateStationAiringResponse",
            "properties": {
                "scheduleId": {
                    "description": "Id of schedule that airing belongs to.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CustomPlayerMetadata": {
            "description": "Metadata for the player that deviates from the default. This will be used to\ncustomize a player page (initially only for TV client) for tentpole events.\n\nNext ID: 8",
            "id": "CustomPlayerMetadata",
            "properties": {
                "logoImage": {
                    "$ref": "Image",
                    "description": "ID of the event logo image."
                },
                "networkBugBackgroundColor": {
                    "$ref": "Color",
                    "description": "Background color of the network bug - http://screen/CLczBwO2va7"
                },
                "networkLogoImage": {
                    "$ref": "Image"
                },
                "scrubberBackImage": {
                    "$ref": "Image"
                },
                "scrubberForwardImage": {
                    "$ref": "Image",
                    "description": "Image IDs of various scrubber states."
                },
                "scrubberLiveImage": {
                    "$ref": "Image"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Secondary title for the event."
                }
            },
            "type": "object"
        },
        "DataPoint": {
            "description": "single data points that contains metric value and timestamp.",
            "id": "DataPoint",
            "properties": {
                "timestamp": {
                    "description": "timestamp of this point",
                    "format": "google-datetime",
                    "type": "string"
                },
                "value": {
                    "description": "metric value of this point",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Date": {
            "description": "Represents a whole or partial calendar date, e.g. a birthday. The time of day\nand time zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. This can represent:\n\n* A full date, with non-zero year, month and day values\n* A month and day value, with a zero year, e.g. an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, e.g. a credit card expiration date\n\nRelated types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
            "id": "Date",
            "properties": {
                "day": {
                    "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.",
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.",
                    "format": "int32",
                    "type": "integer"
                },
                "year": {
                    "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "DateSpan": {
            "description": "Used to represent a span of dates.",
            "id": "DateSpan",
            "properties": {
                "endDate": {
                    "$ref": "Date"
                },
                "startDate": {
                    "$ref": "Date"
                }
            },
            "type": "object"
        },
        "DebugScore": {
            "id": "DebugScore",
            "properties": {
                "score": {
                    "format": "float",
                    "type": "number"
                },
                "source": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DeletionFlags": {
            "description": "next tag: 6",
            "id": "DeletionFlags",
            "properties": {
                "deletionStatus": {
                    "enum": [
                        "DELETION_STATUS_UNKNOWN",
                        "DELETION_STATUS_ACTIVE",
                        "DELETION_STATUS_DELETED"
                    ],
                    "enumDescriptions": [
                        "Entity is active (not deleted).  Unless we find the need to add a 3rd\nlogical state, references to this enum should treat ACTIVE and UNKNOWN as\nidentical due to proto enum behavior and legacy data.  Simple way to do\nthis is always check == or != to Deleted enum.",
                        "",
                        "Entity is deleted"
                    ],
                    "type": "string"
                },
                "deletionTimestamp": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "purgeStatus": {
                    "enum": [
                        "PURGE_STATUS_UNKNOWN",
                        "PURGE_STATUS_PURGED"
                    ],
                    "enumDescriptions": [
                        "This flag is used to indicate that this entity has been purged of any\nuser-owned data as part of wipeout policies.  An entity will typically\nbe purged after it has been deleted, and the purge action cannot\nbe reversed without restoring data from backup.\nSee go/wipeout for more information.",
                        ""
                    ],
                    "type": "string"
                },
                "purgeTimestamp": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "reason": {
                    "$ref": "DeletionReason",
                    "description": "Additional information on why an entity was deleted."
                }
            },
            "type": "object"
        },
        "DeletionReason": {
            "description": "Additional information on why an entity was deleted.",
            "id": "DeletionReason",
            "properties": {
                "duplicate": {
                    "$ref": "Duplicate"
                }
            },
            "type": "object"
        },
        "DeletionStatus": {
            "description": "Entity deletion status.",
            "id": "DeletionStatus",
            "properties": {
                "isDeleted": {
                    "description": "Entity is deleted from corpus (UMS). This includes entity YT external id\nchanges. To UST this is a deletion because UST is keyed by YT external id.",
                    "type": "boolean"
                },
                "isUndiscoverable": {
                    "description": "Entity is undiscoverable for any user. Today this only includes past\nairings that no one has DVR'ed.",
                    "type": "boolean"
                },
                "newYtExternalId": {
                    "description": "Only filled in for YT external id changes. The current row will be marked\ndeleted and this will contain the new YT external id of the entity.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DemographicAffinity": {
            "id": "DemographicAffinity",
            "properties": {
                "demographics": {
                    "$ref": "Demographics"
                },
                "score": {
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Demographics": {
            "id": "Demographics",
            "properties": {
                "age": {
                    "enum": [
                        "AGE_UNKNOWN",
                        "AGE_0_TO_12",
                        "AGE_13_TO_17",
                        "AGE_18_TO_24",
                        "AGE_25_TO_34",
                        "AGE_35_TO_44",
                        "AGE_45_TO_54",
                        "AGE_55_TO_64",
                        "AGE_65_TO_PLUS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "dmaId": {
                    "type": "string"
                },
                "gender": {
                    "enum": [
                        "GENDER_UNKNOWN",
                        "GENDER_MALE",
                        "GENDER_FEMALE",
                        "GENDER_OTHER"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "languageCode": {
                    "description": "Language code (BCP 47).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Dim": {
            "description": "One dimension of the tensor.",
            "id": "Dim",
            "properties": {
                "name": {
                    "description": "Optional name of the tensor dimension.",
                    "type": "string"
                },
                "size": {
                    "description": "Size of the tensor in that dimension.\nThis value must be >= -1, but values of -1 are reserved for \"unknown\"\nshapes (values of -1 mean \"unknown\" dimension).  Certain wrappers\nthat work with TensorShapeProto may fail at runtime when deserializing\na TensorShapeProto containing a dim value of -1.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DirtyBitRecord": {
            "description": "Message to capture column value for the ditry bit column.",
            "id": "DirtyBitRecord",
            "properties": {
                "columnName": {
                    "type": "string"
                },
                "columnValue": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DiscoveryMetadata": {
            "description": "This proto would be included in metadata DB as a column in content proto\nsuch as Shows, Programs etc.",
            "id": "DiscoveryMetadata",
            "properties": {
                "entityMicrogenre": {
                    "items": {
                        "$ref": "EntityMicrogenre"
                    },
                    "type": "array"
                },
                "entityTag": {
                    "items": {
                        "$ref": "EntityTag"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DisplayInfo": {
            "description": "League wide display info for each base entity",
            "id": "DisplayInfo",
            "properties": {
                "leagueType": {
                    "enum": [
                        "LEAGUE_TYPE_UNKNOWN",
                        "LEAGUE_TYPE_NFL",
                        "LEAGUE_TYPE_MLB",
                        "LEAGUE_TYPE_NBA",
                        "LEAGUE_TYPE_NHL",
                        "LEAGUE_TYPE_SOCCER",
                        "LEAGUE_TYPE_NCAA_FOOTBALL",
                        "LEAGUE_TYPE_NCAA_BASKETBALL",
                        "LEAGUE_TYPE_LONG_TAIL"
                    ],
                    "enumDescriptions": [
                        "",
                        "Used for leagues that were ingested from KG\nLINT.IfChange",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "LINT.ThenChange(//depot/google3/video/youtube/tvfilm/unplugged/platform/sports/pathquery/sports_util.pq)",
                        "Used for leagues that were ingested from ops spreadsheets"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Document": {
            "id": "Document",
            "properties": {
                "displayUrl": {
                    "description": "This field is deprecated, please use indexing.moonshine.generic.DisplayUrl\ninstead.",
                    "type": "string"
                },
                "id": {
                    "$ref": "Id",
                    "description": "This field is required."
                },
                "proto": {
                    "additionalProperties": {
                        "description": "Properties of the object. Contains field @type with type URL.",
                        "type": "any"
                    },
                    "description": "The content of your document.\n\nThe type URL corresponds to the URL of your schema; the format is\n\"type.googleprod.com/my.package.MyProto\". The value is a serialized\ninstance of your schema proto containing the document fields.\n\nThis field is required.",
                    "type": "object"
                },
                "version": {
                    "$ref": "Version",
                    "description": "This field is required."
                }
            },
            "type": "object"
        },
        "DtypeAndShape": {
            "description": "Protocol buffer representing a pair of (data type, tensor shape).",
            "id": "DtypeAndShape",
            "properties": {
                "dtype": {
                    "enum": [
                        "DT_INVALID",
                        "DT_FLOAT",
                        "DT_DOUBLE",
                        "DT_INT32",
                        "DT_UINT8",
                        "DT_INT16",
                        "DT_INT8",
                        "DT_STRING",
                        "DT_COMPLEX64",
                        "DT_INT64",
                        "DT_BOOL",
                        "DT_QINT8",
                        "DT_QUINT8",
                        "DT_QINT32",
                        "DT_BFLOAT16",
                        "DT_QINT16",
                        "DT_QUINT16",
                        "DT_UINT16",
                        "DT_COMPLEX128",
                        "DT_HALF",
                        "DT_RESOURCE",
                        "DT_VARIANT",
                        "DT_UINT32",
                        "DT_UINT64",
                        "DT_FLOAT_REF",
                        "DT_DOUBLE_REF",
                        "DT_INT32_REF",
                        "DT_UINT8_REF",
                        "DT_INT16_REF",
                        "DT_INT8_REF",
                        "DT_STRING_REF",
                        "DT_COMPLEX64_REF",
                        "DT_INT64_REF",
                        "DT_BOOL_REF",
                        "DT_QINT8_REF",
                        "DT_QUINT8_REF",
                        "DT_QINT32_REF",
                        "DT_BFLOAT16_REF",
                        "DT_QINT16_REF",
                        "DT_QUINT16_REF",
                        "DT_UINT16_REF",
                        "DT_COMPLEX128_REF",
                        "DT_HALF_REF",
                        "DT_RESOURCE_REF",
                        "DT_VARIANT_REF",
                        "DT_UINT32_REF",
                        "DT_UINT64_REF"
                    ],
                    "enumDescriptions": [
                        "Not a legal value for DataType.  Used to indicate a DataType field\nhas not been set.",
                        "Data types that all computation devices are expected to be\ncapable to support.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Single-precision complex",
                        "",
                        "",
                        "Quantized int8",
                        "Quantized uint8",
                        "Quantized int32",
                        "Float32 truncated to 16 bits.  Only for cast ops.",
                        "Quantized int16",
                        "Quantized uint16",
                        "",
                        "Double-precision complex",
                        "",
                        "",
                        "Arbitrary C++ data types",
                        "",
                        "",
                        "Do not use!  These are only for parameters.  Every enum above\nshould have a corresponding value below (verified by types_test).",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "shape": {
                    "$ref": "TensorShapeProto"
                }
            },
            "type": "object"
        },
        "Duplicate": {
            "description": "Entity is a duplicate of another entity.",
            "id": "Duplicate",
            "properties": {
                "canonicalEntityId": {
                    "$ref": "UnpluggedId",
                    "description": "Unplugged ID of the canonical entity."
                }
            },
            "type": "object"
        },
        "DvrFlags": {
            "id": "DvrFlags",
            "properties": {
                "dvrServingSource": {
                    "enum": [
                        "DVR_SERVING_SOURCE_UNKNOWN",
                        "DVR_SERVING_SOURCE_CORE_ONLY",
                        "DVR_SERVING_SOURCE_CACHE_ALLOWED"
                    ],
                    "enumDescriptions": [
                        "",
                        "DVR recordings with this flag can only be served from the original copy.",
                        "DVR recordings with this flag may be served from cache."
                    ],
                    "type": "string"
                },
                "dvrVideoStatus": {
                    "description": "The state of DVR video process. It will be initialized as\nDVR_VIDEO_STATUS_UNKNOWN when the video gets created and updated only\nwhen the DVR process is completed to DVR_VIDEO_STATUS_COMPLETE.\nThis field is filled only for airings.",
                    "enum": [
                        "DVR_VIDEO_STATUS_UNKNOWN",
                        "DVR_VIDEO_STATUS_COMPLETE"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "dvrVideoType": {
                    "description": "The type of a dvr video.\nThis field is filled only for airings.",
                    "enum": [
                        "DVR_VIDEO_TYPE_UNKNOWN",
                        "DVR_VIDEO_TYPE_PARTIAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "Dvr recordings with this flag is a partial one."
                    ],
                    "type": "string"
                },
                "minimumExtensionDuration": {
                    "description": "For some shows/movies/events/programs we need to force a DVR extension.\nb/38029885 for reference.  This field is manually set by eng as needed.",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Education": {
            "id": "Education",
            "properties": {
                "educationDateSpan": {
                    "$ref": "DateSpan",
                    "description": "Start and end dates in the institution."
                },
                "institution": {
                    "$ref": "EntityEntity",
                    "description": "The base details for the athlete's educational institute, such as name."
                }
            },
            "type": "object"
        },
        "EmailOperationLog": {
            "id": "EmailOperationLog",
            "properties": {
                "isNotificationSent": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Embedding": {
            "id": "Embedding",
            "properties": {
                "elements": {
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Entity": {
            "description": "Represents an Unplugged entity on which a User can take an Action.",
            "id": "Entity",
            "properties": {
                "externalId": {
                    "$ref": "YTExternalId"
                }
            },
            "type": "object"
        },
        "EntityAvailability": {
            "description": "Channel availability data. Contains available videos per content node.\nNot filled in for station channels.",
            "id": "EntityAvailability",
            "properties": {
                "availabilityFilteringStatus": {
                    "description": "STATUS_WHITELISTED will by-pass Availability filtering. One such example\nis Sports Events from a few whitelisted Sports Leagues. Another example is\nYouTube Shows which don't have proper entitlements (yet). UNKNOWN and not\nset are equivalent to DEFAULT.",
                    "enum": [
                        "STATUS_UNKNOWN",
                        "STATUS_WHITELISTED",
                        "STATUS_BLACKLISTED",
                        "STATUS_OUTSIDE_INGESTION_WINDOW"
                    ],
                    "enumDescriptions": [
                        "",
                        "Whitelisted in across all packages. Available to all users.",
                        "Blacklisted across all packages.",
                        "Whitelisted for all users, we don't know if the user have the access to the\nprimary network of the entity yet."
                    ],
                    "type": "string"
                },
                "availabilityPerContentNode": {
                    "items": {
                        "$ref": "AvailabilityPerContentNode"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "EntityDetails": {
            "description": "Details about a given entity.",
            "id": "EntityDetails",
            "properties": {
                "type": {
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_VIDEO_AIRING",
                        "TYPE_VIDEO_VOD",
                        "TYPE_VIDEO_LIVE",
                        "TYPE_VIDEO_FREE_YOUTUBE",
                        "TYPE_VIDEO_PARTIAL_AIRING"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "This indicates the video is a partial dvr video."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntityEntity": {
            "description": "Id + Name + Image trio for the entity.\nNext tag: 10",
            "id": "EntityEntity",
            "properties": {
                "abbreviationName": {
                    "$ref": "Name"
                },
                "affiliationName": {
                    "$ref": "Name",
                    "description": "Team only fields: |affiliation_name|, |base_name|, and |abbreviation_name|\nTeam affiliation name (e.g., \"San Francisco\"), team base name (e.g.,\n\"49ers\"), and abbreviation name (e.g., \"SF\"). The full name (e.g., \"San\nFrancisco 49ers\") is stored in the name field."
                },
                "baseName": {
                    "$ref": "Name"
                },
                "canonicalUrlKey": {
                    "description": "Canonical URL for this entity's logged out page.  This field is not\nstored in the UMS database but populated by the logged-out pipeline.",
                    "type": "string"
                },
                "id": {
                    "description": "When this proto is used to pull data from KG, the id field is the KG MID.\nWhen this proto is used for UPG ChannelMetadata, the id field is the UMS ID\nfor the entity (most likely MID but see b/117501793).",
                    "type": "string"
                },
                "images": {
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "name": {
                    "$ref": "Name"
                },
                "shortName": {
                    "$ref": "Name"
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "External ID to the entity's containing object. This field is not stored in\nthe UMS database but it is populated in the \"entities\" array of the\nChannelMetadata stored in UCS."
                }
            },
            "type": "object"
        },
        "EntityMicrogenre": {
            "description": "Content Microgenre association. This proto would be stored in metadata db in\neach entity row. No need to include additional entity id in here.\nNext tag 7",
            "id": "EntityMicrogenre",
            "properties": {
                "classifierType": {
                    "description": "Classifier that was used to make this entity association.",
                    "enum": [
                        "UNKNOWN",
                        "CURATED",
                        "CONFIG_BASED",
                        "MODEL_BASED"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "microgenreChannelId": {
                    "type": "string"
                },
                "microgenreId": {
                    "type": "string"
                },
                "name": {
                    "$ref": "TranslationPack"
                },
                "score": {
                    "items": {
                        "$ref": "EntityMicrogenreScoreScore"
                    },
                    "type": "array"
                },
                "type": {
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_BROWSE_GENRE",
                        "TYPE_COLLECTION",
                        "TYPE_CONTENT_COLLECTION",
                        "TYPE_BROWSE_INTENT"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "Microgenres with a content type filter e.g. 'Action Shows'. These\nmicrogenres are used only in browse.",
                        "Specific to Intent e.g. Shows, Movies."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntityMicrogenreDetails": {
            "description": "Entity's associated microgenres.",
            "id": "EntityMicrogenreDetails",
            "properties": {
                "microgenres": {
                    "items": {
                        "$ref": "EntityMicrogenre"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "EntityMicrogenreScoreScore": {
            "id": "EntityMicrogenreScoreScore",
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                },
                "value": {
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "EntityNetwork": {
            "description": "Information about the network of an entity.",
            "id": "EntityNetwork",
            "properties": {
                "unpluggedNetworkId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntityNetworks": {
            "description": "A collection of networks for the entity.",
            "id": "EntityNetworks",
            "properties": {
                "airingNew": {
                    "$ref": "EntityNetwork",
                    "description": "Network showing new airings of this entity."
                },
                "forceEmptyPrimaryNetwork": {
                    "description": "This boolean will set primary network id and ops_forced to empty.",
                    "type": "boolean"
                },
                "opsForced": {
                    "$ref": "EntityNetwork",
                    "description": "Ops forced network. Has the highest priority."
                },
                "original": {
                    "$ref": "EntityNetwork",
                    "description": "Original network of the entity."
                }
            },
            "type": "object"
        },
        "EntityReference": {
            "description": "Minimal set of relevant information when referencing an entity.",
            "id": "EntityReference",
            "properties": {
                "id": {
                    "description": "CMS generated global unique ID of the entity. It is unique across the\nentity type and source.",
                    "type": "string"
                },
                "source": {
                    "description": "Source of the entity.",
                    "enum": [
                        "ENTITY_SOURCE_UNKNOWN",
                        "ENTITY_SOURCE_CANONICAL",
                        "ENTITY_SOURCE_TMS",
                        "ENTITY_SOURCE_MANUAL",
                        "ENTITY_SOURCE_KG",
                        "ENTITY_SOURCE_UMS",
                        "ENTITY_SOURCE_GROUND_TRUTH",
                        "ENTITY_SOURCE_YOUTUBE",
                        "ENTITY_SOURCE_CMS_GENERATED",
                        "ENTITY_SOURCE_NUCLEUS"
                    ],
                    "enumDescriptions": [
                        "",
                        "The canonical entity in CMS, resulting from the merge of all the\npartner-specific sources that have this entity type.",
                        "Tribune Media Services sourced entities.",
                        "Manually sourced entities.",
                        "Knowledge Graph sourced entities.",
                        "Unplugged Metadata Store sourced entities.\nNote: no cms entities will be *created* from UMS source.\nInstead these entities only go through publishing.",
                        "Ground Truth sourced entities.\nNote: This source data is created manually from the schedule review tool.",
                        "YouTube sourced entities.",
                        "Source for CMS internally generated entities.",
                        "Nucleus(Linear TV Team data portal) sourced entities."
                    ],
                    "type": "string"
                },
                "timeRange": {
                    "$ref": "TimeRange",
                    "description": "Time-range [start, end) of the entity. This field is only populated when\nthe entity is a time-ranged entity such as an airing."
                },
                "type": {
                    "description": "Type of the entity.  Also determines which oneof field is set in the\nEntityPayload message.",
                    "enum": [
                        "ENTITY_TYPE_UNKNOWN",
                        "ENTITY_TYPE_SHOW",
                        "ENTITY_TYPE_EVENT",
                        "ENTITY_TYPE_MOVIE",
                        "ENTITY_TYPE_EPISODE",
                        "ENTITY_TYPE_NETWORK",
                        "ENTITY_TYPE_STATION",
                        "ENTITY_TYPE_PERSON",
                        "ENTITY_TYPE_AIRING",
                        "ENTITY_TYPE_PROGRAM",
                        "ENTITY_TYPE_IMAGE",
                        "ENTITY_TYPE_SCHEDULE",
                        "ENTITY_TYPE_AIRING_COLLECTION",
                        "ENTITY_TYPE_AIRING_OPERATION",
                        "ENTITY_TYPE_AIRING_OPERATION_COLLECTION",
                        "ENTITY_TYPE_BROADCAST",
                        "ENTITY_TYPE_LEAGUE",
                        "ENTITY_TYPE_SPORTS_PARTICIPANT",
                        "ENTITY_TYPE_SPORTS_EVENT",
                        "ENTITY_TYPE_VIDEO_METADATA",
                        "ENTITY_TYPE_ACQUISITION_STREAM",
                        "ENTITY_TYPE_SPORTS_MATCHUP"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "versionTimestamp": {
                    "description": "Version of the entity. This field is only populated when a specific version\nof the entity is being referred to.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntityStats": {
            "description": "Statistics for a given entity.",
            "id": "EntityStats",
            "properties": {
                "entity": {
                    "$ref": "EntityEntity"
                },
                "stats": {
                    "items": {
                        "$ref": "Stat"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "EntityTag": {
            "description": "Content Tag association. Since this proto would always be stored inside a\ncontent metadata proto and never alone in a DB, there is no need to keep\nentity_id in here.\nNext TAG to use: 7",
            "id": "EntityTag",
            "properties": {
                "mid": {
                    "type": "string"
                },
                "name": {
                    "$ref": "TranslationPack"
                },
                "score": {
                    "description": "Populated only when tags have associated quality score.",
                    "items": {
                        "$ref": "EntityTagScoreScore"
                    },
                    "type": "array"
                },
                "tagId": {
                    "type": "string"
                },
                "tagType": {
                    "enum": [
                        "TAG_TYPE_UNKNOWN",
                        "TAG_TYPE_ADAPTED_FROM",
                        "TAG_TYPE_ATTRIBUTE",
                        "TAG_TYPE_CAST",
                        "TAG_TYPE_CAST_INSIGNIFICANT",
                        "TAG_TYPE_CAST_VOICE",
                        "TAG_TYPE_CHARACTER",
                        "TAG_TYPE_CONTENT_TYPE",
                        "TAG_TYPE_CREW",
                        "TAG_TYPE_CREW_DIRECTOR",
                        "TAG_TYPE_CREW_MUSIC_BY",
                        "TAG_TYPE_CREW_PRODUCER",
                        "TAG_TYPE_CREW_WRITTEN_BY",
                        "TAG_TYPE_FILM_STUDIO_OR_NETWORK",
                        "TAG_TYPE_FOR_AGES",
                        "TAG_TYPE_GENRE",
                        "TAG_TYPE_LEAGUE",
                        "TAG_TYPE_OTHER",
                        "TAG_TYPE_PARTICIPANT",
                        "TAG_TYPE_PLOT_OR_THEME",
                        "TAG_TYPE_SETTING_FICTIONAL_UNIVERSE",
                        "TAG_TYPE_SETTING_LOCATION",
                        "TAG_TYPE_STORY_BY",
                        "TAG_TYPE_SUBGENRE",
                        "TAG_TYPE_VENUE_CITY",
                        "TAG_TYPE_WATCHING_PATTERN",
                        "TAG_TYPE_ACCOLADE",
                        "TAG_TYPE_CONTENT_RATING",
                        "TAG_TYPE_LEGO_TAXONOMY",
                        "TAG_TYPE_CONFERENCE",
                        "TAG_TYPE_DIVISION",
                        "TAG_TYPE_PRIMARY_NETWORK",
                        "TAG_TYPE_LEAGUE_TAXONOMY",
                        "TAG_TYPE_SPORTS_CHAMPIONSHIP",
                        "TAG_TYPE_SPORTS_TEAM_SCHOOL",
                        "TAG_TYPE_SPORTS_GENRE",
                        "TAG_TYPE_RECURRING_EVENT",
                        "TAG_TYPE_YT_KIDS_CORPUS_STATUS",
                        "TAG_TYPE_ROUND",
                        "TAG_TYPE_SPORTS_CHAMPIONSHIP_GROUP"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "type": {
                    "$ref": "TagType",
                    "description": "Deprecated. Use tag_type instead."
                }
            },
            "type": "object"
        },
        "EntityTagDetails": {
            "description": "Entity's associated tags.",
            "id": "EntityTagDetails",
            "properties": {
                "tags": {
                    "items": {
                        "$ref": "EntityTag"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "EntityTagScoreScore": {
            "id": "EntityTagScoreScore",
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "RELATEDNESS",
                        "TF_IDF"
                    ],
                    "enumDescriptions": [
                        "",
                        "Deprecated",
                        ""
                    ],
                    "type": "string"
                },
                "value": {
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "EntityVersionSpec": {
            "description": "Specification for the version of the entity to retrieve.",
            "id": "EntityVersionSpec",
            "properties": {
                "latest": {
                    "description": "Latest entity.",
                    "type": "boolean"
                },
                "snapshotTimestamp": {
                    "description": "The version of the entity at the |snapshot_timestamp|.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "versionLabel": {
                    "description": "The latest version of the entity with the given version label.",
                    "enum": [
                        "VERSION_LABEL_UNKNOWN",
                        "VERSION_LABEL_PUSHED_TO_UMS",
                        "VERSION_LABEL_PUBLISHED_TO_UCS",
                        "VERSION_LABEL_PUBLISHED_TO_YTMS",
                        "VERSION_LABEL_PUBLISHED_TO_UAS",
                        "VERSION_LABEL_SCHEDULE_ACTIVATED",
                        "VERSION_LABEL_PUSH_TO_UMS_AFTER_PICK_IMAGE_GROUPS",
                        "VERSION_LABEL_PUSH_TO_UMS_AFTER_COMPUTE_PRIMARY_NETWORK_ID",
                        "VERSION_LABEL_PUBLISHED_TO_USS",
                        "VERSION_LABEL_SCHEDULE_VIDEO_METADATA_PUBLISHED_TO_USS",
                        "VERSION_LABEL_SET_DVR_INIT",
                        "VERSION_LABEL_PUBLISHED_TO_YOUTUBE",
                        "VERSION_LABEL_PUBLISHED_TO_KG_ADAPTER",
                        "VERSION_LABEL_PUBLISHED_TO_BLACKOUTS",
                        "VERSION_LABEL_PUBLISHED_TO_URSA"
                    ],
                    "enumDescriptions": [
                        "",
                        "For all entities.",
                        "For show, movie, event, station and network.",
                        "For airing, station and video metadata.",
                        "For airing and station.",
                        "For schedule.",
                        "For episode, event, movie, network, person, show, and station.",
                        "For event, movie, and show.",
                        "For schedule and video metatada.",
                        "For schedule, added to differentiate from VERSION_LABEL_PUBLISHED_TO_USS\nfor schedule.\nThis represents that a schedule's diffed airings' video metadata entities\nare successfully published to USS.",
                        "Indicates whether DVR init has already been triggered for this airing\nversion.",
                        "Indicates that airing video was successfully pushed to youtube.",
                        "Indicates that airing was successfully published to KG adapter.",
                        "Indicates that the blackouts corresponding to the airings in the\ndiffset(Diff set has the airings in the version currently activated and\nlast version marked as published to Blackouts) have been updated.",
                        "For ursa entities, including acquisition stream.\nIndicates that entity has been successfully published to ursa."
                    ],
                    "type": "string"
                },
                "versionLabelSnapshot": {
                    "$ref": "VersionLabelSnapshot",
                    "description": "The version of the entity with the given version label at the snapshot\ntime."
                },
                "versionTimestamp": {
                    "description": "The version of the entity to retrieve. This field must be populated.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Entry": {
            "id": "Entry",
            "properties": {
                "athlete": {
                    "$ref": "EntityEntity"
                },
                "teamData": {
                    "$ref": "AthleteTeamData"
                }
            },
            "type": "object"
        },
        "EpgCommonality": {
            "id": "EpgCommonality",
            "properties": {
                "microgenreEpgCommonalityScoreMap": {
                    "additionalProperties": {
                        "format": "float",
                        "type": "number"
                    },
                    "description": "Key is microgenre channel id. Value is a score indicating how common this\nmicrogenre is in the station at this time bucket. Score is obtained by\nlooking at the station's past and upcoming airing schedules.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Episode": {
            "description": "Next tag: 9",
            "id": "Episode",
            "properties": {
                "details": {
                    "$ref": "EpisodeDetails"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this episode. This may, or may not be same\nas id from other environments (e.g KG, YouTube etc.) for the same episode.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet"
                },
                "restricts": {
                    "$ref": "ContentRestricts"
                },
                "seasonId": {
                    "type": "string"
                },
                "showId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EpisodeDetails": {
            "description": "Next tag: 23",
            "id": "EpisodeDetails",
            "properties": {
                "castMembers": {
                    "description": "Cast and Crew.\n\nThe lists are kept separate for now due to the fact that ordering is\nmeaningful within each list (i.e more prominent actors first).",
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "corpus": {
                    "description": "Corpus type for this episode (SVOD/TVOD/LIVE).",
                    "enum": [
                        "CORPUS_UNKNOWN",
                        "CORPUS_SVOD",
                        "CORPUS_TVOD",
                        "CORPUS_TV",
                        "CORPUS_YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Represents transactional content.",
                        "Represents live tv.",
                        "Represents youtube creator content."
                    ],
                    "type": "string"
                },
                "countryRestriction": {
                    "$ref": "CountryRestriction",
                    "description": "Country restrictions for this episode."
                },
                "crewMembers": {
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Additional info about the episode."
                },
                "displayEpisodeNumber": {
                    "description": "Episode number to display to users. May not exist.",
                    "type": "string"
                },
                "displaySeasonNumber": {
                    "description": "Season number to display to users.",
                    "type": "string"
                },
                "episodeNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "episodePart": {
                    "description": "Used for multipart episodes.",
                    "items": {
                        "$ref": "EpisodePart"
                    },
                    "type": "array"
                },
                "fifeImages": {
                    "description": "Set of fife images, which contain fife url and aspect ratio, for episode.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "genres": {
                    "description": "List of genres for this episode.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "Set of ingestion images, converted directly from external sources, for\nepisode.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultOnly": {
                    "type": "boolean"
                },
                "originalAirDateTimestamp": {
                    "description": "Timestamp of the first air date of this program.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "partnerGenres": {
                    "description": "List of raw genre strings from parnter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rating": {
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Primary title of the episode."
                },
                "unpluggedEpisodeIndex": {
                    "description": "Our internal index of the episode in the season. Must exist.",
                    "format": "int32",
                    "type": "integer"
                },
                "unpluggedSeasonIndex": {
                    "description": "Season number to display to users.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "EpisodeFlags": {
            "description": "next tag: 3",
            "id": "EpisodeFlags",
            "properties": {
                "associatedAiringType": {
                    "enum": [
                        "ASSOCIATED_AIRING_TYPE_UNKNOWN",
                        "ASSOCIATED_AIRING_TYPE_SPECIFIC_AIRING",
                        "ASSOCIATED_AIRING_TYPE_PLACEHOLDER"
                    ],
                    "enumDescriptions": [
                        "Unknown status, by default should be treated like specific airing for\nbackwards compatibility reasons.",
                        "This program represents a specific airing of television.  All airings of\nthis program *should* be the same video.  E.g. All airings of this are\nepisode 1 of Blacklist (though they may air on different networks, be\nreruns etc..)",
                        "This program is a placeholder for multiple airings.  There are two main\nexamples of this:\n  1. News shows where there is one \"news at 11\" program that airs\n  everyday.  Each airing is a different but of the same program.\n  2. This is sometimes used as a placeholder for future airings where\n  the specific program is not yet known.  E.g. An episode of BigBang\n  Theory is airing 2 weeks from now but which episode is airing is not\n  yet decided.  Initially the program/airing may be this placeholder\n  then changed once it is known;"
                    ],
                    "type": "string"
                },
                "kidsCorpus": {
                    "enum": [
                        "KIDS_CORPUS_UNKNOWN",
                        "KIDS_CORPUS_NOT_OK",
                        "KIDS_CORPUS_OK"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EpisodeInfo": {
            "id": "EpisodeInfo",
            "properties": {
                "externalVideoId": {
                    "type": "string"
                },
                "originalAirDate": {
                    "description": "Original airing date of the episode.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "timeRange": {
                    "$ref": "TimeRange",
                    "description": "Time ranges the content is available in. For VOD, these are based\navailability windows. For airings, these are based on airing schedules."
                },
                "unpluggedEpisodeIndex": {
                    "description": "Only populated for episodic shows.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "EpisodeIngestionMetadata": {
            "description": "Show videos only.",
            "id": "EpisodeIngestionMetadata",
            "properties": {
                "unpluggedEpisodeIndex": {
                    "description": "Internal index of the episode in the season. Not all episodes have this.\nOnly exists for seasonal episodic shows.",
                    "format": "int32",
                    "type": "integer"
                },
                "unpluggedSeasonIndex": {
                    "description": "Internal index of the season in the show. Not all episodes have this. Only\nexists for seasonal episodic shows.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "EpisodePart": {
            "description": "When we have a multipart episodes, we use message to keep all the releavant\ninformation of each of its parts.",
            "id": "EpisodePart",
            "properties": {
                "tmsRootId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EpisodeUniqueContentMetadata": {
            "description": "For show channels.",
            "id": "EpisodeUniqueContentMetadata",
            "properties": {
                "displayTimeSeconds": {
                    "description": "derived from display_time_seconds in\nvideo/youtube/tvfilm/unplugged/proto/public/unplugged_video_metadata.proto\nThe time to display for this unique content on details page.\nFor a canonical episode, it is original air date seconds if\navailable.\nFor placeholder episode, it is airing time.",
                    "format": "int64",
                    "type": "string"
                },
                "uniqueEpisodeId": {
                    "type": "string"
                },
                "unpluggedEpisodeIndex": {
                    "description": "Internal index of the episode in the season. Not all episodes have this.\nOnly exists for seasonal episodic shows.",
                    "format": "int32",
                    "type": "integer"
                },
                "unpluggedSeasonIndex": {
                    "description": "Internal index of the season in the show. Not all episodes have this.\nOnly exists for seasonal episodic shows.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "EspnIdSet": {
            "id": "EspnIdSet",
            "properties": {
                "airingId": {
                    "type": "string"
                },
                "franchiseId": {
                    "description": "ESPN equivalent of a show.",
                    "type": "string"
                },
                "networkId": {
                    "type": "string"
                },
                "programId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Event": {
            "description": "Next tag: 22",
            "id": "Event",
            "properties": {
                "context": {
                    "$ref": "EntityEntity",
                    "description": "Deprecated by b/69977987 - use contexts instead"
                },
                "contexts": {
                    "description": "The contexts in which this event takes place (aka Leagues). The first\nleague in the list is considered the primary league. The subsequent leagues\nmay be other leagues or a sports event group.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "discoveryMetadata": {
                    "$ref": "DiscoveryMetadata",
                    "description": "DiscoveryMetadata Info."
                },
                "displayInfo": {
                    "$ref": "DisplayInfo"
                },
                "entity": {
                    "$ref": "EntityEntity"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "entity ID that will be populated in addition to entity.id field",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "IdSet."
                },
                "oneVsOneInfo": {
                    "$ref": "OneVsOneEventInfo",
                    "description": "Event data about event between two teams."
                },
                "ordinal": {
                    "$ref": "Ordinal",
                    "description": "Game number (e.g., in MLB division playoffs, game 2 out of 5)"
                },
                "originalWeek": {
                    "$ref": "Ordinal",
                    "description": "Filled if the game was postponed."
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "roundType": {
                    "description": "Round type.",
                    "enum": [
                        "ROUND_TYPE_UNKNOWN",
                        "ROUND_TYPE_FINALS",
                        "ROUND_TYPE_SEMI_FINALS",
                        "ROUND_TYPE_QUARTER_FINALS",
                        "ROUND_TYPE_ROUND_OF_16",
                        "ROUND_TYPE_ROUND_OF_32",
                        "ROUND_TYPE_ROUND_OF_64",
                        "ROUND_TYPE_ROUND_OF_128",
                        "ROUND_TYPE_ROUND_OF_256",
                        "ROUND_TYPE_GROUP_STAGE",
                        "ROUND_TYPE_FIRST_GROUP_STAGE",
                        "ROUND_TYPE_SECOND_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_FIRST_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_SECOND_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_FINALS_GROUP_STAGE",
                        "ROUND_TYPE_THIRD_PLACE",
                        "ROUND_TYPE_FIFTH_PLACE",
                        "ROUND_TYPE_SEVENTH_PLACE",
                        "ROUND_TYPE_NINTH_PLACE",
                        "ROUND_TYPE_ELEVENTH_PLACE",
                        "ROUND_TYPE_THIRTEENTH_PLACE",
                        "ROUND_TYPE_FIFTEENTH_PLACE",
                        "ROUND_TYPE_SEVENTEENTH_PLACE",
                        "ROUND_TYPE_NINETEENTH_PLACE",
                        "ROUND_TYPE_TWENTY_FIRST_PLACE",
                        "ROUND_TYPE_TWENTY_THIRD_PLACE",
                        "ROUND_TYPE_PRESEASON",
                        "ROUND_TYPE_REGULAR_SEASON",
                        "ROUND_TYPE_POST_SEASON",
                        "ROUND_TYPE_RECLASSIFICATION",
                        "ROUND_TYPE_FRIENDLY",
                        "ROUND_TYPE_QUALIFIER",
                        "ROUND_TYPE_FIRST_ROUND",
                        "ROUND_TYPE_SECOND_ROUND",
                        "ROUND_TYPE_THIRD_ROUND",
                        "ROUND_TYPE_FOURTH_ROUND",
                        "ROUND_TYPE_FIFTH_ROUND",
                        "ROUND_TYPE_SIXTH_ROUND",
                        "ROUND_TYPE_SEVENTH_ROUND",
                        "ROUND_TYPE_EIGHTH_ROUND",
                        "ROUND_TYPE_FINAL_ROUND",
                        "ROUND_TYPE_SUPER_CUP",
                        "ROUND_TYPE_PRELIMINARY_ROUND",
                        "ROUND_TYPE_FIRST_PRELIMINARY_ROUND",
                        "ROUND_TYPE_SECOND_PRELIMINARY_ROUND",
                        "ROUND_TYPE_PRELIMINARY_FINALS",
                        "ROUND_TYPE_INTER_CONFED_PLAYOFF",
                        "ROUND_TYPE_FIRST_QUALIFYING_ROUND",
                        "ROUND_TYPE_SECOND_QUALIFYING_ROUND",
                        "ROUND_TYPE_THIRD_QUALIFYING_ROUND",
                        "ROUND_TYPE_FOURTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_FIFTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_SIXTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_SEVENTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_PLAYOFFS",
                        "ROUND_TYPE_FIRST_PLAYOFF_ROUND",
                        "ROUND_TYPE_SECOND_PLAYOFF_ROUND",
                        "ROUND_TYPE_CONFERENCE_FINALS",
                        "ROUND_TYPE_CONFERENCE_SEMI_FINALS",
                        "ROUND_TYPE_CONFERENCE_QUARTER_FINALS",
                        "ROUND_TYPE_CONFERENCE_SECOND_ROUND",
                        "ROUND_TYPE_CONFERENCE_FIRST_ROUND",
                        "ROUND_TYPE_CONFERENCE_TOURNAMENT",
                        "ROUND_TYPE_ALL_STAR",
                        "ROUND_TYPE_WILD_CARD",
                        "ROUND_TYPE_ROUND_ROBIN",
                        "ROUND_TYPE_TOURNAMENT",
                        "ROUND_TYPE_BOWLS",
                        "ROUND_TYPE_CHAMPIONSHIP",
                        "ROUND_TYPE_RELEGATION",
                        "ROUND_TYPE_OPENING_SEASON",
                        "ROUND_TYPE_OPENING_SEASON_FINALS",
                        "ROUND_TYPE_OPENING_SEASON_SEMI_FINALS",
                        "ROUND_TYPE_OPENING_SEASON_QUARTER_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON",
                        "ROUND_TYPE_CLOSING_SEASON_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON_SEMI_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON_QUARTER_FINALS",
                        "ROUND_TYPE_APERTURA",
                        "ROUND_TYPE_APERTURA_FINALS",
                        "ROUND_TYPE_APERTURA_SEMI_FINALS",
                        "ROUND_TYPE_APERTURA_QUARTER_FINALS",
                        "ROUND_TYPE_APERTURA_EIGHTH_FINALS",
                        "ROUND_TYPE_CLAUSURA",
                        "ROUND_TYPE_CLAUSURA_FINALS",
                        "ROUND_TYPE_CLAUSURA_SEMI_FINALS",
                        "ROUND_TYPE_CLAUSURA_QUARTER_FINALS",
                        "ROUND_TYPE_CLAUSURA_EIGHTH_FINALS",
                        "ROUND_TYPE_FIRST_PHASE",
                        "ROUND_TYPE_FIRST_PHASE_SEMI_FINAL",
                        "ROUND_TYPE_FIRST_PHASE_FINAL",
                        "ROUND_TYPE_SECOND_PHASE",
                        "ROUND_TYPE_SECOND_PHASE_SEMI_FINAL",
                        "ROUND_TYPE_SECOND_PHASE_FINAL",
                        "ROUND_TYPE_HEXAGONAL_FINAL",
                        "ROUND_TYPE_QUALIFICATION_ROUND",
                        "ROUND_TYPE_GRAND_FINAL",
                        "ROUND_TYPE_ELIMINATION_FINAL",
                        "ROUND_TYPE_INITIAL_MATCH",
                        "ROUND_TYPE_DECIDER_MATCH",
                        "ROUND_TYPE_WINNERS_MATCH",
                        "ROUND_TYPE_WINNERS_FINALS",
                        "ROUND_TYPE_WINNERS_SEMI_FINALS",
                        "ROUND_TYPE_WINNERS_QUARTER_FINALS",
                        "ROUND_TYPE_WINNERS_ROUND_OF_16",
                        "ROUND_TYPE_WINNERS_FIRST_ROUND",
                        "ROUND_TYPE_WINNERS_SECOND_ROUND",
                        "ROUND_TYPE_WINNERS_THIRD_ROUND",
                        "ROUND_TYPE_LOSERS_MATCH",
                        "ROUND_TYPE_LOSERS_FINALS",
                        "ROUND_TYPE_LOSERS_SEMI_FINALS",
                        "ROUND_TYPE_LOSERS_QUARTER_FINALS",
                        "ROUND_TYPE_LOSERS_ROUND_OF_16",
                        "ROUND_TYPE_LOSERS_FIRST_ROUND",
                        "ROUND_TYPE_LOSERS_SECOND_ROUND",
                        "ROUND_TYPE_LOSERS_THIRD_ROUND",
                        "ROUND_TYPE_REGIONAL_QUALIFIERS",
                        "ROUND_TYPE_MAIN_CARD",
                        "ROUND_TYPE_PRELIMINARY_CARD",
                        "ROUND_TYPE_EARLY_PRELIMINARY_CARD"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "A game for places 3,4.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Final round before another round to come.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "\"Conference\" in the MLB is American/National League, so CONFERENCE_FINALS\ncan mean the League Championship Series for those leagues. In the NCAA\nBasketball post-season, conferences have tournaments, so\nCONFERENCE_FINALS is the final of the conference tournament.",
                        "For MLB, CONFERENCE_SEMI_FINALS is the Division Series.",
                        "",
                        "",
                        "",
                        "In the NCAA basketball post-season, conferences have post season\ntournaments.",
                        "",
                        "Wild Card game or series.",
                        "",
                        "A special tournamnt, e.g., \"Afghanistan, Ireland and Scotland tour of\nUAE\".",
                        "In college football, the post-season games are conducted in bowls. For\nmore information, see: https://en.wikipedia.org/wiki/Bowl_game.",
                        "",
                        "",
                        "The concept of season split into two is very popular among latin american\nleagues see: https://en.wikipedia.org/wiki/Apertura_and_Clausura",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Phases are similar to rounds but mostly used in Brazilian leagues where\nrounds are normally used in cups.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Some tournaments (for example, it's often seen in eSports tournaments)\nare divided into two sets of brackets, the winners (W) bracket and losers\n(L) bracket. Typically the tournament starts with initial matches between\nall teams which are followed by winners matches and losers matches. The\nlosers of the winners matches and the winners of the losers matches\ncompete in decider matches which determine which teams return to the W\nbracket. Afterwards any team that losses a match in the W bracket\ncontinues playing in the L bracket (for more info:\nhttps://en.wikipedia.org/wiki/Double-elimination_tournament).",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Often used in League of Legends leagues. the regional qualifiers decide\nwhich teams go to the world championship.",
                        "Used in UFC and MMA events, where fights are divided into \"Main\"\n\"Preliminary\" and \"Early Preliminary\" fight cards, for more info \"\n\"https://en.wikipedia.org/wiki/List_of_UFC_events\".",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "STATUS_UNKNOWN",
                        "STATUS_DONE",
                        "STATUS_IN_PROGRESS",
                        "STATUS_NOT_STARTED",
                        "STATUS_POSTPONED",
                        "STATUS_CANCELLED",
                        "STATUS_DELAYED",
                        "STATUS_TBD",
                        "STATUS_SUSPENDED",
                        "STATUS_WITHDRAWN",
                        "STATUS_FORFEITED",
                        "STATUS_BREAK",
                        "STATUS_VACATED",
                        "STATUS_FORFEIT_AWAY_VACATED_HOME",
                        "STATUS_FORFEIT_HOME_VACATED_AWAY"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "timeSpan": {
                    "$ref": "TimeSpan",
                    "description": "Time-span of the game."
                },
                "unpluggedEventId": {
                    "description": "ID of youtube.unplugged.Event.",
                    "type": "string"
                },
                "venue": {
                    "$ref": "Venue",
                    "description": "Venue of the event."
                },
                "videoAssets": {
                    "description": "Video representing the event -- highlights/previews come in here.",
                    "items": {
                        "$ref": "VideoAsset"
                    },
                    "type": "array"
                },
                "week": {
                    "$ref": "Ordinal",
                    "description": "The week of the game (e.g week 12 out of 17 weeks of NFL)."
                }
            },
            "type": "object"
        },
        "EventDetails": {
            "description": "Next tag: 23",
            "id": "EventDetails",
            "properties": {
                "corpus": {
                    "description": "Corpus type for this event (SVOD/TVOD/LIVE).",
                    "enum": [
                        "CORPUS_UNKNOWN",
                        "CORPUS_SVOD",
                        "CORPUS_TVOD",
                        "CORPUS_TV",
                        "CORPUS_YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Represents transactional content.",
                        "Represents live tv.",
                        "Represents youtube creator content."
                    ],
                    "type": "string"
                },
                "countryRestriction": {
                    "$ref": "CountryRestriction",
                    "description": "Country restrictions for this event."
                },
                "customPlayerMetadata": {
                    "$ref": "CustomPlayerMetadata"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Additional info about the event."
                },
                "endTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "entityNetworks": {
                    "$ref": "EntityNetworks"
                },
                "eventSportsDetails": {
                    "$ref": "EventSportsDetails"
                },
                "fifeImages": {
                    "description": "Set of fife images, which contain fife url and aspect ratio, for event.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "genres": {
                    "description": "List of genres for this event.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "Set of ingestion images, converted directly from external sources, for\nevent.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultOnly": {
                    "type": "boolean"
                },
                "networkIds": {
                    "description": "List of TV networks the event airs on.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "originalAirDateTimestamp": {
                    "description": "Timestamp of the first air date of this program.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "partnerGenres": {
                    "description": "List of raw genre strings from parnter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "primaryNetworkId": {
                    "description": "The top-level network the event airs on.",
                    "type": "string"
                },
                "rating": {
                    "description": "Rating of this event.",
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "recommendedAudience": {
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "sportsEventEntity": {
                    "$ref": "EntityEntity",
                    "description": "Optional sports event entity associated with this event.\nOnly the id field is set."
                },
                "sportsTitle": {
                    "$ref": "TranslationPack",
                    "description": "Sports title of the event. This may be something as general as \"NBA\",\nor a bit more specific as \"NBA Playoffs\", while the title field of the\nevent would be something more specific to the actual event,\nlike \"Warriors vs OtherTeam\"."
                },
                "startTime": {
                    "description": "For standard events, this is the start and end time when this event\nfirst occurred (live aired OR earliest airing on original air date).\nFor sports-based events, we have a fallback that might populate this\nusing non-live airings.  See notes on fields\n|event_sports_details.game_timestamp| and |event_sports_details.game_date|",
                    "format": "google-datetime",
                    "type": "string"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Primary title of the event."
                },
                "vodDetails": {
                    "$ref": "VodDetails"
                }
            },
            "type": "object"
        },
        "EventIngestionMetadata": {
            "description": "Event channels only.",
            "id": "EventIngestionMetadata",
            "properties": {
                "awayTeamChannelId": {
                    "description": "For certain team-based games, the away team playing.",
                    "type": "string"
                },
                "homeTeamChannelId": {
                    "description": "For certain team-based games, the home team playing.",
                    "type": "string"
                },
                "isSportsEvent": {
                    "description": "Whether the event is a sports event (game).",
                    "type": "boolean"
                },
                "leagueChannelIds": {
                    "description": "the leagues for the sports event. Like the winner Olympics.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "roundType": {
                    "description": "For games only, whether it's a semi-final, final, etc.",
                    "enum": [
                        "ROUND_TYPE_UNKNOWN",
                        "ROUND_TYPE_FINALS",
                        "ROUND_TYPE_SEMI_FINALS",
                        "ROUND_TYPE_QUARTER_FINALS",
                        "ROUND_TYPE_ROUND_OF_16",
                        "ROUND_TYPE_ROUND_OF_32",
                        "ROUND_TYPE_ROUND_OF_64",
                        "ROUND_TYPE_ROUND_OF_128",
                        "ROUND_TYPE_ROUND_OF_256",
                        "ROUND_TYPE_GROUP_STAGE",
                        "ROUND_TYPE_FIRST_GROUP_STAGE",
                        "ROUND_TYPE_SECOND_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_FIRST_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_SECOND_GROUP_STAGE",
                        "ROUND_TYPE_QUALIFYING_FINALS_GROUP_STAGE",
                        "ROUND_TYPE_THIRD_PLACE",
                        "ROUND_TYPE_FIFTH_PLACE",
                        "ROUND_TYPE_SEVENTH_PLACE",
                        "ROUND_TYPE_NINTH_PLACE",
                        "ROUND_TYPE_ELEVENTH_PLACE",
                        "ROUND_TYPE_THIRTEENTH_PLACE",
                        "ROUND_TYPE_FIFTEENTH_PLACE",
                        "ROUND_TYPE_SEVENTEENTH_PLACE",
                        "ROUND_TYPE_NINETEENTH_PLACE",
                        "ROUND_TYPE_TWENTY_FIRST_PLACE",
                        "ROUND_TYPE_TWENTY_THIRD_PLACE",
                        "ROUND_TYPE_PRESEASON",
                        "ROUND_TYPE_REGULAR_SEASON",
                        "ROUND_TYPE_POST_SEASON",
                        "ROUND_TYPE_RECLASSIFICATION",
                        "ROUND_TYPE_FRIENDLY",
                        "ROUND_TYPE_QUALIFIER",
                        "ROUND_TYPE_FIRST_ROUND",
                        "ROUND_TYPE_SECOND_ROUND",
                        "ROUND_TYPE_THIRD_ROUND",
                        "ROUND_TYPE_FOURTH_ROUND",
                        "ROUND_TYPE_FIFTH_ROUND",
                        "ROUND_TYPE_SIXTH_ROUND",
                        "ROUND_TYPE_SEVENTH_ROUND",
                        "ROUND_TYPE_EIGHTH_ROUND",
                        "ROUND_TYPE_FINAL_ROUND",
                        "ROUND_TYPE_SUPER_CUP",
                        "ROUND_TYPE_PRELIMINARY_ROUND",
                        "ROUND_TYPE_FIRST_PRELIMINARY_ROUND",
                        "ROUND_TYPE_SECOND_PRELIMINARY_ROUND",
                        "ROUND_TYPE_PRELIMINARY_FINALS",
                        "ROUND_TYPE_INTER_CONFED_PLAYOFF",
                        "ROUND_TYPE_FIRST_QUALIFYING_ROUND",
                        "ROUND_TYPE_SECOND_QUALIFYING_ROUND",
                        "ROUND_TYPE_THIRD_QUALIFYING_ROUND",
                        "ROUND_TYPE_FOURTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_FIFTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_SIXTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_SEVENTH_QUALIFYING_ROUND",
                        "ROUND_TYPE_PLAYOFFS",
                        "ROUND_TYPE_FIRST_PLAYOFF_ROUND",
                        "ROUND_TYPE_SECOND_PLAYOFF_ROUND",
                        "ROUND_TYPE_CONFERENCE_FINALS",
                        "ROUND_TYPE_CONFERENCE_SEMI_FINALS",
                        "ROUND_TYPE_CONFERENCE_QUARTER_FINALS",
                        "ROUND_TYPE_CONFERENCE_SECOND_ROUND",
                        "ROUND_TYPE_CONFERENCE_FIRST_ROUND",
                        "ROUND_TYPE_CONFERENCE_TOURNAMENT",
                        "ROUND_TYPE_ALL_STAR",
                        "ROUND_TYPE_WILD_CARD",
                        "ROUND_TYPE_ROUND_ROBIN",
                        "ROUND_TYPE_TOURNAMENT",
                        "ROUND_TYPE_BOWLS",
                        "ROUND_TYPE_CHAMPIONSHIP",
                        "ROUND_TYPE_RELEGATION",
                        "ROUND_TYPE_OPENING_SEASON",
                        "ROUND_TYPE_OPENING_SEASON_FINALS",
                        "ROUND_TYPE_OPENING_SEASON_SEMI_FINALS",
                        "ROUND_TYPE_OPENING_SEASON_QUARTER_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON",
                        "ROUND_TYPE_CLOSING_SEASON_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON_SEMI_FINALS",
                        "ROUND_TYPE_CLOSING_SEASON_QUARTER_FINALS",
                        "ROUND_TYPE_APERTURA",
                        "ROUND_TYPE_APERTURA_FINALS",
                        "ROUND_TYPE_APERTURA_SEMI_FINALS",
                        "ROUND_TYPE_APERTURA_QUARTER_FINALS",
                        "ROUND_TYPE_APERTURA_EIGHTH_FINALS",
                        "ROUND_TYPE_CLAUSURA",
                        "ROUND_TYPE_CLAUSURA_FINALS",
                        "ROUND_TYPE_CLAUSURA_SEMI_FINALS",
                        "ROUND_TYPE_CLAUSURA_QUARTER_FINALS",
                        "ROUND_TYPE_CLAUSURA_EIGHTH_FINALS",
                        "ROUND_TYPE_FIRST_PHASE",
                        "ROUND_TYPE_FIRST_PHASE_SEMI_FINAL",
                        "ROUND_TYPE_FIRST_PHASE_FINAL",
                        "ROUND_TYPE_SECOND_PHASE",
                        "ROUND_TYPE_SECOND_PHASE_SEMI_FINAL",
                        "ROUND_TYPE_SECOND_PHASE_FINAL",
                        "ROUND_TYPE_HEXAGONAL_FINAL",
                        "ROUND_TYPE_QUALIFICATION_ROUND",
                        "ROUND_TYPE_GRAND_FINAL",
                        "ROUND_TYPE_ELIMINATION_FINAL",
                        "ROUND_TYPE_INITIAL_MATCH",
                        "ROUND_TYPE_DECIDER_MATCH",
                        "ROUND_TYPE_WINNERS_MATCH",
                        "ROUND_TYPE_WINNERS_FINALS",
                        "ROUND_TYPE_WINNERS_SEMI_FINALS",
                        "ROUND_TYPE_WINNERS_QUARTER_FINALS",
                        "ROUND_TYPE_WINNERS_ROUND_OF_16",
                        "ROUND_TYPE_WINNERS_FIRST_ROUND",
                        "ROUND_TYPE_WINNERS_SECOND_ROUND",
                        "ROUND_TYPE_WINNERS_THIRD_ROUND",
                        "ROUND_TYPE_LOSERS_MATCH",
                        "ROUND_TYPE_LOSERS_FINALS",
                        "ROUND_TYPE_LOSERS_SEMI_FINALS",
                        "ROUND_TYPE_LOSERS_QUARTER_FINALS",
                        "ROUND_TYPE_LOSERS_ROUND_OF_16",
                        "ROUND_TYPE_LOSERS_FIRST_ROUND",
                        "ROUND_TYPE_LOSERS_SECOND_ROUND",
                        "ROUND_TYPE_LOSERS_THIRD_ROUND",
                        "ROUND_TYPE_REGIONAL_QUALIFIERS",
                        "ROUND_TYPE_MAIN_CARD",
                        "ROUND_TYPE_PRELIMINARY_CARD",
                        "ROUND_TYPE_EARLY_PRELIMINARY_CARD"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "A game for places 3,4.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Final round before another round to come.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "\"Conference\" in the MLB is American/National League, so CONFERENCE_FINALS\ncan mean the League Championship Series for those leagues. In the NCAA\nBasketball post-season, conferences have tournaments, so\nCONFERENCE_FINALS is the final of the conference tournament.",
                        "For MLB, CONFERENCE_SEMI_FINALS is the Division Series.",
                        "",
                        "",
                        "",
                        "In the NCAA basketball post-season, conferences have post season\ntournaments.",
                        "",
                        "Wild Card game or series.",
                        "",
                        "A special tournamnt, e.g., \"Afghanistan, Ireland and Scotland tour of\nUAE\".",
                        "In college football, the post-season games are conducted in bowls. For\nmore information, see: https://en.wikipedia.org/wiki/Bowl_game.",
                        "",
                        "",
                        "The concept of season split into two is very popular among latin american\nleagues see: https://en.wikipedia.org/wiki/Apertura_and_Clausura",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Phases are similar to rounds but mostly used in Brazilian leagues where\nrounds are normally used in cups.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Some tournaments (for example, it's often seen in eSports tournaments)\nare divided into two sets of brackets, the winners (W) bracket and losers\n(L) bracket. Typically the tournament starts with initial matches between\nall teams which are followed by winners matches and losers matches. The\nlosers of the winners matches and the winners of the losers matches\ncompete in decider matches which determine which teams return to the W\nbracket. Afterwards any team that losses a match in the W bracket\ncontinues playing in the L bracket (for more info:\nhttps://en.wikipedia.org/wiki/Double-elimination_tournament).",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Often used in League of Legends leagues. the regional qualifiers decide\nwhich teams go to the world championship.",
                        "Used in UFC and MMA events, where fights are divided into \"Main\"\n\"Preliminary\" and \"Early Preliminary\" fight cards, for more info \"\n\"https://en.wikipedia.org/wiki/List_of_UFC_events\".",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "startTimeSecs": {
                    "description": "Time when the event occurred. Note that this is not the airing time.\nDEPRECATED in favor of IngestionMetadata.original_air_time_secs. They are\nthe same for events.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EventSportsDetails": {
            "description": "Next tag: 7\nFor sports events, the fields |game_date| and |game_time|\ncapture the start time when the sports event actually occurred\n(not its airing time). Note this is a separate concept from the\nevent start_time and end_time which capture the live airing times.\nIt is also possible that the start times are identical.",
            "id": "EventSportsDetails",
            "properties": {
                "gameDate": {
                    "$ref": "Date",
                    "description": "The date of the game."
                },
                "gameTime": {
                    "description": "The date and time of the game start, accounting for time zone.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "teamDetails": {
                    "description": "List of details for teams in this event\nNote: shares TeamDetails proto with Program",
                    "items": {
                        "$ref": "SportsDetailsTeamDetailsTeamDetails"
                    },
                    "type": "array"
                },
                "tmsOrganizationId": {
                    "description": "TMS ID for the sports organization.",
                    "type": "string"
                },
                "umsLeagueId": {
                    "description": "When reconciled, UMS IDs for leagues this event is part of.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "venue": {
                    "$ref": "VenueDetails",
                    "description": "The venue of the sports event.\nNote: shares VenueDetails proto with Program"
                }
            },
            "type": "object"
        },
        "EventUniqueContentMetadata": {
            "description": "for league and team channels.",
            "id": "EventUniqueContentMetadata",
            "properties": {
                "eventChannelId": {
                    "description": "external channel id of the event.",
                    "type": "string"
                },
                "startTimeSeconds": {
                    "description": "event start time.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FailedStationInfo": {
            "description": "Information of station with failure.",
            "id": "FailedStationInfo",
            "properties": {
                "error": {
                    "description": "Error details.",
                    "type": "string"
                },
                "userStationId": {
                    "description": "Id of station",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FanoutProcessorLog": {
            "description": "Fanout processor log.",
            "id": "FanoutProcessorLog",
            "properties": {
                "updateColumns": {
                    "description": "Updated column names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "watchColumns": {
                    "description": "Watched column names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GeneratedNetworkPortalDetails": {
            "id": "GeneratedNetworkPortalDetails",
            "properties": {
                "shelves": {
                    "items": {
                        "$ref": "NetworkPortalShelf"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetAlertingStationsResponse": {
            "id": "GetAlertingStationsResponse",
            "properties": {
                "alertingStations": {
                    "additionalProperties": {
                        "$ref": "AlertList"
                    },
                    "description": "Map Station ID to a list of alerts affecting that station.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "GetAllIncidentsResponse": {
            "id": "GetAllIncidentsResponse",
            "properties": {
                "incidents": {
                    "items": {
                        "$ref": "YtvIncident"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetLatestActiveManualScheduleVersionResponse": {
            "description": "Response message for the OpsScheduleService.GetLatestActiveScheduleVersion\nRPC",
            "id": "GetLatestActiveManualScheduleVersionResponse",
            "properties": {
                "versionStationMap": {
                    "additionalProperties": {
                        "$ref": "ScheduleVersion"
                    },
                    "description": "Versions of stations in request.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "GetScheduleRequest": {
            "description": "Request message for fetching schedule of single station.",
            "id": "GetScheduleRequest",
            "properties": {
                "scheduleFetchParams": {
                    "$ref": "ScheduleFetchParams",
                    "description": "Params for fetching Schedule."
                },
                "stationId": {
                    "description": "id of station.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetStationIncidentInfoRequest": {
            "id": "GetStationIncidentInfoRequest",
            "properties": {
                "name": {
                    "description": "Station id for which to get IncidentInfo, for example \"stations/STxxxx=\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetStationIncidentInfoResponse": {
            "id": "GetStationIncidentInfoResponse",
            "properties": {
                "incidentInfo": {
                    "$ref": "IncidentInfo",
                    "description": "IncidentInfo for requested entity."
                }
            },
            "type": "object"
        },
        "GetStationMetricDataRequest": {
            "id": "GetStationMetricDataRequest",
            "properties": {
                "end": {
                    "description": "end time of fetching data",
                    "format": "google-datetime",
                    "type": "string"
                },
                "name": {
                    "description": "Station ID for which to obtain data, for example \"stations/STxxxxx=\".",
                    "type": "string"
                },
                "params": {
                    "description": "Params for fetching metrics.",
                    "items": {
                        "$ref": "MetricsParam"
                    },
                    "type": "array"
                },
                "start": {
                    "description": "start time of fetching data",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetStationMetricDataResponse": {
            "id": "GetStationMetricDataResponse",
            "properties": {
                "metricData": {
                    "description": "all metric data.",
                    "items": {
                        "$ref": "MetricData"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetStationScteConfigRequest": {
            "description": "Request message for the YouTubeTVOpsService.GetStationScteConfig RPC",
            "id": "GetStationScteConfigRequest",
            "properties": {
                "stationId": {
                    "description": "UMS Station Id",
                    "type": "string"
                },
                "time": {
                    "description": "The time of snapshot;",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetStationScteConfigResponse": {
            "description": "Response message for the YouTubeTVOpsService.GetStationScteConfig RPC",
            "id": "GetStationScteConfigResponse",
            "properties": {
                "airing": {
                    "description": "The scheduled airings around the snapshot.",
                    "items": {
                        "$ref": "Scte224Airing"
                    },
                    "type": "array"
                },
                "currentSourceId": {
                    "description": "Fox id of current source station id.",
                    "type": "string"
                },
                "expectedSourceId": {
                    "description": "Fox id of expected source station id.",
                    "type": "string"
                },
                "notMatchedPolicyId": {
                    "description": "The policy ID that was not matched as the scheduled airing.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetStationScteMarkersRequest": {
            "description": "Request message for the YouTubeTVOpsService.GetStationScteMarkers RPC",
            "id": "GetStationScteMarkersRequest",
            "properties": {
                "scteMarkerType": {
                    "description": "Type of scte marker that need to fetch",
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "TYPE_ADS",
                        "TYPE_AIRING"
                    ],
                    "enumDescriptions": [
                        "Unspecified type",
                        "Marker related to ads transition",
                        "Marker related to airing."
                    ],
                    "type": "string"
                },
                "stationId": {
                    "description": "UMS Station Id",
                    "type": "string"
                },
                "timeRange": {
                    "$ref": "TimeRange",
                    "description": "The start time of schedule;"
                }
            },
            "type": "object"
        },
        "GetStationScteMarkersResponse": {
            "description": "Response message for the YouTubeTVOpsService.GetStationScteMarkers RPC",
            "id": "GetStationScteMarkersResponse",
            "properties": {
                "adMarkers": {
                    "description": "Scte35 markers related to ads.",
                    "items": {
                        "$ref": "AdTransition"
                    },
                    "type": "array"
                },
                "airingMarkers": {
                    "description": "Scte35 markers related to airings.",
                    "items": {
                        "$ref": "Scte35Marker"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetStationsUsingStreamSourceRequest": {
            "id": "GetStationsUsingStreamSourceRequest",
            "properties": {
                "sourceStationId": {
                    "description": "id of source station",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GetStationsUsingStreamSourceResponse": {
            "id": "GetStationsUsingStreamSourceResponse",
            "properties": {
                "userStations": {
                    "description": "information of stations that using the source station in the request",
                    "items": {
                        "$ref": "YtvStation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetUserLibraryResponse": {
            "description": "Response type for GetUserLibrary.",
            "id": "GetUserLibraryResponse",
            "properties": {
                "items": {
                    "description": "Pagination info / next page tocken",
                    "items": {
                        "$ref": "LibraryItem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetUserStationsResponse": {
            "description": "Response for GetUserStations.",
            "id": "GetUserStationsResponse",
            "properties": {
                "stations": {
                    "items": {
                        "$ref": "SidelineStation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetUserVideosResponse": {
            "description": "Response type for GetUserVideos.",
            "id": "GetUserVideosResponse",
            "properties": {
                "recordings": {
                    "description": "Pagination info / next page tocken",
                    "items": {
                        "$ref": "Recording"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GoogleYoutubeUnpluggedTvopsV1TvingestionIncidentDetails": {
            "description": "Details of tv ingest incident entity.",
            "id": "GoogleYoutubeUnpluggedTvopsV1TvingestionIncidentDetails",
            "properties": {
                "affectedStationIds": {
                    "description": "Ums ids of stations that are affected by this incident.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "assignee": {
                    "description": "Ldap of assignee of the incident.",
                    "type": "string"
                },
                "creator": {
                    "description": "Ldap of creator of the incident.",
                    "type": "string"
                },
                "customerImpact": {
                    "description": "True if this incident has customer impact.",
                    "type": "boolean"
                },
                "lastUpdatedLdap": {
                    "description": "Ldap of last updated person.",
                    "type": "string"
                },
                "lastUpdatedTime": {
                    "description": "Recent time when incident was updated.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "marketsAffected": {
                    "description": "Market affected by incident, show \"Multiple markets\" if more than 1 markets\naffected. e.g. \"AUS\".",
                    "type": "string"
                },
                "popsAffected": {
                    "description": "Pops affected by incident, show \"Multiple Pops\" if more than 1 pop\naffected. e.g. \"AUS202\".",
                    "type": "string"
                },
                "recentLogEntry": {
                    "description": "All log entries.",
                    "items": {
                        "$ref": "GoogleYoutubeUnpluggedTvopsV1TvingestionIncidentDetailsIncidentLogEntry"
                    },
                    "type": "array"
                },
                "reportTime": {
                    "description": "Time when incident was reported.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "severity": {
                    "description": "Severity number of this incident, range from 0-6, 0 is most severe.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of incident. e.g. \"Resolved\".",
                    "type": "string"
                },
                "userAffected": {
                    "description": "Number of users that are affected.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "GoogleYoutubeUnpluggedTvopsV1TvingestionIncidentDetailsIncidentLogEntry": {
            "description": "Message contains information of incident logs.",
            "id": "GoogleYoutubeUnpluggedTvopsV1TvingestionIncidentDetailsIncidentLogEntry",
            "properties": {
                "details": {
                    "description": "Details of this log.",
                    "type": "string"
                },
                "logTime": {
                    "description": "Time when it logged.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "logger": {
                    "description": "Ldap of person who logged it.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GracenoteSportsIdSet": {
            "id": "GracenoteSportsIdSet",
            "properties": {
                "gracenoteSportsId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GroundTruthIdSet": {
            "id": "GroundTruthIdSet",
            "properties": {
                "reference": {
                    "$ref": "EntityReference",
                    "description": "The reference to the ground truth source entity in CMS."
                }
            },
            "type": "object"
        },
        "Id": {
            "id": "Id",
            "properties": {
                "corpus": {
                    "description": "Name of the corpus.\n\nA corpus must be created in Model T before using it.\n\nThis field is required.",
                    "type": "string"
                },
                "documentId": {
                    "description": "Opaque document identifier -- must not contain any PII data, must be a\nvalid UTF-8 string and must be less that 1 KB.\n\nDocument ids must be unique within a corpus. For GAIA corpora, please see\nthe caveats in go/model-t-gaia.\n\nThis field is available in serving under\nGenericSearchResponse.Result.info.GenericCorpusMetadata.document_id. It's\nalso available as an auto-generated atom field, named '_document_id', which\ncan be used in search queries.\n\nThis field is required.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IdSet": {
            "description": "The set of optional IDs that identify a particular asset in\nvarious other systems. In many cases all IDs won't be populated.\n\nNext tag: 28",
            "id": "IdSet",
            "properties": {
                "blackoutKey": {
                    "description": "Externally provided ids for stations received in the blackouts feed.",
                    "items": {
                        "$ref": "BlackoutKey"
                    },
                    "type": "array"
                },
                "bonesId": {
                    "description": "Soft deprecation warning for the following 3 fields:\nbones_id, tms_id, tms_root_id\nThese fields will be populated in their respective idset as part of\na migration.  New code should check there for more accurate values.\nAlso see http://go/ytv-idset\nBones Id.",
                    "type": "string"
                },
                "bonesIds": {
                    "$ref": "BonesIdSet"
                },
                "cmsGenerated": {
                    "$ref": "CmsSourceId"
                },
                "cmsIdSet": {
                    "$ref": "CmsIdSet"
                },
                "cmsManualIdSet": {
                    "$ref": "CmsManualIdSet"
                },
                "contentOwnerId": {
                    "description": "YT content owner id for revenue, commerce, monetization, and DAI.",
                    "format": "int64",
                    "type": "string"
                },
                "eidrId": {
                    "description": "EIDR is a universal unique identifier system for movie and television\nassets. EIDR IDs are globally unique identifiers for audio-visual assets\nrelevant to entertainment commerce.\n\nThe EIDR ID contains an EIDR-specific prefix (registered with the\nInternational DOI Foundation) followed by a hexadecimal string.",
                    "type": "string"
                },
                "espnIds": {
                    "$ref": "EspnIdSet"
                },
                "gracenoteSportsIds": {
                    "$ref": "GracenoteSportsIdSet"
                },
                "groundTruthIdSet": {
                    "$ref": "GroundTruthIdSet"
                },
                "ingestionId": {
                    "description": "Partner provided id, at the time of ingestion.",
                    "items": {
                        "$ref": "IngestionId"
                    },
                    "type": "array"
                },
                "itemId": {
                    "$ref": "ItemId",
                    "description": "For commerce entity, this refers to the corresponding YPC item."
                },
                "kgIdSet": {
                    "$ref": "KgIdSet"
                },
                "mid": {
                    "description": "Knowledge graph id.",
                    "type": "string"
                },
                "nucleusIds": {
                    "$ref": "NucleusIdSet",
                    "description": "Nucleus ids."
                },
                "tmsId": {
                    "description": "TMS id.",
                    "type": "string"
                },
                "tmsIds": {
                    "$ref": "TmsIdSet"
                },
                "tmsRootId": {
                    "description": "TMS root id.  At the moment, only Episodes tms root ids are populated here.",
                    "type": "string"
                },
                "unpluggedIds": {
                    "$ref": "UnpluggedIdSet"
                },
                "ursaIds": {
                    "$ref": "UrsaIdSet",
                    "description": "Ursa ids."
                },
                "vodIdSet": {
                    "$ref": "VodIdSet",
                    "description": "VOD info."
                },
                "vodIds": {
                    "$ref": "YoutubeUnpluggedOpsVodIdSet"
                },
                "youtubeExternalId": {
                    "description": "Youtube External Id.",
                    "type": "string"
                },
                "ytSeriesIds": {
                    "$ref": "YTSeriesIdSet"
                }
            },
            "type": "object"
        },
        "Image": {
            "description": "Next tag: 18",
            "id": "Image",
            "properties": {
                "aspectRatio": {
                    "enum": [
                        "ASPECT_RATIO_UNKNOWN",
                        "ASPECT_RATIO_1_1",
                        "ASPECT_RATIO_4_3",
                        "ASPECT_RATIO_3_4",
                        "ASPECT_RATIO_16_9",
                        "ASPECT_RATIO_9_16",
                        "ASPECT_RATIO_2_3",
                        "ASPECT_RATIO_3_2",
                        "ASPECT_RATIO_NOT_DEFINED",
                        "ASPECT_RATIO_21_9",
                        "ASPECT_RATIO_5_2",
                        "ASPECT_RATIO_NO_PADDING"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "No guarantee on the aspsect ratio of this image, we do guarantee that it\nhas no padding and consequently will be whatever ratio the raw image is."
                    ],
                    "type": "string"
                },
                "attribution": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "background": {
                    "enum": [
                        "BACKGROUND_UNKNOWN",
                        "BACKGROUND_LIGHT",
                        "BACKGROUND_DARK"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "category": {
                    "enum": [
                        "UNKNOWN",
                        "LOGO",
                        "BANNER",
                        "PHOTO",
                        "HEADSHOT",
                        "CAST_MEMBER",
                        "CAST_MEMBERS"
                    ],
                    "enumDescriptions": [
                        "",
                        "A Logo is generally a textual image of the show name.",
                        "Banner of the entity. E.g. banner for a TV show, poster art for a movie,\netc. This is generally a photo with the series/program name\noverlaid.",
                        "A video still from the program/series.",
                        "Person's headshot.",
                        "Cast member image.",
                        "Cast members (group picture)."
                    ],
                    "type": "string"
                },
                "groupId": {
                    "description": "If two images share the same group_id then they will be a different\nresolution/aspect ratio of the same image.  If group id is empty then it's\nunknown if this image is the same as another.\nThis field is meant to be opaque but as an implementation note it is a\nnumber if the source is TMS and if the source is UNKNOWN it may be from\nbones in the format of prefix:number.",
                    "type": "string"
                },
                "height": {
                    "format": "int32",
                    "type": "integer"
                },
                "priority": {
                    "format": "int32",
                    "type": "integer"
                },
                "requireAttribution": {
                    "description": "If set then this image requires attribution to the string names in the\nattribution list.",
                    "type": "boolean"
                },
                "seasonNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "sourceDetails": {
                    "$ref": "ImageSourceDetails"
                },
                "style": {
                    "enum": [
                        "STYLE_UNKNOWN",
                        "STYLE_COLOR",
                        "STYLE_BLACK_AND_WHITE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "tier": {
                    "enum": [
                        "TIER_UNKNOWN",
                        "TIER_SERIES",
                        "TIER_SEASON",
                        "TIER_EPISODE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "TYPE_STATIC_URL",
                        "TYPE_FIFE_URL",
                        "TYPE_YT_EXTERNAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "This field is only valid if type is STATIC_URL or FIFE_URL",
                    "type": "string"
                },
                "width": {
                    "format": "int32",
                    "type": "integer"
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "This field is only valid if type is TYPE_YT_EXTERNAL"
                },
                "ytThumbnailVersion": {
                    "description": "This field is only valid if type is TYPE_YT_EXTERNAL",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImageSourceDetails": {
            "description": "Next Id: 8",
            "id": "ImageSourceDetails",
            "properties": {
                "backlotId": {
                    "description": "This id is populated by backlot image ingestion.",
                    "type": "string"
                },
                "cmsEntityId": {
                    "description": "This id is populated by CMS during push-to-UMS.",
                    "type": "string"
                },
                "imageSource": {
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_TMS",
                        "SOURCE_PARTNER",
                        "SOURCE_OPS",
                        "SOURCE_YT_SERIES",
                        "SOURCE_METADATA_DEFAULT"
                    ],
                    "enumDescriptions": [
                        "",
                        "This enum was originally used for images from TMS/Gracenote.  However,\nour eventual goal is for CMS to contain any image source details and\nfor UMS to no longer need this.  Instead of attempting to rename the\nenum value at this time (it is used in too many places) we will\nuse this to mean \"CMS\" too.  When b/139066091 is fixed we can remove\nthe ImageSourceDetails proto sub-message from UMS Image.",
                        "This is used for images from Partner VOD deliveries.",
                        "This is used for images manually uploaded via Hades.",
                        "This is used for images sourced from YT Main for YT Series/Movies.",
                        "This is used for the default images added when no other images exist."
                    ],
                    "type": "string"
                },
                "opsUploader": {
                    "description": "This string is populated during upload to Hades with the email of\nthe uploader.",
                    "type": "string"
                },
                "parentEntityId": {
                    "description": "This value is meant to be populated for images that have a known\n\"parent\" entity in the image.  E.g. For a player headshot we will\npopulate the team entity ID here as the image includes the team's\nuniform and colors.",
                    "type": "string"
                },
                "partnerEntityId": {
                    "description": "This id is populated by Partner VOD ingestion.",
                    "type": "string"
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "This id is populated by YT series ingestion."
                }
            },
            "type": "object"
        },
        "IncidentDetails": {
            "description": "Details of incident entity.\nNext tag = 14",
            "id": "IncidentDetails",
            "properties": {
                "assignee": {
                    "description": "Ldap of assignee of the incident.",
                    "type": "string"
                },
                "creator": {
                    "description": "Ldap of creator of the incident.",
                    "type": "string"
                },
                "customerImpact": {
                    "description": "True if this incident has customer impact.",
                    "type": "boolean"
                },
                "lastUpdatedLdap": {
                    "description": "Ldap of last updated person.",
                    "type": "string"
                },
                "lastUpdatedTime": {
                    "description": "Recent time when incident was updated.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "logs": {
                    "description": "All log entries.",
                    "items": {
                        "$ref": "IncidentLogEntry"
                    },
                    "type": "array"
                },
                "marketsAffected": {
                    "description": "Market affected by incident, show \"Multiple markets\" if more than 1 markets\naffected. e.g. \"AUS\".",
                    "type": "string"
                },
                "popsAffected": {
                    "description": "Pops affected by incident, show \"Multiple Pops\" if more than 1 pop\naffected. e.g. \"AUS202\".",
                    "type": "string"
                },
                "reportTime": {
                    "description": "Time when incident was reported.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "severity": {
                    "description": "Severity number of this incident, range from 0-6, 0 is most severe.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of incident. e.g. \"Resolved\".",
                    "type": "string"
                },
                "userAffected": {
                    "description": "Number of users that are affected.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "IncidentInfo": {
            "id": "IncidentInfo",
            "properties": {
                "incidentDetails": {
                    "$ref": "IncidentDetails",
                    "description": "Detailed incident information."
                },
                "incidentId": {
                    "description": "Id associated with incident.",
                    "type": "string"
                },
                "relatedEntityIds": {
                    "description": "All the related unplugged IDs for this incident.",
                    "items": {
                        "$ref": "UnpluggedId"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IncidentInfoUpdateDetails": {
            "description": "Details of updating incident info",
            "id": "IncidentInfoUpdateDetails",
            "properties": {
                "incidentInfo": {
                    "$ref": "IncidentInfo",
                    "description": "IncidentInfo to update for requested Station."
                },
                "updateMask": {
                    "description": "Update field mask.",
                    "format": "google-fieldmask",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IncidentLogEntry": {
            "description": "Message contains information of incident logs.",
            "id": "IncidentLogEntry",
            "properties": {
                "details": {
                    "description": "Details of this log.",
                    "type": "string"
                },
                "logTime": {
                    "description": "Time when it logged.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "logger": {
                    "description": "Ldap of person who logged it.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IndexOperationLog": {
            "id": "IndexOperationLog",
            "properties": {
                "indexType": {
                    "enum": [
                        "INDEX_TYPE_UNKNOWN",
                        "INDEX_TYPE_UPDATE",
                        "INDEX_TYPE_RETRY",
                        "INDEX_TYPE_PERIODIC",
                        "INDEX_TYPE_REINDEX",
                        "INDEX_TYPE_FORCE",
                        "INDEX_TYPE_CHAINED_FOLLOWUP"
                    ],
                    "enumDescriptions": [
                        "",
                        "Index triggered by upstream systems about data change of the entity.",
                        "Index triggered by retries of previous failures.",
                        "Index triggered by IndexProcessor itself for daily index refresh.",
                        "Index triggered by index_all script.",
                        "Force index, ignore the fingerprints of the IndexRequests.",
                        "For logically chained task"
                    ],
                    "type": "string"
                },
                "indexTypeStr": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "STATE_UNKNOWN",
                        "STATE_INDEXED",
                        "STATE_SKIPPED",
                        "STATE_ERROR",
                        "STATE_DELAYED"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "status": {
                    "$ref": "StatusProto"
                }
            },
            "type": "object"
        },
        "IndexRequest": {
            "id": "IndexRequest",
            "properties": {
                "document": {
                    "$ref": "Document",
                    "description": "This field is required."
                },
                "requestType": {
                    "enum": [
                        "INCREMENTAL",
                        "BACKFILL"
                    ],
                    "enumDescriptions": [
                        "`INCREMENTAL` should be used for documents that have been recently\nupdated in your system.\n\nThe version timestamp must be in the range (now - 1 days, now + 1 day);\notherwise, the request will be rejected.\n\nUnder normal circumstances, documents will be serving globally within\nseconds.",
                        "`BACKFILL` should be used in the following cases:\n\n  - Populate your corpus with the initial set of data.\n  - Update your document schema (add, remove or update document fields).\n  - Send requests with timestamps earlier than the `INCREMENTAL` range.\n  - Refresh documents if your corpus has TTL wipeout.\n\nThe version timestamp must be less than now + 1 day; otherwise, the\nrequest will be rejected.\n\nUnder normal circumstances, documents will be serving globally within 1-2\ndays."
                    ],
                    "type": "string"
                },
                "userControl": {
                    "$ref": "UserControl",
                    "description": "This field is required."
                }
            },
            "type": "object"
        },
        "IngestionCopyInfo": {
            "description": "Information about ingested stream copy.",
            "id": "IngestionCopyInfo",
            "properties": {
                "copyId": {
                    "description": "id of copy",
                    "format": "int32",
                    "type": "integer"
                },
                "pop": {
                    "description": "pop which copy is collected from.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IngestionDetails": {
            "description": "Ingestion details of station.",
            "id": "IngestionDetails",
            "properties": {
                "enabledIngestionCopyInfo": {
                    "description": "list of pops of all copies",
                    "items": {
                        "$ref": "IngestionCopyInfo"
                    },
                    "type": "array"
                },
                "streamConfig": {
                    "$ref": "IngestionStreamConfig",
                    "description": "latest ingestion stream config"
                }
            },
            "type": "object"
        },
        "IngestionId": {
            "description": "This represents the id provided by the partner, for a given ingested item,\nfrom the time of ingestion.\n\nE.g if the item is being ingested from BONES, the value field would be id\nprovided by the bones system. And if the item is being provided by TMS,\nthe value here would represent the id given to us by TMS.\nNEXT ID: 7",
            "id": "IngestionId",
            "properties": {
                "context": {
                    "description": "This is a free form field where additional context for this ingestion\nsource can be stored (e.g. borg job, spreadsheet URL, or other meta\ninformation)",
                    "type": "string"
                },
                "firstIngestedTimestampUsec": {
                    "description": "The timestamp in microseconds when this entity was first ingested.",
                    "format": "int64",
                    "type": "string"
                },
                "source": {
                    "enum": [
                        "UNKNOWN",
                        "BONES",
                        "YTLC",
                        "SPREADSHEET",
                        "CAP",
                        "PARTNER_SERVICE",
                        "YT_SERIES",
                        "TMS",
                        "HUMAN",
                        "ESPN",
                        "CMS",
                        "KG"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "workflowId": {
                    "description": "Ops service workflow id, at time of ingestion, used for VOD should be\nmigrated off of this at some point.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IngestionMetadata": {
            "description": "Additional metadata from ingestion for channels and videos.\nNext tag: 19",
            "id": "IngestionMetadata",
            "properties": {
                "episodeMetadata": {
                    "$ref": "EpisodeIngestionMetadata",
                    "description": "Show videos (aka episodes) only."
                },
                "eventMetadata": {
                    "$ref": "EventIngestionMetadata",
                    "description": "Event channels only."
                },
                "isPaidProgramming": {
                    "description": "Whether the video or channel is paid programming. For channels, only event\nchannels can have this set. This is because we ingest paid programming\n(marked by gracenote) as events.",
                    "type": "boolean"
                },
                "isYoutubeContent": {
                    "description": "Whether the entity is YT/YTO content.",
                    "type": "boolean"
                },
                "kgId": {
                    "description": "Canonical KG id for the entity from ingestion. Channels only.",
                    "type": "string"
                },
                "language": {
                    "description": "The language code. Examples: \"en\", \"es\", \"fr\". Uses the ISO 639 standard.\nOnly applies to videos, show channels, and movie channels.",
                    "type": "string"
                },
                "originalAirTimeSecs": {
                    "description": "Original air date of the premiere. Only applies to videos, movie channels,\nand event channels. For movies with only release year, the date is set to\nJune 30 of that year.",
                    "format": "int64",
                    "type": "string"
                },
                "parentChannelId": {
                    "description": "Parent entity channel external id.",
                    "type": "string"
                },
                "primaryNetworkChannelId": {
                    "description": "Primary network for Show/Movie/Event.",
                    "type": "string"
                },
                "rating": {
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "recommendedAudience": {
                    "description": "From published ingestion metadata.",
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "showMetadata": {
                    "$ref": "ShowIngestionMetadata",
                    "description": "Show channels only."
                },
                "sportsLeagueMetadata": {
                    "$ref": "SportsLeagueIngestionMetadata",
                    "description": "Sports leagues only."
                },
                "sportsTeamMetadata": {
                    "$ref": "SportsTeamIngestionMetadata",
                    "description": "Sports teams only."
                },
                "stationMetadata": {
                    "$ref": "StationIngestionMetadata",
                    "description": "Station channels only."
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Title of the entity. Channels only."
                },
                "tmsId": {
                    "description": "TMS ID for entity from ingestion. Channels only.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IngestionStreamConfig": {
            "description": "Information about ingestion stream config",
            "id": "IngestionStreamConfig",
            "properties": {
                "ingestionId": {
                    "description": "Ingest stream ID, as returned from the /youtube/v3/liveStreams API.\nThis is of the form \"AbCDefGhI111232525222\".",
                    "type": "string"
                },
                "ytNamespace": {
                    "description": "Youtube Namespace for the live stream.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IrdInfo": {
            "id": "IrdInfo",
            "properties": {
                "irdManagement": {
                    "type": "string"
                },
                "irdName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ItemId": {
            "id": "ItemId",
            "properties": {
                "externalId": {
                    "description": "REQUIRED",
                    "type": "string"
                },
                "type": {
                    "description": "REQUIRED",
                    "enum": [
                        "ITEM_TYPE_UNKNOWN",
                        "ITEM_TYPE_VIDEO",
                        "ITEM_TYPE_SET",
                        "ITEM_TYPE_CHANNEL",
                        "ITEM_TYPE_LIVE",
                        "ITEM_TYPE_MUSIC",
                        "ITEM_TYPE_YOUTUBE_PRODUCT"
                    ],
                    "enumDescriptions": [
                        "Default",
                        "string base 64 video id",
                        "string base 64 set id",
                        "channel id",
                        "same as video, can we deprecate?",
                        "DEPRECATED. Once upon a time, music was going to be\nits own item type, but now it's an ITEM_TYPE_CHANNEL\nwith CONTENT_TYPE_MUSIC instead. See ContentType.",
                        "The item is a youtube level product. eg: Unlimited\nUse this item_type YouTube O & O (Owned and Operated) products.\nThe external id of the item is external id of the page."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "KeyValuePair": {
            "id": "KeyValuePair",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "KgIdSet": {
            "description": "Next ID: 6",
            "id": "KgIdSet",
            "properties": {
                "athleteMid": {
                    "type": "string"
                },
                "leagueMid": {
                    "type": "string"
                },
                "personMid": {
                    "type": "string"
                },
                "sportsEventMid": {
                    "type": "string"
                },
                "teamMid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "League": {
            "description": "Next tag: 13",
            "id": "League",
            "properties": {
                "activeSeason": {
                    "$ref": "ActiveSeason",
                    "description": "The currently active season."
                },
                "discoveryMetadata": {
                    "$ref": "DiscoveryMetadata",
                    "description": "DiscoveryMetadata Info"
                },
                "displayInfo": {
                    "$ref": "DisplayInfo"
                },
                "entity": {
                    "$ref": "EntityEntity"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "entity ID that will be populated in addition to entity.id field",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "IdSet."
                },
                "leagueInfo": {
                    "$ref": "LeagueInfo",
                    "description": "Basic info about the league."
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "source": {
                    "description": "The source of this league's ingestion.",
                    "enum": [
                        "LEAGUE_SOURCE_UNKNOWN",
                        "LEAGUE_SOURCE_KG",
                        "LEAGUE_SOURCE_SPREADSHEET"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LeagueInfo": {
            "description": "Basic info applicable to all the sports leagues.\nNext ID: 15",
            "id": "LeagueInfo",
            "properties": {
                "allowFollowLeague": {
                    "description": "When true, user is allowed to follow this league's channel.\nThis flag will be used for controlling the league recording options\nfrom the league page.",
                    "type": "boolean"
                },
                "allowFollowLeagueTeams": {
                    "description": "When true, user is allowed to follow this league's teams.\nThis flag will be used for displaying teams as recording options\nfrom the league page.",
                    "type": "boolean"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Description of the league."
                },
                "detailsLinkLeagueChannelId": {
                    "description": "External channel ID of the league details page the user should be taken to.\nIf not set (i.e. empty), will default to its own league channel ID.\n\nThis is used for the case where a league/sports event group does not have\nits own details page and the user is instead taken to the primary parent\nleague details page.",
                    "type": "string"
                },
                "discoveryMetadata": {
                    "description": "Any more entities that can help search and discovery.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "eventNounPlural": {
                    "$ref": "TranslationPack",
                    "description": "Noun to use to describe multiple events. E.g. \"events\", \"games\", \"matches\".\nIf not populated, will default to \"events\"."
                },
                "eventNounSingular": {
                    "$ref": "TranslationPack",
                    "description": "Noun to use to describe a single event. E.g. \"event\", \"game\", \"match\".\nIf not populated, will default to \"event\"."
                },
                "location": {
                    "$ref": "EntityEntity",
                    "description": "Location where the league happens recurringly."
                },
                "mostRecentChampion": {
                    "$ref": "EntityEntity",
                    "description": "Most recent champion team."
                },
                "mostTitles": {
                    "$ref": "LeagueTeamTitles",
                    "description": "Team with the most titles."
                },
                "nflLeagueInfo": {
                    "$ref": "NflLeagueInfo"
                },
                "socialProfiles": {
                    "description": "Social Profiles of the league.",
                    "items": {
                        "$ref": "SocialProfile"
                    },
                    "type": "array"
                },
                "sport": {
                    "$ref": "EntityEntity",
                    "description": "The sport played in the league."
                },
                "standings": {
                    "$ref": "Standings",
                    "description": "League standings info"
                },
                "teams": {
                    "description": "Entities of teams in this league.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "LeagueTeamTitles": {
            "description": "Information about league specific titles for a team.",
            "id": "LeagueTeamTitles",
            "properties": {
                "numberOfTitles": {
                    "format": "int32",
                    "type": "integer"
                },
                "team": {
                    "$ref": "EntityEntity"
                }
            },
            "type": "object"
        },
        "LensFlags": {
            "description": "Lens flags for the video.",
            "id": "LensFlags",
            "properties": {
                "hasLensAnnotation": {
                    "description": "If the video has lens annotation.",
                    "type": "boolean"
                },
                "programHasLensAnnotation": {
                    "description": "If the program of the video has any video with lens annotation.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "LibraryItem": {
            "description": "*\nEntity has been added into user library. When user start recordings,\nthen stopped, then started again - there are several start/end times with the\nsame Recording.",
            "id": "LibraryItem",
            "properties": {
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Description of the entity."
                },
                "status": {
                    "description": "From dvr_status.proto - current recording status.",
                    "enum": [
                        "DVR_STATUS_UNKNOWN",
                        "DVR_STATUS_ON",
                        "DVR_STATUS_OFF"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "timeRanges": {
                    "description": "Time range when user records the program.",
                    "items": {
                        "$ref": "TimeRange"
                    },
                    "type": "array"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Title of the entity. Required."
                },
                "unpluggedMetadata": {
                    "$ref": "UnpluggedMetadata",
                    "description": "Unplugged metadata of the entity. Required."
                },
                "userVideos": {
                    "description": "Number of recordings.",
                    "format": "int32",
                    "type": "integer"
                },
                "youtubeChannelId": {
                    "description": "Youtube external channel id. Required.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LinkedIdSet": {
            "description": "Set of ids that are linked to an entity.",
            "id": "LinkedIdSet",
            "properties": {
                "airingId": {
                    "description": "Related airing id of an airing blackout",
                    "type": "string"
                },
                "manualEditPolicyId": {
                    "description": "Id of manual edit blackout of automatic blackout.",
                    "type": "string"
                },
                "sourceStationId": {
                    "description": "Source station id of scte224 schedule airing.",
                    "type": "string"
                },
                "tmsProgramId": {
                    "description": "TMS program_id.",
                    "type": "string"
                },
                "umsProgramId": {
                    "description": "Unplugged program id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListEntitiesRequest": {
            "id": "ListEntitiesRequest",
            "properties": {
                "displayMode": {
                    "description": "Display mode of this request",
                    "enum": [
                        "MODE_UNSPECIFIED",
                        "MODE_BASIC",
                        "MODE_FULL"
                    ],
                    "enumDescriptions": [
                        "",
                        "Only list entities",
                        "List entities and all related entities"
                    ],
                    "type": "string"
                },
                "entityType": {
                    "description": "Type of the entities being fetched.",
                    "enum": [
                        "ENTITY_TYPE_UNKNOWN",
                        "ENTITY_TYPE_STATION",
                        "ENTITY_TYPE_INCIDENT",
                        "ENTITY_TYPE_STREAM"
                    ],
                    "enumDescriptions": [
                        "",
                        "Entity type is station.",
                        "Entity type is incident.",
                        "Entity type is stream."
                    ],
                    "type": "string"
                },
                "pageSize": {
                    "description": "The number of results to return in a page.",
                    "format": "int32",
                    "type": "integer"
                },
                "pageToken": {
                    "description": "A token representing the page to fetch, empty for the first fetch.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListEntitiesResponse": {
            "id": "ListEntitiesResponse",
            "properties": {
                "entities": {
                    "description": "list of entities",
                    "items": {
                        "$ref": "OpsEntity"
                    },
                    "type": "array"
                },
                "paginationDetails": {
                    "$ref": "PaginationDetails",
                    "description": "details of pagination"
                }
            },
            "type": "object"
        },
        "ListMajorEventsResponse": {
            "description": "The major event tables retrieved.\nNext Tag: 2",
            "id": "ListMajorEventsResponse",
            "properties": {
                "majorEvents": {
                    "$ref": "MajorEventsGroups",
                    "description": "The major event groups built for the query."
                }
            },
            "type": "object"
        },
        "ListOpsBlackoutsResponse": {
            "description": "List OpsBlackouts Response",
            "id": "ListOpsBlackoutsResponse",
            "properties": {
                "opsBlackouts": {
                    "description": "List of OpsBlackouts",
                    "items": {
                        "$ref": "OpsBlackout"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Location": {
            "description": "This is how we represent location. It only works in the US because we do not\nunderstand how contracts would be formed for other countries. The meaning of\nmissing fields changes based on context; when a Location is used in a\nRestriction, then a missing dma means that the restriction does not apply to\nany particular DMA.  If a Location is used in a ClientLocationContext, then\na missing dma may mean that we either could not identify a DMA with\nreasonable accuracy or the user is not in one.\n\nNext tag: 7",
            "id": "Location",
            "properties": {
                "dmaId": {
                    "description": "Which market does this location refer to? Format: 3-digit code, e.g., 510\nfor Cleveland. See more examples at\nhttps://support.google.com/richmedia/answer/2745487.",
                    "type": "string"
                },
                "isoCountryCode": {
                    "description": "What country are we in?",
                    "type": "string"
                },
                "zipCode": {
                    "description": "What zip code does this location refer to? Format: 5-digit US zip code,\ne.g., 94043 for Mountain View.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LocationAvailability": {
            "description": "Where the content is available. The fields form \"or\" relationship.",
            "id": "LocationAvailability",
            "properties": {
                "regionIds": {
                    "description": "Region ids from RegionService. We translate them to whitelisted locations\nbefore generating content nodes.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "whitelistedLocations": {
                    "items": {
                        "$ref": "Location"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "LookupChannelSignalsResponse": {
            "description": "The ChannelSignals data found.\nNext Tag: 2",
            "id": "LookupChannelSignalsResponse",
            "properties": {
                "channelSignals": {
                    "$ref": "ChannelSignals",
                    "description": "The ChannelSignals proto message bytes retrieved."
                }
            },
            "type": "object"
        },
        "LookupUnpluggedSignalsTableResponse": {
            "description": "The UST (Unplugged Signals Table) data found.\nNext Tag: 3",
            "id": "LookupUnpluggedSignalsTableResponse",
            "properties": {
                "signalsData": {
                    "additionalProperties": {
                        "$ref": "UstCellValue"
                    },
                    "description": "The ChannelSignals proto message retrieved.",
                    "type": "object"
                },
                "ustTimeLabel": {
                    "description": "The time label of the UST (Unplugged Signals Table) data files.\nThe label is in format YyyyMmDd_HhMm, E.g., 20180719_0123.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LowResThumbnail": {
            "description": "Low Resolution Inlined Thumbnail: go/previs-thumbnail-details\nThis contains a low resolution jpeg of the thumbnail so the user can see\na blurred out placeholder while the high resolution image is retrieved\nfrom the image server. If a different image file type is desired, then a\nnew field must be added.",
            "id": "LowResThumbnail",
            "properties": {
                "clientBlurCoefficient": {
                    "description": "The client blur coefficient for the low res JPEG image.\nThe value must be between 0.0 and 1.0 inclusive.\nThe greater the number, the more blurry the image becomes.",
                    "format": "float",
                    "type": "number"
                },
                "header": {
                    "$ref": "LowResThumbnailHeader",
                    "description": "Which header to use with the provided JPEG image.\nIf the header is not included in the JPEG, it is using a predefined\nheader identified by this enum, of which the client has a copy.\ngo/headerless-thumb-design"
                },
                "jpeg": {
                    "description": "Contains either the complete jpeg thumbnail or just the jpeg thumbnail\ndata without the header.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LowResThumbnailHeader": {
            "id": "LowResThumbnailHeader",
            "properties": {
                "headerVersion": {
                    "enum": [
                        "LOW_RES_THUMBNAIL_HEADER_VERSION_UNKNOWN",
                        "LOW_RES_THUMBNAIL_HEADER_VERSION_INCLUDED",
                        "LOW_RES_THUMBNAIL_HEADER_VERSION_1"
                    ],
                    "enumDescriptions": [
                        "",
                        "Header included in jpeg",
                        "Header not included in JPEG. Client should prepend header version 1."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MajorEventItem": {
            "description": "Definition of an major event item representing a single major event.\nNext Tag: 12",
            "id": "MajorEventItem",
            "properties": {
                "channelId": {
                    "description": "The channel ID for the major event entity.",
                    "type": "string"
                },
                "debugInfo": {
                    "description": "Debug information attached to the entity, such as ratios.",
                    "type": "string"
                },
                "displayInfo": {
                    "$ref": "DisplayInfo",
                    "description": "The display info for Unplugged sports.\nDeprecated for the league_contexts field with better league info."
                },
                "endTime": {
                    "description": "The end time of the entity, not avaiable for non-event entities.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "entityType": {
                    "description": "The entity type of the major event item.",
                    "enum": [
                        "UNKNOWN",
                        "SHOW",
                        "PROGRAM",
                        "AIRING",
                        "STATION",
                        "NETWORK",
                        "SEASON",
                        "PERSON",
                        "SPORTS_TEAM",
                        "MOVIE",
                        "EVENT",
                        "EPISODE",
                        "SPORTS_LEAGUE",
                        "SPORTS_EVENT",
                        "MICROGENRE",
                        "SCHEDULE",
                        "POP",
                        "MARKET",
                        "PACKAGE",
                        "INGESTION_STREAM",
                        "BROADCAST_STREAM",
                        "ACQUISITION_STREAM",
                        "SPORTS_ATHLETE",
                        "LEMONAID_METRIC"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Broadcast id, e.g., ogfYd705cRs.",
                        "<Multicast IP:Port:Program Number> of an acquistion stream.",
                        "",
                        "A lemonaid metrics is of the form <stream id>/<metric>/<cell>:<task id>\nExample: yt-tv:1234/agent/health/cb:1"
                    ],
                    "type": "string"
                },
                "leagueContexts": {
                    "description": "The league contexts if the event is a sports event.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "score": {
                    "description": "The score for the major event entity, between 0.0 and 1.0.",
                    "format": "float",
                    "type": "number"
                },
                "startTime": {
                    "description": "The start time of the entity, not available for non-event entities.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the major event.",
                    "type": "string"
                },
                "types": {
                    "description": "The item types that attributes to the group item, such as [SPORTS_EVENT].",
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "TYPE_UNKNOWN",
                            "TYPE_SPORTS_EVENT"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "watchTime": {
                    "description": "The watch time retrieved for the channel.",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MajorEventsGroup": {
            "description": "A group of major events of a category, such as events in a same DMA.\nNext Tag: 3",
            "id": "MajorEventsGroup",
            "properties": {
                "items": {
                    "description": "All rows of major events.",
                    "items": {
                        "$ref": "MajorEventItem"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The name of the major events group, e.g., 'DMA: 803', or, 'Global'.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MajorEventsGroups": {
            "description": "A collection of major event tables.\nNext Tag: 6",
            "id": "MajorEventsGroups",
            "properties": {
                "entityTypes": {
                    "description": "The entity types the query was executed with.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Broadcast id, e.g., ogfYd705cRs.",
                        "<Multicast IP:Port:Program Number> of an acquistion stream.",
                        "",
                        "A lemonaid metrics is of the form <stream id>/<metric>/<cell>:<task id>\nExample: yt-tv:1234/agent/health/cb:1"
                    ],
                    "items": {
                        "enum": [
                            "UNKNOWN",
                            "SHOW",
                            "PROGRAM",
                            "AIRING",
                            "STATION",
                            "NETWORK",
                            "SEASON",
                            "PERSON",
                            "SPORTS_TEAM",
                            "MOVIE",
                            "EVENT",
                            "EPISODE",
                            "SPORTS_LEAGUE",
                            "SPORTS_EVENT",
                            "MICROGENRE",
                            "SCHEDULE",
                            "POP",
                            "MARKET",
                            "PACKAGE",
                            "INGESTION_STREAM",
                            "BROADCAST_STREAM",
                            "ACQUISITION_STREAM",
                            "SPORTS_ATHLETE",
                            "LEMONAID_METRIC"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "groups": {
                    "description": "All the major event tables.",
                    "items": {
                        "$ref": "MajorEventsGroup"
                    },
                    "type": "array"
                },
                "majorEventLabel": {
                    "description": "The label of the date from the data file name of the major events data.\nThe label is in the format YyyyMmDd_HhMm, e.g., '20180617_0315'.",
                    "type": "string"
                },
                "signalType": {
                    "$ref": "SignalTypeWrapper",
                    "description": "The signal type the query was executed with."
                },
                "watchTimeLabel": {
                    "description": "The label of the date from the data file name of the watch time data.\nThe label is in the format YyyyMmDd_HhMm, e.g., '20180617_0315'.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MediaPointData": {
            "id": "MediaPointData",
            "properties": {
                "endMediaPointId": {
                    "type": "string"
                },
                "startMediaPointId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MessageSet": {
            "description": "This is proto2's version of MessageSet.",
            "id": "MessageSet",
            "properties": {},
            "type": "object"
        },
        "MetricData": {
            "description": "all metric data.",
            "id": "MetricData",
            "properties": {
                "dataStreams": {
                    "description": "metric data streams.",
                    "items": {
                        "$ref": "YtvMetricDataStream"
                    },
                    "type": "array"
                },
                "metricName": {
                    "description": "name of metric. e.g. '/youtube/unplugged/linear/slurp/post_bitrate'",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MetricsParam": {
            "description": "Param for fetching metrics.",
            "id": "MetricsParam",
            "properties": {
                "groupByFields": {
                    "description": "field names that is used to indicate different data rows, e.g.\n'copy_id'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "metricName": {
                    "description": "metric name that should be in the data, e.g.\n\"/youtube/unplugged/linear/slurp/post_bitrate\"",
                    "type": "string"
                },
                "rawTargetSchemaName": {
                    "description": "schema name of raw target. e.g. 'edge.EdgeTarget'",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ModificationInfo": {
            "id": "ModificationInfo",
            "properties": {
                "isEndTimeModified": {
                    "description": "End-time of the airing is modified.",
                    "type": "boolean"
                },
                "isStartTimeModified": {
                    "description": "Start-time of the airing is modified.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MonetizationDetails": {
            "description": "Next tag: 3",
            "id": "MonetizationDetails",
            "properties": {
                "adBreaks": {
                    "items": {
                        "$ref": "AdBreak"
                    },
                    "type": "array"
                },
                "thirdPartyTargetingData": {
                    "items": {
                        "$ref": "ThirdPartyTargetingData"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MonitoringDetails": {
            "id": "MonitoringDetails",
            "properties": {
                "monitoringStatus": {
                    "description": "Status of the airing.",
                    "enum": [
                        "MONITORING_STATUS_UNKNOWN",
                        "MONITORING_STATUS_CONFIRMED_UPCOMING",
                        "MONITORING_STATUS_IN_PROGRESS",
                        "MONITORING_STATUS_DONE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Event has been marked to be monitored by the source but it has not yet\nstarted.",
                        "Event is currently ongoing.",
                        "Event is finished."
                    ],
                    "type": "string"
                },
                "monitoringStatusUpdateTime": {
                    "description": "Timestamp when the status was received.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MonitoringSourcesAnnotations": {
            "description": "Specifies the sources that will be monitoring the airing.\nNext tag: 7",
            "id": "MonitoringSourcesAnnotations",
            "properties": {
                "kgGameEndTime": {
                    "description": "KG determined game end.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "kgMonitoringDetails": {
                    "$ref": "MonitoringDetails",
                    "description": "Monitoring status for the airing modified by KG."
                }
            },
            "type": "object"
        },
        "Movie": {
            "description": "Next tag: 10",
            "id": "Movie",
            "properties": {
                "details": {
                    "$ref": "MovieDetails"
                },
                "discoveryMetadata": {
                    "$ref": "DiscoveryMetadata",
                    "description": "DiscoveryMetadata Info"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this movie. This may, or may not be same\nas id from other environments (e.g KG, YouTube etc.) for the same movie.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet"
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "restricts": {
                    "$ref": "ContentRestricts"
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                }
            },
            "type": "object"
        },
        "MovieDetails": {
            "description": "Next tag: 25",
            "id": "MovieDetails",
            "properties": {
                "castMembers": {
                    "description": "Cast and Crew.\n\nThe lists are kept separate for now due to the fact that ordering is\nmeaningful within each list (i.e more prominent actors first).",
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "corpus": {
                    "description": "Corpus type for this movie (SVOD/TVOD/LIVE).",
                    "enum": [
                        "CORPUS_UNKNOWN",
                        "CORPUS_SVOD",
                        "CORPUS_TVOD",
                        "CORPUS_TV",
                        "CORPUS_YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Represents transactional content.",
                        "Represents live tv.",
                        "Represents youtube creator content."
                    ],
                    "type": "string"
                },
                "countryRestriction": {
                    "$ref": "CountryRestriction",
                    "description": "Country restrictions for this movie."
                },
                "crewMembers": {
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Additional info about the movie."
                },
                "entityNetworks": {
                    "$ref": "EntityNetworks"
                },
                "fifeImages": {
                    "description": "Set of fife images, which contain fife url and aspect ratio, for movie.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "genres": {
                    "description": "List of genres for this movie.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "Set of ingestion images, converted directly from external sources, for\nmovie.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultOnly": {
                    "type": "boolean"
                },
                "networkIds": {
                    "description": "List of TV networks the movie airs on.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "originalAirDateTimestamp": {
                    "description": "Timestamp of the first air date of this program.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "originalReleaseYear": {
                    "description": "Year the movie was first released.",
                    "type": "string"
                },
                "originatingYtSource": {
                    "$ref": "OriginatingYTSource",
                    "description": "Filled if the movie originated from a youtube entity."
                },
                "partnerGenres": {
                    "description": "List of raw genre strings from parnter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "primaryNetworkId": {
                    "description": "The top-level network this movie airs on.",
                    "type": "string"
                },
                "productionCompanyName": {
                    "description": "Production companies for the movie.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rating": {
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "recommendedAudience": {
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "release": {
                    "description": "Describes releases of a movie.",
                    "items": {
                        "$ref": "ReleaseInfo"
                    },
                    "type": "array"
                },
                "releaseDate": {
                    "description": "The date of the movie release in yyyy-mm-dd format. [-mm-dd] part may be\nmissing.",
                    "type": "string"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Primary title of the movie."
                },
                "tomatometer": {
                    "description": "e.g, tomatometer 0.8 means 80% of reviews are positive.",
                    "format": "float",
                    "type": "number"
                },
                "vodDetails": {
                    "$ref": "VodDetails",
                    "description": "Will be true if any of its programs are vod."
                }
            },
            "type": "object"
        },
        "Name": {
            "id": "Name",
            "properties": {
                "value": {
                    "$ref": "TranslationPack"
                }
            },
            "type": "object"
        },
        "NavigationTarget": {
            "id": "NavigationTarget",
            "properties": {
                "id": {
                    "$ref": "UnpluggedId"
                },
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "DETAILS_PAGE"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Network": {
            "description": "Next tag: 13",
            "id": "Network",
            "properties": {
                "availability": {
                    "$ref": "ContentAvailability",
                    "description": "This applies to properties on the network, e.g. vod channel. Currently\nthere is no availability defined at the network level, but rather on\nstation level."
                },
                "details": {
                    "$ref": "NetworkDetails"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "generatedPortalDetails": {
                    "$ref": "GeneratedNetworkPortalDetails",
                    "description": "These are auto-generated NetworkPortalDetails"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this network.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "Optional ID set for network."
                },
                "portalDetails": {
                    "$ref": "NetworkPortalDetails"
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "vodPackageChannelId": {
                    "$ref": "YTExternalId",
                    "description": "The YT channel id for Network's vod package."
                }
            },
            "type": "object"
        },
        "NetworkDetails": {
            "description": "Next tag: 11",
            "id": "NetworkDetails",
            "properties": {
                "availableForTve": {
                    "description": "Whether this network should be listed in the TVE responses to Synacor.\nNo longer being used. Everything is available now.",
                    "type": "boolean"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "The long-form description of the network."
                },
                "fifeImages": {
                    "description": "Set of fife images which contain fife url and aspect ratio.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "Set of images for the network.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "networkType": {
                    "description": "The type of the network: affiliate (ABC, CBS) or non-affiliate (ESPN, HBO).",
                    "enum": [
                        "NETWORK_TYPE_UNKNOWN",
                        "NETWORK_TYPE_STANDARD",
                        "NETWORK_TYPE_AFFILIATE",
                        "NETWORK_TYPE_VOD_ONLY"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "onboardingNodeRank": {
                    "description": "The content node rank applies to the vod channel of this network.",
                    "format": "int32",
                    "type": "integer"
                },
                "revenueContentOwner": {
                    "$ref": "UnpluggedNetworkRevenueContentOwner",
                    "description": "Field to be set by ops for each network. See go/ytv-sox for details."
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "The network page title (e.g. 'ESPN')."
                },
                "titleColor": {
                    "$ref": "Color",
                    "description": "A color that matches the network's logo."
                },
                "tmsIds": {
                    "items": {
                        "$ref": "TmsId"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NetworkPortalDetails": {
            "description": "Next tag: 5",
            "id": "NetworkPortalDetails",
            "properties": {
                "categories": {
                    "description": "Set of categories for the network (e.g. 'TV/Drama').\nThese are VOD categories from shows/movies/events.\nThese are used for providing suggestion to ops.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "hideAutoGeneratedShelves": {
                    "description": "Makes publishing not show the shows and movies auto-generated shelves.",
                    "type": "boolean"
                },
                "promos": {
                    "description": "Promos on the network\u2019s portal page.",
                    "items": {
                        "$ref": "NetworkPortalPromo"
                    },
                    "type": "array"
                },
                "shelves": {
                    "description": "Shelves on the network\u2019s portal page.",
                    "items": {
                        "$ref": "NetworkPortalShelf"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NetworkPortalPromo": {
            "id": "NetworkPortalPromo",
            "properties": {
                "fifeImages": {
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "UUID.",
                    "type": "string"
                },
                "images": {
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "navigationTarget": {
                    "$ref": "NavigationTarget"
                }
            },
            "type": "object"
        },
        "NetworkPortalShelf": {
            "description": "Next tag: 7",
            "id": "NetworkPortalShelf",
            "properties": {
                "categories": {
                    "description": "categories for the shelf. Ex: \"TV/Drama\"",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "entities": {
                    "items": {
                        "$ref": "YoutubeUnpluggedEntity"
                    },
                    "type": "array"
                },
                "label": {
                    "$ref": "TranslationPack"
                },
                "shelfType": {
                    "enum": [
                        "SHELF_TYPE_UNKNOWN",
                        "SHELF_TYPE_AUTO_GENERATED",
                        "SHELF_TYPE_MANUAL_GENERATED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Shelf is auto generated by flume job",
                        "Shelf is manually generated"
                    ],
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "ENTITY",
                        "LIVE",
                        "UPCOMING"
                    ],
                    "enumDescriptions": [
                        "",
                        "A shelf which contains a list of Unplugged entities to display.",
                        "Watch Live Shelf",
                        "Upcoming shelf. As of Q2 2018, this is only available for NBA League\nPass."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NflLeagueInfo": {
            "description": "Extended info applicable to the NFL.",
            "id": "NflLeagueInfo",
            "properties": {
                "commissioner": {
                    "$ref": "TranslationPack",
                    "description": "The name of the NFL's commissioner."
                },
                "founded": {
                    "$ref": "Date",
                    "description": "The date this league was founded."
                },
                "numberOfTeams": {
                    "description": "Number of teams playing in this league.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "NucleusIdSet": {
            "description": "Next tag: 2",
            "id": "NucleusIdSet",
            "properties": {
                "acquisitionStreamId": {
                    "description": "Represents the ID that identifies a row in nucleus database.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OneVsOneEventInfo": {
            "description": "Info about a single event between two teams.\n\nNext tag: 16",
            "id": "OneVsOneEventInfo",
            "properties": {
                "away": {
                    "$ref": "EntityEntity",
                    "description": "Away Team."
                },
                "awayParticipantTbd": {
                    "type": "boolean"
                },
                "awayScore": {
                    "description": "Away team score.",
                    "items": {
                        "$ref": "Score"
                    },
                    "type": "array"
                },
                "boxscore": {
                    "$ref": "Boxscore"
                },
                "currentRound": {
                    "description": "The number of the round that is currently being played. The first round is\nnumbered \"1\" (1-based).",
                    "format": "int32",
                    "type": "integer"
                },
                "displayHomeFirst": {
                    "description": "Whether to display home team (true) or away team (false) first in matchup.",
                    "type": "boolean"
                },
                "home": {
                    "$ref": "EntityEntity",
                    "description": "Home Team."
                },
                "homeParticipantTbd": {
                    "description": "Are the teams undecided?",
                    "type": "boolean"
                },
                "homeScore": {
                    "description": "Home team score.",
                    "items": {
                        "$ref": "Score"
                    },
                    "type": "array"
                },
                "isHomeTop": {
                    "description": "For tournaments, it's important to know which team should be displayed on\ntop, e.g., when displaying teams standings table.",
                    "type": "boolean"
                },
                "result": {
                    "description": "Result.",
                    "enum": [
                        "UNKNOWN",
                        "HOME_WON",
                        "AWAY_WON",
                        "TIE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "roster": {
                    "$ref": "Roster"
                },
                "rounds": {
                    "items": {
                        "$ref": "Round"
                    },
                    "type": "array"
                },
                "standings": {
                    "$ref": "StandingsTable",
                    "description": "Teams standings."
                },
                "tournamentRound": {
                    "$ref": "EntityEntity",
                    "description": "Tournament round information."
                }
            },
            "type": "object"
        },
        "OpsBlackout": {
            "description": "An ops representation of a blackout",
            "id": "OpsBlackout",
            "properties": {
                "auditEntries": {
                    "description": "Audit Entries",
                    "items": {
                        "$ref": "OpsBlackoutAuditEntry"
                    },
                    "type": "array"
                },
                "details": {
                    "$ref": "OpsBlackoutDetails",
                    "description": "Blackout details"
                },
                "idSet": {
                    "$ref": "OpsBlackoutIdSet",
                    "description": "Blackout ID set"
                },
                "name": {
                    "description": "OnePlatform required name of the form opsBlackout/v1/$blackout_id or\nopsBlackout/v2/$blackout_id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OpsBlackoutAuditEntry": {
            "id": "OpsBlackoutAuditEntry",
            "properties": {
                "action": {
                    "description": "Action taken; e.g. one of Create / Update / Delete",
                    "type": "string"
                },
                "auditMessage": {
                    "description": "Audit message entered, if any",
                    "type": "string"
                },
                "blackoutId": {
                    "description": "Blackout ID",
                    "type": "string"
                },
                "blackoutMutatingRequestPayload": {
                    "description": "actual request payload as string",
                    "type": "string"
                },
                "createTime": {
                    "description": "Creation timestamp",
                    "format": "google-datetime",
                    "type": "string"
                },
                "source": {
                    "$ref": "AuditSource",
                    "description": "Source details"
                }
            },
            "type": "object"
        },
        "OpsBlackoutDetails": {
            "description": "OpsBlackout details message",
            "id": "OpsBlackoutDetails",
            "properties": {
                "endTime": {
                    "description": "Time the blackout ends",
                    "format": "google-datetime",
                    "type": "string"
                },
                "isDeleted": {
                    "description": "Whether this blackout is deleted",
                    "type": "boolean"
                },
                "isResidentPolicy": {
                    "description": "Flag for whether this blackout is a resident policy",
                    "type": "boolean"
                },
                "locationsBlacklist": {
                    "$ref": "BlackoutLocations",
                    "description": "Locations blacklist"
                },
                "locationsWhitelist": {
                    "$ref": "BlackoutLocations",
                    "description": "Locations whitelist"
                },
                "source": {
                    "$ref": "OpsBlackoutSource",
                    "description": "Source details for this blackout"
                },
                "startTime": {
                    "description": "Time the blackout starts",
                    "format": "google-datetime",
                    "type": "string"
                },
                "subtype": {
                    "description": "Subtypes for this blackout",
                    "enumDescriptions": [
                        "Uninitialized default value",
                        "All blacked out",
                        "MLB Check in blackout applies",
                        "Some Locations blacklisted",
                        "Some Locations whitelisted",
                        "Mobile devices blocked",
                        "Tablet devices blocked",
                        "Desktop devices blocked",
                        "Cast devices blocked",
                        "Settop devices blocked",
                        "Overrides any automatic blackouts",
                        "Station outage"
                    ],
                    "items": {
                        "enum": [
                            "SUBTYPE_UNKNOWN",
                            "SUBTYPE_OTT_ALL",
                            "SUBTYPE_MLB_CHECK_IN_APPLIES",
                            "SUBTYPE_SOME_LOCATIONS_BLACKLISTED",
                            "SUBTYPE_SOME_LOCATIONS_WHITELISTED",
                            "SUBTYPE_MOBILE_DEVICES_BLOCKED",
                            "SUBTYPE_TABLET_DEVICES_BLOCKED",
                            "SUBTYPE_DESKTOP_DEVICES_BLOCKED",
                            "SUBTYPE_CAST_DEVICES_BLOCKED",
                            "SUBTYPE_SETTOP_DEVICES_BLOCKED",
                            "SUBTYPE_OVERRIDE",
                            "SUBTYPE_STATION_OUTAGE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Primary type for this blackout. Derived from OpsBlackoutDetails#subtype.",
                    "enum": [
                        "PRIMARY_TYPE_UNKNOWN",
                        "PRIMARY_TYPE_OTT_ALL",
                        "PRIMARY_TYPE_MLB_CHECK_IN",
                        "PRIMARY_TYPE_LOCATION",
                        "PRIMARY_TYPE_DEVICE",
                        "PRIMARY_TYPE_OVERRIDE",
                        "PRIMARY_TYPE_STATION_OUTAGE"
                    ],
                    "enumDescriptions": [
                        "Uninitialized default value",
                        "All blacked out",
                        "MLB Check in blackouts",
                        "Location-based blackouts",
                        "Device-based blackouts",
                        "Overrides any automatic blackouts",
                        "Indicates a station outage go/ytv-dm-outages"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OpsBlackoutIdSet": {
            "description": "OpsBlackout set of ids",
            "id": "OpsBlackoutIdSet",
            "properties": {
                "airingId": {
                    "description": "Airing ID for this blackout",
                    "type": "string"
                },
                "blackoutId": {
                    "description": "OpsBlackout database ID",
                    "type": "string"
                },
                "manualEditPolicyId": {
                    "description": "Id of the blackout policy that contains manual edits of this blackout.\nOnly set when manual edit exists for an automatic blackout",
                    "type": "string"
                },
                "migrationId": {
                    "description": "Migration ID for this blackout - can be removed after V1",
                    "type": "string"
                },
                "stationId": {
                    "description": "Station ID for this blackout",
                    "type": "string"
                },
                "ytChannelId": {
                    "description": "Yt channel id for this blackout",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OpsBlackoutSource": {
            "description": "OpsBlackout source message",
            "id": "OpsBlackoutSource",
            "properties": {
                "details": {
                    "description": "Source details",
                    "type": "string"
                },
                "type": {
                    "description": "Source type.",
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_MANUAL",
                        "SOURCE_RULE_SYSTEM",
                        "SOURCE_AUTOMATIC"
                    ],
                    "enumDescriptions": [
                        "Uninitialized default value",
                        "Manual source. Represents blackouts created manually by an operator\nthrough Hades, Symphony, etc.",
                        "Rule source. Represents blackouts created automatically by the rule\nengine. go/ytv-rule-based-blackouts",
                        "Automatic source. Represents blackouts created automatically based on\ngo/ytv-blackouts."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OpsDvrAction": {
            "description": "Next tag: 4",
            "id": "OpsDvrAction",
            "properties": {
                "actionTimestamp": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "source": {
                    "$ref": "AuditSource"
                },
                "stitchRequest": {
                    "$ref": "StitchRequest"
                }
            },
            "type": "object"
        },
        "OpsEntity": {
            "description": "Entity used in ops tool list.",
            "id": "OpsEntity",
            "properties": {
                "id": {
                    "description": "Id of the entity.",
                    "type": "string"
                },
                "incidentDetails": {
                    "$ref": "GoogleYoutubeUnpluggedTvopsV1TvingestionIncidentDetails",
                    "description": "Contains details of incident entity, only work when entity type is\nincident."
                },
                "name": {
                    "description": "Name of the entity.",
                    "type": "string"
                },
                "stationDetails": {
                    "$ref": "StationDetails",
                    "description": "Contains details of station entity, only work when entity type is\nstation."
                },
                "streamDetails": {
                    "$ref": "StreamDetails",
                    "description": "Contains details of stream entity, only work when entity type is stream."
                },
                "type": {
                    "description": "Type of the entity. e.g. ENTITY_TYPE_STATION",
                    "enum": [
                        "ENTITY_TYPE_UNKNOWN",
                        "ENTITY_TYPE_STATION",
                        "ENTITY_TYPE_INCIDENT",
                        "ENTITY_TYPE_STREAM"
                    ],
                    "enumDescriptions": [
                        "",
                        "Entity type is station.",
                        "Entity type is incident.",
                        "Entity type is stream."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Ordinal": {
            "description": "Ordinal. e.g week 16th out of 17 total weeks.",
            "id": "Ordinal",
            "properties": {
                "number": {
                    "format": "int32",
                    "type": "integer"
                },
                "outOf": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "OriginatingYTSource": {
            "id": "OriginatingYTSource",
            "properties": {
                "type": {
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_CREATOR_YT_SERIES",
                        "TYPE_YTO_SERIES",
                        "TYPE_YTO_MOVIE",
                        "TYPE_CREATOR_YT_MOVIE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "ytExternalId": {
                    "items": {
                        "$ref": "YTExternalId"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OtaInfo": {
            "id": "OtaInfo",
            "properties": {
                "evertzChassisIp": {
                    "type": "string"
                },
                "evertzDemodPort": {
                    "format": "int32",
                    "type": "integer"
                },
                "evertzSlot": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "OutageConfiguration": {
            "description": "Information about outage (if has)",
            "id": "OutageConfiguration",
            "properties": {
                "fallbackStation": {
                    "$ref": "UnpluggedId",
                    "description": "usually pre-configured by ops"
                },
                "outageReason": {
                    "enum": [
                        "REASON_UNKNOWN",
                        "REASON_INGESTION_DOWN",
                        "REASON_DEGRADED",
                        "REASON_UNAVAILABLE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OutageDetails": {
            "id": "OutageDetails",
            "properties": {
                "outageState": {
                    "enum": [
                        "OUTAGE_STATE_UNSPECIFIED",
                        "OUTAGE_STATE_REPLACED",
                        "OUTAGE_STATE_UNAVAILABLE"
                    ],
                    "enumDescriptions": [
                        "it's good",
                        "This node is replacing another node",
                        "This node is experiencing an outage"
                    ],
                    "type": "string"
                },
                "replacedContentNode": {
                    "$ref": "YTExternalId",
                    "description": "Id of content node that this node replaced (valid when state is REPLACED)"
                }
            },
            "type": "object"
        },
        "Package": {
            "description": "*\nPackage that user is subscribed for.",
            "id": "Package",
            "properties": {
                "id": {
                    "description": "Package id.",
                    "type": "string"
                },
                "isBasic": {
                    "description": "Whether package is basic or additional.",
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "UNSPECIFIED",
                        "YTV",
                        "SHOWTIME",
                        "CURIOSITY_STREAM",
                        "FOX_SOCCER",
                        "STARZ",
                        "SHUDDER",
                        "SUNDANCE",
                        "AMC",
                        "NBA_LEGUE_PASS",
                        "EPIX"
                    ],
                    "enumDescriptions": [
                        "",
                        "Basic subscription service",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PaginationDetails": {
            "description": "Include information related to pagination.",
            "id": "PaginationDetails",
            "properties": {
                "estimatedResults": {
                    "description": "Total estimated number of results.",
                    "format": "int32",
                    "type": "integer"
                },
                "nextPageToken": {
                    "description": "A token to send with the next request to fetch more results.\nThis token is not returned.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PerNotificationResult": {
            "id": "PerNotificationResult",
            "properties": {
                "error": {
                    "$ref": "StatusProto"
                },
                "notificationId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Person": {
            "description": "Next tag: 9",
            "id": "Person",
            "properties": {
                "athleteEntity": {
                    "$ref": "EntityEntity",
                    "description": "Optional Athlete Entity if the person is/is also an athlete or coach."
                },
                "details": {
                    "$ref": "PersonDetails",
                    "description": "Basic Person Info."
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this person.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "Optional ID set for the person."
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                }
            },
            "type": "object"
        },
        "PersonDetails": {
            "description": "Next Tag: 9",
            "id": "PersonDetails",
            "properties": {
                "birthDate": {
                    "description": "The birth date of this person in the format\nyyyy[-mm-dd]. Some people may not have this value.",
                    "type": "string"
                },
                "category": {
                    "description": "A tag that categorizes the person.",
                    "enum": [
                        "PERSON_CATEGORY_UNKNOWN",
                        "PERSON_CATEGORY_PERSON",
                        "PERSON_CATEGORY_ANIMAL",
                        "PERSON_CATEGORY_GROUP"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "deathDate": {
                    "description": "The death date of this person in the format\nyyyy[-mm-dd]. Some people may not have this value.",
                    "type": "string"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Description of the person."
                },
                "fifeImages": {
                    "description": "Set of fife images, which contain fife url and aspect ratio, for this\nperson.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "gender": {
                    "description": "The gender of the person. This may not be set in some situations.\nSpecifically, when the person is really a group, etc.",
                    "enum": [
                        "GENDER_UNKNOWN",
                        "GENDER_MALE",
                        "GENDER_FEMALE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "image": {
                    "description": "Set of ingestion images, converted directly from external sources, for this\nperson.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The name of the person. In some cases a person may have multiple names.\nFor example, \"Sean Combs\", \"P. Diddy\", \"Puff Daddy\".",
                    "items": {
                        "$ref": "TranslationPack"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PersonRole": {
            "description": "Represents a combination of a person and a single role (in a movie, show or\nepisode).\n\nIn general the same person can appear multiple times in the same movie\nor show if they have multiple roles or multiple characters.\nnext tag: 7",
            "id": "PersonRole",
            "properties": {
                "characterName": {
                    "$ref": "TranslationPack",
                    "description": "The name of the character played by the person, if available.\nThis field is optional for cast members, and never present for crew\nmembers."
                },
                "images": {
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "personId": {
                    "description": "The unplugged assigned id of this person.",
                    "type": "string"
                },
                "realName": {
                    "$ref": "TranslationPack",
                    "description": "The (real-life) name of the person."
                },
                "role": {
                    "description": "The role of the person in the program this item belongs to.\nFor cast members, this is something like Actor or Narrator.\nFor crew members, this is something like Director or Producer.",
                    "enum": [
                        "ROLE_UNKNOWN",
                        "ROLE_ACTION_CHOREOGRAPHER",
                        "ROLE_ACTOR",
                        "ROLE_ANCHOR",
                        "ROLE_ANIMATION_DIRECTOR",
                        "ROLE_ART_DIRECTOR",
                        "ROLE_ASSISTANT_DIRECTOR",
                        "ROLE_ASSOCIATE_PRODUCER",
                        "ROLE_CASTING",
                        "ROLE_CHOREOGRAPHER",
                        "ROLE_CINEMATOGRAPHER",
                        "ROLE_CO_EXECUTIVE_PRODUCER",
                        "ROLE_CO_PRODUCER",
                        "ROLE_COMPOSER",
                        "ROLE_CONSULTING_PRODUCER",
                        "ROLE_CONTESTANT",
                        "ROLE_CORRESPONDENT",
                        "ROLE_COSTUME_DESIGNER",
                        "ROLE_DIRECTOR",
                        "ROLE_DIRECTOR_PHOTOGRAPHY",
                        "ROLE_EDITING",
                        "ROLE_EXECUTIVE_PRODUCER",
                        "ROLE_FILM_EDITOR",
                        "ROLE_GUEST",
                        "ROLE_GUEST_STAR",
                        "ROLE_HAIR",
                        "ROLE_HOST",
                        "ROLE_JUDGE",
                        "ROLE_LYRICS",
                        "ROLE_MAKEUP",
                        "ROLE_MUSIC",
                        "ROLE_MUSIC_EDITOR",
                        "ROLE_MUSIC_SUPERVISOR",
                        "ROLE_MUSICAL_GUEST",
                        "ROLE_NARRATOR",
                        "ROLE_NON_ORIGINAL_MUSIC",
                        "ROLE_ORIGINAL_MUSIC",
                        "ROLE_PRODUCER",
                        "ROLE_PRODUCTION_DESIGN",
                        "ROLE_PRODUCTION_MANAGER",
                        "ROLE_PRODUCTION_SUPERVISOR",
                        "ROLE_SCREENWRITER",
                        "ROLE_SET_DESIGNER",
                        "ROLE_SOUND",
                        "ROLE_SPECIAL_EFFECTS",
                        "ROLE_STORYBOARD_ARTIST",
                        "ROLE_SUPERVISING_PRODUCER",
                        "ROLE_VOICE",
                        "ROLE_WRITER",
                        "ROLE_WRITER_ADAPTATION",
                        "ROLE_WRITER_BOOK",
                        "ROLE_WRITER_CHARACTERS",
                        "ROLE_WRITER_DIALOGUE",
                        "ROLE_WRITER_ORIGINAL_SCREENPLAY",
                        "ROLE_WRITER_PLAY",
                        "ROLE_WRITER_NOVEL",
                        "ROLE_WRITER_SCREENPLAY",
                        "ROLE_WRITER_SCREENPLAY_AND_NOVEL",
                        "ROLE_WRITER_STORY",
                        "ROLE_CO_CREATOR",
                        "ROLE_CREATOR"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "The id of the published youtube channel for this person."
                }
            },
            "type": "object"
        },
        "ProcessorLog": {
            "description": "Next Tag: 8",
            "id": "ProcessorLog",
            "properties": {
                "dirtyBitRecord": {
                    "$ref": "DirtyBitRecord",
                    "description": "DirtyBit column log."
                },
                "emailOperation": {
                    "$ref": "EmailOperationLog",
                    "description": "Email processor specific log."
                },
                "fanoutProcessorLog": {
                    "$ref": "FanoutProcessorLog",
                    "description": "UST fanout processors log."
                },
                "indexOperation": {
                    "$ref": "IndexOperationLog",
                    "description": "SnD indexer processor specific log."
                },
                "publishOperation": {
                    "$ref": "ProcessorOperationLog",
                    "description": "Common processor operation log."
                },
                "sendNotificationsProcessorLog": {
                    "$ref": "SendNotificationsProcessorLog",
                    "description": "Niffy send notifications processor log."
                },
                "signalsProcessorLog": {
                    "$ref": "SignalsProcessorLog",
                    "description": "UST signal processors log."
                }
            },
            "type": "object"
        },
        "ProcessorOperationLog": {
            "description": "The operation state of a processor\nEach backlot processor writes this proto to indicate the state of the row\nafter processing.  For example after successfully running the state will be\nset to PROCESSED.  The row is also written in conjunction with writing dirty\nbits with the state set to PENDING.\nnext tag 7",
            "id": "ProcessorOperationLog",
            "properties": {
                "isScheduled": {
                    "description": "True if the bt processor is scheduled to run on this row.\nPractically this means a dirty bit is set.",
                    "type": "boolean"
                },
                "nextRetryAttempt": {
                    "description": "For informational purposes only, the count of retries the processor has\nattempted on this object.  So if we failed and retry then this will be 1 to\nindicate the next attempt is retry #1.",
                    "format": "int32",
                    "type": "integer"
                },
                "nextScheduleTimestamp": {
                    "description": "A timestamp of the time it is expected that this scheduled item\nwill be executing.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "source": {
                    "$ref": "AuditSource",
                    "description": "Who or what performed this operation."
                },
                "state": {
                    "enum": [
                        "STATE_UNKNOWN",
                        "STATE_PENDING",
                        "STATE_PENDING_RETRY",
                        "STATE_PROCESSED",
                        "STATE_ERROR"
                    ],
                    "enumDescriptions": [
                        "",
                        "Waiting or currently processing.",
                        "Previously failed and is pending a retry\nRetry and status information will be set for this.",
                        "Processed successfully.",
                        "Encountered an error and is not going to retry\nIf available the status proto will be set."
                    ],
                    "type": "string"
                },
                "status": {
                    "$ref": "StatusProto",
                    "description": "The status proto (populated for non-OK statuses)"
                }
            },
            "type": "object"
        },
        "Program": {
            "description": "Next tag: 18",
            "id": "Program",
            "properties": {
                "availabilityWindow": {
                    "$ref": "TimeRange",
                    "description": "The availability window when the program is available as VOD content."
                },
                "complexEpisode": {
                    "$ref": "ComplexEpisode",
                    "description": "Complex episode info. Present only for PROGRAM_TYPE_COMPLEX_EPISODE."
                },
                "details": {
                    "$ref": "ProgramDetails",
                    "description": "Basic program info."
                },
                "discoveryMetadata": {
                    "$ref": "DiscoveryMetadata",
                    "description": "DiscoveryMetadata Info"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this program. This id may or may not be\nsame as id from other environments (e.g KG, YouTube etc.) for the same\nprogram.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "Optional ID Set for program."
                },
                "monetizationDetails": {
                    "$ref": "MonetizationDetails"
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus",
                    "description": "Publishing Status."
                },
                "reconciliationStatus": {
                    "$ref": "ReconciliationStatus",
                    "description": "Reconciliation Status."
                },
                "restricts": {
                    "$ref": "ContentRestricts",
                    "description": "Content Restrictions."
                },
                "sportsDetails": {
                    "$ref": "SportsDetails",
                    "description": "Sports info."
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                }
            },
            "type": "object"
        },
        "ProgramActualityValue": {
            "description": "Proto2 to proto3 wrapper (proto2 enums not compatible in proto3).",
            "id": "ProgramActualityValue",
            "properties": {
                "value": {
                    "enum": [
                        "ACTUALITY_UNKNOWN",
                        "ACTUALITY_NEW",
                        "ACTUALITY_DELAYED",
                        "ACTUALITY_LIVE"
                    ],
                    "enumDescriptions": [
                        "",
                        "New or first airing but may be recorded.",
                        "Almost live. Time shifter, e.g. to compensate for different\ntime zone.",
                        "Live. The content is happening at the time of the airing (e.g.\na live sport event).\n\nNOTE(tal): the term 'live' should not be confused with 'is aired now'."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProgramDetails": {
            "description": "Next tag: 28",
            "id": "ProgramDetails",
            "properties": {
                "castMembers": {
                    "description": "Cast and Crew.\n\nThe lists are kept separate for now due to the fact that ordering is\nmeaningful within each list (i.e more prominent actors first).",
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "contentOwnerId": {
                    "description": "Content owner id for channel creation and claiming purpose, currently only\nfilled for SVOD.",
                    "format": "int64",
                    "type": "string"
                },
                "corpus": {
                    "description": "Corpus type for this program (SVOD/TVOD/LIVE). If this is episodic content,\nthis might not be present.",
                    "enum": [
                        "CORPUS_UNKNOWN",
                        "CORPUS_SVOD",
                        "CORPUS_TVOD",
                        "CORPUS_TV",
                        "CORPUS_YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Represents transactional content.",
                        "Represents live tv.",
                        "Represents youtube creator content."
                    ],
                    "type": "string"
                },
                "countryRestriction": {
                    "$ref": "CountryRestriction",
                    "description": "Country restrictions for this program."
                },
                "crewMembers": {
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Additional info about the program."
                },
                "episodeId": {
                    "description": "If this program is an episode, this is the episode's ID.",
                    "type": "string"
                },
                "episodeNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "eventId": {
                    "description": "If this program is an event, this is the event's ID.",
                    "type": "string"
                },
                "fifeImages": {
                    "description": "Set of fife images, which contain fife url and aspect ratio, for program.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "genres": {
                    "description": "List of genres for this program.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "Set of ingestion images, converted directly from external sources, for\nprogram.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultOnly": {
                    "type": "boolean"
                },
                "language": {
                    "description": "Language used in the Program metadata.",
                    "type": "string"
                },
                "movieId": {
                    "description": "If this program is a movie, this is the movie's ID.",
                    "type": "string"
                },
                "networkIds": {
                    "description": "List of TV networks the program airs on.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "originalAirDateSeconds": {
                    "description": "Timestamp of the first air date of this program",
                    "format": "int64",
                    "type": "string"
                },
                "partnerGenres": {
                    "description": "List of raw genre strings from partner.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "primaryNetworkId": {
                    "description": "The top-level network this program airs on.",
                    "type": "string"
                },
                "rating": {
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "seasonId": {
                    "description": "If this program is an episode, this is the season's ID.",
                    "type": "string"
                },
                "showId": {
                    "description": "If this program is an episode, this is the show's ID.",
                    "type": "string"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Primary title of the program."
                },
                "type": {
                    "enum": [
                        "PROGRAM_TYPE_UNKNOWN",
                        "PROGRAM_TYPE_MOVIE",
                        "PROGRAM_TYPE_EPISODE",
                        "PROGRAM_TYPE_COMPLEX_EPISODE",
                        "PROGRAM_TYPE_SPORTS",
                        "PROGRAM_TYPE_SPECIAL",
                        "PROGRAM_TYPE_EVENT",
                        "PROGRAM_TYPE_PAID_PROGRAMMING"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "videoDurationSeconds": {
                    "format": "int32",
                    "type": "integer"
                },
                "vodPartnerCategories": {
                    "description": "List of categories for this program. Ex: \"TV/Drama\".",
                    "items": {
                        "$ref": "VodPartnerCategory"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ProgramFlags": {
            "id": "ProgramFlags",
            "properties": {
                "associatedAiringType": {
                    "enum": [
                        "ASSOCIATED_AIRING_TYPE_UNKNOWN",
                        "ASSOCIATED_AIRING_TYPE_SPECIFIC_AIRING",
                        "ASSOCIATED_AIRING_TYPE_PLACEHOLDER"
                    ],
                    "enumDescriptions": [
                        "Unknown status, by default should be treated like specific airing for\nbackwards compatibility reasons.",
                        "This program represents a specific airing of television.  All airings of\nthis program *should* be the same video.  E.g. All airings of this are\nepisode 1 of Blacklist (though they may air on different networks, be\nreruns etc..)",
                        "This program is a placeholder for multiple airings.  There are two main\nexamples of this:\n  1. News shows where there is one \"news at 11\" program that airs\n  everyday.  Each airing is a different but of the same program.\n  2. This is sometimes used as a placeholder for future airings where\n  the specific program is not yet known.  E.g. An episode of BigBang\n  Theory is airing 2 weeks from now but which episode is airing is not\n  yet decided.  Initially the program/airing may be this placeholder\n  then changed once it is known;"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PublishingStatus": {
            "description": "Encapsulates what is the current status of a particular entity. Entity here\ncan represent a show, season, station etc.\nNext tag: 9",
            "id": "PublishingStatus",
            "properties": {
                "cmsReference": {
                    "$ref": "EntityReference",
                    "description": "The reference to the entity in CMS.\nThis is added to inform CMS the version of published entity when publisher\nprocessors are still processing some fields, and CMS is in charge of doing\npublishing. CMS needs to wait until this version of entity is processed in\nUMS.\nSet after processing is done."
                },
                "isRescheduled": {
                    "description": "True if the previous intent to publish returned a retryable error (like\nDEADLINE_EXCEEDED, RESOURCE_EXHAUSTED, etc), and thus will be retried in\na few minutes.  Source of truth though is stored in the publishers bt.",
                    "type": "boolean"
                },
                "lastPublishAttemptTimestampUsec": {
                    "description": "The last time the publisher attempted to publish this entity (microseconds\nsince unix epoch).",
                    "format": "int64",
                    "type": "string"
                },
                "lastPublishedTimestampUsec": {
                    "description": "The last time this entity was published succesfully (microseconds since\nunix epoch).",
                    "format": "int64",
                    "type": "string"
                },
                "status": {
                    "$ref": "StatusProto",
                    "description": "The result of publishing, with error code and a human-readable status\nmessage."
                },
                "taskBns": {
                    "description": "The BNS name of the most recent publisher worker.",
                    "type": "string"
                },
                "ytPublishingStatus": {
                    "enum": [
                        "UNKNOWN",
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "DONE",
                        "FAILED_WITH_ERROR"
                    ],
                    "enumDescriptions": [
                        "",
                        "This entity has never been published.",
                        "Publishing process is running right now.",
                        "Publishing complete.",
                        "Publishing failed with error. Error code and message will be written in\nstatus proto."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RankingInfo": {
            "description": "Defines ranking info for a given YT external id (show or movie channel id).\nNext tag: 5",
            "id": "RankingInfo",
            "properties": {
                "kgId": {
                    "type": "string"
                },
                "relatedSignals": {
                    "description": "Global (G2E) or entity-to-entity (E2E) signal fields:\ne.g. global (most popular shows), E2E (movies related to Brad Pitt).",
                    "items": {
                        "$ref": "RelatedSignal"
                    },
                    "type": "array"
                },
                "signals": {
                    "description": "being deprecated by signals_by_entity_id.",
                    "items": {
                        "$ref": "Signal"
                    },
                    "type": "array"
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "Key entity id fields -- either or both ids may be filled:"
                }
            },
            "type": "object"
        },
        "ReconciliationStatus": {
            "description": "ReconciliationStatus encapsulates the status of matching up an unplugged\nentity with a knowledge graph entity. Next tag: 6",
            "id": "ReconciliationStatus",
            "properties": {
                "candidateMids": {
                    "description": "The mid (or mids) of the kg entities which might match this entity.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "kgReconciliationState": {
                    "enum": [
                        "NOT_RECONCILED",
                        "FAILED_WITH_ERROR",
                        "NO_MATCH",
                        "NEVER_USED_LOW_CONFIDENCE_MATCH",
                        "MULTIPLE_MATCHES",
                        "HIGH_CONFIDENCE_MATCH",
                        "FORCED"
                    ],
                    "enumDescriptions": [
                        "This entity has never been reconciled.",
                        "Reconciliation failed with unexpected error, e.g. DB write failure,\nRPC failure, etc.",
                        "No match was found.",
                        "Entity reconciliation was attempted, and a match was found\nbut with a low confidence score.",
                        "Entity reconciliation was attempted but multiple matches were found.",
                        "Reconciliation matched an entity with high confidence.",
                        "The selected mid was set (probably by hand) and should not be changed."
                    ],
                    "type": "string"
                },
                "lastReconciledTimestamp": {
                    "description": "The timestamp in microseconds for the last update since epoch.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "selectedMid": {
                    "description": "The selected mid will also be stored in a field on the entity itself,\nin the case of sports events: SportsDetails.sports_event_entity.id",
                    "type": "string"
                },
                "status": {
                    "$ref": "StatusProto",
                    "description": "The result of reconciliation, with error code and a human-readable status\nmessage."
                }
            },
            "type": "object"
        },
        "Recording": {
            "description": "*\nPrograms in user library. Usually related to user's library item.\nSome fields from .youtube.unplugged.* protos may be stripped because they\nare not needed on Sideline UI.",
            "id": "Recording",
            "properties": {
                "episode": {
                    "$ref": "Episode"
                },
                "event": {
                    "$ref": "YoutubeUnpluggedEvent"
                },
                "movie": {
                    "$ref": "Movie"
                },
                "network": {
                    "$ref": "Network"
                },
                "person": {
                    "$ref": "Person"
                },
                "program": {
                    "$ref": "Program",
                    "description": "Program that recordings part of."
                },
                "show": {
                    "$ref": "Show"
                },
                "userVideos": {
                    "description": "List of videos and related airings.",
                    "items": {
                        "$ref": "UserVideo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RelatedSignal": {
            "description": "Next ID: 5",
            "id": "RelatedSignal",
            "properties": {
                "demographics": {
                    "$ref": "Demographics",
                    "description": "Stores the demographics info of the signal.\nA Demographics proto denotes a specific group of users, e.g.\n{gender: GENDER_MALE, age: AGE_18_TO_24} means: male, 18-24 years old\nusers. If demographics is set, this means the signal is derived from users\nof a specific demographic group. If not set, then this signal is a\nglobal signal."
                },
                "kgId": {
                    "type": "string"
                },
                "signal": {
                    "$ref": "Signal",
                    "description": "Signals can be either global (G2E), or from entity-to-entity (E2E)."
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "These entity ids are for related entities of entity-to-entity signals,\nwhich must not be set for global (G2E) signals."
                }
            },
            "type": "object"
        },
        "ReleaseInfo": {
            "description": "Next tag: 3",
            "id": "ReleaseInfo",
            "properties": {
                "countryCode": {
                    "description": "The 2 letter ISO 3166-1 alpha-2 country code where the movie was released.\nhttps://en.wikipedia.org/wiki/ISO_3166-1\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2",
                    "type": "string"
                },
                "releaseDate": {
                    "description": "The date of the movie release in yyyy-mm-dd format.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResourceHandleProto": {
            "description": "Protocol buffer representing a handle to a tensorflow resource. Handles are\nnot valid across executions, but can be serialized back and forth from within\na single run.",
            "id": "ResourceHandleProto",
            "properties": {
                "container": {
                    "description": "Container in which this resource is placed.",
                    "type": "string"
                },
                "device": {
                    "description": "Unique name for the device containing the resource.",
                    "type": "string"
                },
                "dtypesAndShapes": {
                    "description": "Data types and shapes for the underlying resource.",
                    "items": {
                        "$ref": "DtypeAndShape"
                    },
                    "type": "array"
                },
                "hashCode": {
                    "description": "Hash code for the type of the resource. Is only valid in the same device\nand in the same execution.",
                    "format": "uint64",
                    "type": "string"
                },
                "maybeTypeName": {
                    "description": "For debug-only, the name of the type pointed to by this handle, if\navailable.",
                    "type": "string"
                },
                "name": {
                    "description": "Unique name of this resource.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResourceIdProto": {
            "id": "ResourceIdProto",
            "properties": {
                "application": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "part": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Roster": {
            "description": "Team Rosters.",
            "id": "Roster",
            "properties": {
                "awayRosters": {
                    "items": {
                        "$ref": "TeamRoster"
                    },
                    "type": "array"
                },
                "homeRosters": {
                    "items": {
                        "$ref": "TeamRoster"
                    },
                    "type": "array"
                },
                "referees": {
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Round": {
            "description": "Round for a particular event. e.g first quarter of a football match, or\nfirst innings to a cricket match.",
            "id": "Round",
            "properties": {
                "awayScores": {
                    "description": "Score of the away-team.",
                    "items": {
                        "$ref": "Score"
                    },
                    "type": "array"
                },
                "homeScores": {
                    "description": "Score of the home-team.",
                    "items": {
                        "$ref": "Score"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Schedule": {
            "description": "Schedule Data.",
            "id": "Schedule",
            "properties": {
                "events": {
                    "items": {
                        "$ref": "Event"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ScheduleEntry": {
            "description": "The entry block of schedule.",
            "id": "ScheduleEntry",
            "properties": {
                "annotations": {
                    "$ref": "AiringAnnotations",
                    "description": "Annotations for airing entry."
                },
                "badges": {
                    "description": "Entity bage, used for calculate the color on the client.",
                    "enumDescriptions": [
                        "It is a unknown badge.",
                        "Badge for live airings."
                    ],
                    "items": {
                        "enum": [
                            "BADGE_UNKNOWN",
                            "BADGE_AIRING_LIVE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "blackoutSource": {
                    "description": "Blackout source of the entry.",
                    "enum": [
                        "BLACKOUT_SOURCE_UNKNOWN",
                        "BLACKOUT_SOURCE_MANUAL",
                        "BLACKOUT_SOURCE_AUTOMATIC",
                        "BLACKOUT_SOURCE_RULE_BASED"
                    ],
                    "enumDescriptions": [
                        "This is a unknown blackout.",
                        "Manual blackout.",
                        "Automatic blackout.",
                        "Rule based blackout."
                    ],
                    "type": "string"
                },
                "blackoutType": {
                    "description": "Blackout type, used for calculate the color on the client.",
                    "enum": [
                        "BLACKOUT_TYPE_UNKNOWN",
                        "BLACKOUT_TYPE_OTT_BLACKOUT",
                        "BLACKOUT_TYPE_MOBILE_BLACKOUT",
                        "BLACKOUT_TYPE_LOCATION_BLACKOUT",
                        "BLACKOUT_TYPE_MLB_CHECK_IN_BLACKOUT",
                        "BLACKOUT_TYPE_STATION_OUTAGE_BLACKOUT"
                    ],
                    "enumDescriptions": [
                        "This is a unknown blackout.",
                        "OTT blackout.",
                        "Mobile blackout.",
                        "Location blackout. (whitelist or blacklist)",
                        "Mlb check in blackout.",
                        "Outage blackout."
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "The details information of entry. e.g. \"S2 E22: Impossible Mission\"",
                    "type": "string"
                },
                "endTime": {
                    "description": "End time of the entry.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "entryId": {
                    "description": "Blackout_id/Airing_id of the entry.",
                    "type": "string"
                },
                "entryType": {
                    "description": "The type of entry.",
                    "enum": [
                        "ENTRY_TYPE_UNKNOWN",
                        "ENTRY_TYPE_AIRING",
                        "ENTRY_TYPE_BLACKOUT"
                    ],
                    "enumDescriptions": [
                        "This is an unknown entry.",
                        "This is an airing entry.",
                        "This is an blackout entry."
                    ],
                    "type": "string"
                },
                "linkedIdSet": {
                    "$ref": "LinkedIdSet",
                    "description": "Linked ids of entry."
                },
                "programActuality": {
                    "$ref": "ProgramActualityValue",
                    "description": "Program actuality for airing entry"
                },
                "programId": {
                    "description": "Program id of the airing entry.",
                    "type": "string"
                },
                "startTime": {
                    "description": "Start time of the entry.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "title": {
                    "description": "The title of entry. e.g. \"BBC News\"",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ScheduleFetchParams": {
            "description": "Params for fetching schedules.",
            "id": "ScheduleFetchParams",
            "properties": {
                "endTime": {
                    "description": "The end time of schedule;",
                    "format": "google-datetime",
                    "type": "string"
                },
                "scheduleSource": {
                    "description": "Source of the schedule. E.g. SOURCE_UMS",
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_BLACKOUT",
                        "SOURCE_UMS",
                        "SOURCE_CMS_CANONICAL",
                        "SOURCE_CMS_MANUAL",
                        "SOURCE_TMS",
                        "SOURCE_KG",
                        "SOURCE_GROUND_TRUTH",
                        "SOURCE_SCTE224"
                    ],
                    "enumDescriptions": [
                        "Unknown schedule source.",
                        "Blackout Schedule.",
                        "Schedule fetch from ums.",
                        "Canonical schedule from cms.",
                        "Manual schedule from cms.",
                        "Schedule fetch from tms.",
                        "Knowledge Graph.",
                        "Ground Truth from CMS",
                        "SCTE 224 schedule that contains source station info"
                    ],
                    "type": "string"
                },
                "startTime": {
                    "description": "The start time of schedule;",
                    "format": "google-datetime",
                    "type": "string"
                },
                "versionSpec": {
                    "$ref": "EntityVersionSpec",
                    "description": "Specification of version of schedule to retrieve. Apply to schedule\nfetched from CMS only."
                }
            },
            "type": "object"
        },
        "ScheduleResponse": {
            "description": "Response contains schedule or error string if not found.",
            "id": "ScheduleResponse",
            "properties": {
                "error": {
                    "description": "Error if not found.",
                    "type": "string"
                },
                "schedule": {
                    "$ref": "YtvSchedule",
                    "description": "The returned schedule."
                }
            },
            "type": "object"
        },
        "ScheduleStatus": {
            "description": "Message of schedule status.",
            "id": "ScheduleStatus",
            "properties": {
                "errors": {
                    "enumDescriptions": [
                        "",
                        "schedule has invalid field like missing id, channel etc.",
                        "schedule has issue when being published.",
                        "schedule has error when validation like gap, overlap etc."
                    ],
                    "items": {
                        "enum": [
                            "ERROR_UNKNOWN",
                            "ERROR_INVALID_FIELD",
                            "ERROR_PUBLISHED_ENTITY",
                            "ERROR_VALIDATION"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "isUpdating": {
                    "description": "true if the schedule is being updated",
                    "type": "boolean"
                },
                "latestScheduleVersions": {
                    "description": "Version of latest schedule of all available sources.",
                    "items": {
                        "$ref": "ScheduleVersion"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ScheduleVersion": {
            "description": "Message of cms schedule version.",
            "id": "ScheduleVersion",
            "properties": {
                "scheduleSource": {
                    "description": "Source of the schedule. E.g. SOURCE_UMS",
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_BLACKOUT",
                        "SOURCE_UMS",
                        "SOURCE_CMS_CANONICAL",
                        "SOURCE_CMS_MANUAL",
                        "SOURCE_TMS",
                        "SOURCE_KG",
                        "SOURCE_GROUND_TRUTH",
                        "SOURCE_SCTE224"
                    ],
                    "enumDescriptions": [
                        "Unknown schedule source.",
                        "Blackout Schedule.",
                        "Schedule fetch from ums.",
                        "Canonical schedule from cms.",
                        "Manual schedule from cms.",
                        "Schedule fetch from tms.",
                        "Knowledge Graph.",
                        "Ground Truth from CMS",
                        "SCTE 224 schedule that contains source station info"
                    ],
                    "type": "string"
                },
                "scheduleVersionTimestamp": {
                    "description": "Version timestamp",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SchedulesOperationDetails": {
            "description": "Params for schedule adjust operations\nNext tag: 14",
            "id": "SchedulesOperationDetails",
            "properties": {
                "auditSource": {
                    "$ref": "AuditSource",
                    "description": "Audit Source used for making the edit. This will be filled by Publish to\nBlackouts Action in CMS."
                },
                "blackoutsBackend": {
                    "description": "blackout backend version.",
                    "type": "string"
                },
                "context": {
                    "description": "Context of the client making the request (e.g. 'eog' or schedule-audit')",
                    "type": "string"
                },
                "delayAnyUpcoming": {
                    "description": "delay any upcoming blackouts, only used in EXTEND_ACTIVE_BLACKOUTS",
                    "type": "boolean"
                },
                "operationDuration": {
                    "description": "Duration/Delay minutes used by OPERATION_EXTEND_LIVE_AIRING,\nOPERATION_EXTEND_ACTIVE_BLACKOUTS, OPERATION_DELAY_NEXT_COMING_BLACKOUTS\ndefault is 5.",
                    "format": "google-duration",
                    "type": "string"
                },
                "operationTarget": {
                    "description": "The target of operations.",
                    "enum": [
                        "TARGET_UNSPECIFIED",
                        "TARGET_AIRINGS_ONLY",
                        "TARGET_BLACKOUTS_ONLY",
                        "TARGET_BLACKOUTS_AIRINGS"
                    ],
                    "enumDescriptions": [
                        "Adjust the default target or targets for the operation.",
                        "This request is going to adjust airings in the schedule.",
                        "This request is going to adjust blackouts in the schedule.",
                        "This request is going to adjust both blackouts and airings in the\nschedule."
                    ],
                    "type": "string"
                },
                "operationType": {
                    "description": "The type of operations.",
                    "enum": [
                        "OPERATION_UNKNOWN",
                        "OPERATION_EXTEND",
                        "OPERATION_END",
                        "OPERATION_START",
                        "OPERATION_DELAY",
                        "OPERATION_DELAY_NEXT_UPCOMING",
                        "OPERATION_START_UPCOMING",
                        "OPERATION_BLACKOUT_ALL_STATIONS",
                        "OPERATION_SPLIT_ACTIVE_BLACKOUTS"
                    ],
                    "enumDescriptions": [
                        "Unknown operation type",
                        "--------------Operations valid for any target--------------------\nEach active target should have its end time extended by X minutes.",
                        "After modification the end time of active target of each station\nwill be changed to active time.",
                        "After modification the start time of active target of each station\nwill be changed to active time.",
                        "After modification the start time of active target of each station\nwill be delayed by X minutes.",
                        "After modification if a station has a blackout/airing upcoming in the\nnext hour its start and end time should be increased by duration.",
                        "After modification if a station has a blackout/airing upcoming in the\nnext hour its start time is changed to now.",
                        "--------------Blackout specific operations-----------------------\nAfter modification each station should have a network level blackout\nadded to it with the specified duration.",
                        "Splits a blackout in half by ending the current blackout and creating a\nnew blackout duration minutes in the future."
                    ],
                    "type": "string"
                },
                "reason": {
                    "description": "reasons for adjusting.",
                    "type": "string"
                },
                "scheduleEndTime": {
                    "description": "end time of the manual schedule, used in airing adjustment",
                    "format": "google-datetime",
                    "type": "string"
                },
                "scheduleStartTime": {
                    "description": "start time of the manual schedule, used in airing adjustment",
                    "format": "google-datetime",
                    "type": "string"
                },
                "shiftNext": {
                    "description": "shift next Y programs.",
                    "format": "int32",
                    "type": "integer"
                },
                "sourceId": {
                    "description": "Source making the edit.",
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_OPS_SERVER",
                        "SOURCE_MR_AIRINGS",
                        "SOURCE_GRACENOTE_SPORTS_PARSER",
                        "SOURCE_HUMAN",
                        "SOURCE_SCHEDULE_PROCESSOR",
                        "SOURCE_BACKLOT_SERVER",
                        "SOURCE_TMS_PROGRAM_PROCESSOR",
                        "SOURCE_TMS_IMAGE_PROCESSOR",
                        "SOURCE_TMS_PERSON_PROCESSOR",
                        "SOURCE_TMS_SHOW_PROCESSOR",
                        "SOURCE_TMS_TEAM_PROCESSOR",
                        "SOURCE_VALIDATE_SCHEDULE_PROCESSOR",
                        "SOURCE_KG_LEAGUE_PROCESSOR",
                        "SOURCE_KG_SPORTS_PARTICIPANT_PROCESSOR",
                        "SOURCE_KG_SPORTS_EVENT_PROCESSOR",
                        "SOURCE_KG_LEAGUE_SPORTS_EVENTS_PROCESSOR",
                        "SOURCE_KG_TEAM_SPORTS_EVENTS_PROCESSOR",
                        "SOURCE_KG_PERSON_PROCESSOR",
                        "SOURCE_MANUAL_LEAGUE_PROCESSOR",
                        "SOURCE_TMS_TEAM_UPDATER",
                        "SOURCE_TMS_SCHEDULE_WATCHER",
                        "SOURCE_TMS_SHOWS_UPDATER",
                        "SOURCE_TMS_IMAGES_UPDATER",
                        "SOURCE_TMS_PROGRAMS_UPDATER",
                        "SOURCE_TMS_PROGRAM_REFRESHER",
                        "SOURCE_AIRING_PUBLISHER",
                        "SOURCE_BLACKOUT_RULES_PUBLISHER",
                        "SOURCE_BLACKOUT_RULES_STATION_PUBLISHER",
                        "SOURCE_DVRINIT_PUBLISHER",
                        "SOURCE_DVRSCHEDULE_PUBLISHER",
                        "SOURCE_EPISODE_PUBLISHER",
                        "SOURCE_EVENT_PUBLISHER",
                        "SOURCE_LIVE_BROADCAST_PUBLISHER",
                        "SOURCE_MOVIE_PUBLISHER",
                        "SOURCE_NETWORK_PUBLISHER",
                        "SOURCE_PERSON_PUBLISHER",
                        "SOURCE_PROGRAM_PUBLISHER",
                        "SOURCE_SHOW_PUBLISHER",
                        "SOURCE_STATION_PUBLISHER",
                        "SOURCE_VOD_DELIVERY_PUBLISHER",
                        "SOURCE_YTSERIES_PUBLISHER",
                        "SOURCE_PREFETCH_DVR_USERS_PROCESSOR",
                        "SOURCE_DVR_LIVE_EXTENSION_PROCESSOR",
                        "SOURCE_TVOD_CATALOG",
                        "SOURCE_CMS_API_SERVER",
                        "SOURCE_CMS_ACTION_SERVICES",
                        "SOURCE_CMS_DEV_RESETTER",
                        "SOURCE_DVR_MASTER",
                        "SOURCE_POLICY_ADMIN",
                        "SOURCE_PCC_SERVER",
                        "SOURCE_SCTE224_SERVER",
                        "SOURCE_SCTE35_SERVER",
                        "SOURCE_OPS_BPARSER",
                        "SOURCE_OPS_SYMPHONY",
                        "SOURCE_WHISPER_SERVER",
                        "SOURCE_URSA_MAJOR",
                        "SOURCE_STREAM_PROBER",
                        "SOURCE_TMS_SCHEDULE_GAP_FIXER",
                        "SOURCE_SLURP",
                        "SOURCE_OPS_INGESTOR",
                        "SOURCE_OPS_WEB_TOOL",
                        "SOURCE_LIVE_AGENT",
                        "SOURCE_WON_KG_ADAPTER",
                        "SOURCE_MCSTREAMY",
                        "SOURCE_SPORT_LEAGUE_EVENT_SPREADSHEET_READER",
                        "SOURCE_TMS",
                        "SOURCE_UMC",
                        "SOURCE_NUCLEUS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors/kg",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/processors/manual",
                        "The binary lives in /video/youtube/tvfilm/unplugged/platform\n/backlot/updater/.",
                        "binary @ video/youtube/tvfilm/unplugged/platform/backlot/tools",
                        "binary @\nvideo/youtube/tvfilm/unplugged/platform/backlot/tools/tms_xml_watcher",
                        "",
                        "",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/backlot/tools/tms_program_refresher",
                        "binary @\nvideo/youtube/tvfilm/unplugged/publisher",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "DVR related bt processors.\nbinary dvr_init_worker @\nvideo/youtube/tvfilm/unplugged/publisher/processors",
                        "",
                        "binary@\nvideo/youtube/tvfilm/tvod/catalog/batch",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/api_server",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/actions",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/cms/tools/cms_dev_resetter",
                        "binary@\nvideo/youtube/tvfilm/unplugged/platform/dvr_master:dvr_master",
                        "Source for policies created/updated/deleted using blackouts v2 admin api.",
                        "Source for policies creating using PCC API.\nbinary @\njava/com/google/video/youtube/tvfilm/unplugged/linear/pcc:PccServer",
                        "Source for policies created using SCTE224.\nbinary @\njava/com/google/video/youtube/tvfilm/unplugged/linear/pcc:Scte224Server",
                        "binary @\nvideo/youtube/tvfilm/unplugged/linear/scte35:server",
                        "Ops team blackouts parser, See go/bparser",
                        "Ops team Symphony workflows. See go/symphony",
                        "Whisper server, video/youtube/tvfilm/unplugged/linear/whisper\nSee go/part-time-station.",
                        "Ursa major server.",
                        "Stream prober.",
                        "Schedule gap fixer",
                        "Slurp server\nvideo/youtube/tvfilm/unplugged/linear/slurp",
                        "Ops team blackouts ingestor, see go/ytspe-blackouts-ingestor",
                        "Ops Web Tool (Truman)",
                        "YT Live Agent (usually via Stream Prober on behalf of Live Agent).",
                        "Won Kg Adapter",
                        "McStreamy monitoring service",
                        "Sport league and events spreadsheet reader",
                        "TMS Schedule source.",
                        "UMC",
                        "Nucleus, Linear TV Team data portal."
                    ],
                    "type": "string"
                },
                "targetTime": {
                    "description": "target time stamp used by OPERATION_START and OPERATION_END",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Score": {
            "description": "A single score unit/data.",
            "id": "Score",
            "properties": {
                "score": {
                    "type": "string"
                },
                "unit": {
                    "enum": [
                        "UNIT_UNKNOWN",
                        "UNIT_RAW",
                        "UNIT_POINTS",
                        "UNIT_CENTIMETERS",
                        "UNIT_METERS",
                        "UNIT_KILOMETERS",
                        "UNIT_FEET",
                        "UNIT_YARDS",
                        "UNIT_MILES",
                        "UNIT_SECONDS",
                        "UNIT_MINUTES",
                        "UNIT_HOURS",
                        "UNIT_KILOGRAMS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Scte224Airing": {
            "description": "Airing data.",
            "id": "Scte224Airing",
            "properties": {
                "airingMediaPointData": {
                    "$ref": "MediaPointData",
                    "description": "Using these media point ids, you can find the matched airings for stream\nswitchings."
                },
                "sourceMediaPointData": {
                    "$ref": "MediaPointData",
                    "description": "Not set for source from resident policy."
                },
                "timeRange": {
                    "$ref": "TimeRange",
                    "description": "Start and end time of airing."
                },
                "title": {
                    "description": "Title of airing.",
                    "type": "string"
                },
                "tmsId": {
                    "description": "TMS id of the airing.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Scte35Marker": {
            "id": "Scte35Marker",
            "properties": {
                "markerWalltime": {
                    "description": "Timestamp at which marker was received.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "upid": {
                    "description": "Unique identifier to identify the content.",
                    "format": "byte",
                    "type": "string"
                },
                "upidType": {
                    "description": "Denotes the type of marker. 16 => Airing start, 17 => Airing end.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "SearchResponse": {
            "description": "Response message for the  YouTubeTVOpsService.SearchStations RPC",
            "id": "SearchResponse",
            "properties": {
                "estimatedResults": {
                    "description": "Total estimated number of results.",
                    "format": "int32",
                    "type": "integer"
                },
                "nextPageToken": {
                    "description": "A token to send with the next request to fetch more results.\nThis token is not returned.",
                    "type": "string"
                },
                "results": {
                    "description": "The list of returned stations.",
                    "items": {
                        "$ref": "SearchResult"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SearchRestrictions": {
            "description": "A set of restrictions/filters to apply to the search.\nAll restrictions specified will be AND'd together unless otherwise noted.",
            "id": "SearchRestrictions",
            "properties": {
                "allowedResultTypes": {
                    "description": "A result may match any result type in this list (i.e. they are or'd)",
                    "enumDescriptions": [
                        "May include any result types.",
                        "Only returns station results."
                    ],
                    "items": {
                        "enum": [
                            "ALLOWED_RESULT_TYPE_UNSPECIFIED",
                            "ALLOWED_RESULT_TYPE_STATIONS"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "allowedStationLaunchStates": {
                    "description": "A result must be in any of the states in this list (i.e. they are or'd)",
                    "enumDescriptions": [
                        "Unspecified station launch, not a valid launch state for API use.",
                        "State is not launched",
                        "State is launched to ops",
                        "State is launched to fishfood",
                        "State is launched to dogfood",
                        "State is launched to public"
                    ],
                    "items": {
                        "enum": [
                            "ALLOW_STATION_LAUNCH_STATE_UNSPECIFIED",
                            "ALLOW_STATION_LAUNCH_STATE_UNLAUNCHED",
                            "ALLOW_STATION_LAUNCH_STATE_OPS",
                            "ALLOW_STATION_LAUNCH_STATE_FISHFOOD",
                            "ALLOW_STATION_LAUNCH_STATE_DOGFOOD",
                            "ALLOW_STATION_LAUNCH_STATE_PUBLIC"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "allowedTags": {
                    "$ref": "AllowedTags",
                    "description": "A set of tags that an entity must match."
                },
                "stationHasLiveAiring": {
                    "$ref": "StationHasLiveAiring",
                    "description": "Matches any station that has a live airing."
                },
                "stationHasSwitchingType": {
                    "description": "Matches any station that has specific stream switching type",
                    "enumDescriptions": [
                        "Unknown switching type.",
                        "station used as source in stream switching only"
                    ],
                    "items": {
                        "enum": [
                            "TYPE_UNKNOWN",
                            "TYPE_SOURCE_STATION"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "stationHasUpcomingBlackout": {
                    "$ref": "StationHasUpcomingBlackout",
                    "description": "Matches any station that has an upcoming blackout matching these restricts."
                }
            },
            "type": "object"
        },
        "SearchResult": {
            "description": "A single search result",
            "id": "SearchResult",
            "properties": {
                "name": {
                    "description": "The one-platform resource name",
                    "type": "string"
                },
                "primaryText": {
                    "description": "Primary display text.",
                    "type": "string"
                },
                "secondaryText": {
                    "description": "Secondary display text.",
                    "type": "string"
                },
                "thumbnail": {
                    "$ref": "ThumbnailDetails",
                    "description": "A thumbnail representing this entity."
                },
                "unpluggedId": {
                    "$ref": "UnpluggedId",
                    "description": "The id of this resource in Unplugged.\nAlso tells the type of this result."
                }
            },
            "type": "object"
        },
        "SearchTag": {
            "id": "SearchTag",
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Season": {
            "description": "Next tag: 10",
            "id": "Season",
            "properties": {
                "details": {
                    "$ref": "SeasonDetails"
                },
                "episode": {
                    "items": {
                        "$ref": "Program"
                    },
                    "type": "array"
                },
                "episodes": {
                    "items": {
                        "$ref": "Episode"
                    },
                    "type": "array"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this season. This may, or may not be same\nas id from other environments (e.g KG, YouTube etc.) for the same season.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet"
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "restricts": {
                    "$ref": "ContentRestricts"
                },
                "showId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SeasonDetails": {
            "description": "Next tag: 11",
            "id": "SeasonDetails",
            "properties": {
                "displaySeasonNumber": {
                    "description": "Season number to display to users. May not exist.",
                    "type": "string"
                },
                "unpluggedSeasonIndex": {
                    "description": "Our internal index of the season in the show. Must exist.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "SeasonInfo": {
            "id": "SeasonInfo",
            "properties": {
                "fullSeasonTimeRanges": {
                    "description": "Available time windows for the season to have all episodes.",
                    "items": {
                        "$ref": "TimeRange"
                    },
                    "type": "array"
                },
                "premiereTimeRanges": {
                    "description": "Available time windows for the season to be premiere (latest episode is\nreleased within one month).",
                    "items": {
                        "$ref": "TimeRange"
                    },
                    "type": "array"
                },
                "unpluggedSeasonIndex": {
                    "format": "int32",
                    "type": "integer"
                },
                "vodEpisodes": {
                    "items": {
                        "$ref": "EpisodeInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SendNotificationsProcessorLog": {
            "description": "Processor log for send notifications processor.",
            "id": "SendNotificationsProcessorLog",
            "properties": {
                "errors": {
                    "description": "Overall or per task errors or warnings.",
                    "items": {
                        "$ref": "StatusProto"
                    },
                    "type": "array"
                },
                "perNotificationResult": {
                    "description": "Per notification status. One per notification, recorded even when status is\nok.",
                    "items": {
                        "$ref": "PerNotificationResult"
                    },
                    "type": "array"
                },
                "readTimestampMicros": {
                    "description": "Dirty column read timestamp.",
                    "format": "int64",
                    "type": "string"
                },
                "taskSize": {
                    "description": "Number of tasks to process.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "SetScteAdMarkerOffsetRequest": {
            "description": "Request message for the YouTubeTVOpsService.SetScteAdMarkerOffset RPC",
            "id": "SetScteAdMarkerOffsetRequest",
            "properties": {
                "context": {
                    "description": "Context of the client making the request (e.g. 'eog' or schedule-audit')",
                    "type": "string"
                },
                "cueToneId": {
                    "description": "id of the scte marker;",
                    "type": "string"
                },
                "isCueOut": {
                    "description": "Cue out / start of ad break",
                    "type": "boolean"
                },
                "maxOffset": {
                    "description": "Maximum offset from original time",
                    "format": "google-duration",
                    "type": "string"
                },
                "minOffset": {
                    "description": "Minimum offset from original time",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SetScteAdMarkerOffsetResponse": {
            "description": "Response message for the YouTubeTVOpsService.SetScteAdMarkerOffset RPC",
            "id": "SetScteAdMarkerOffsetResponse",
            "properties": {},
            "type": "object"
        },
        "Show": {
            "description": "Next tag: 12",
            "id": "Show",
            "properties": {
                "details": {
                    "$ref": "ShowDetails"
                },
                "discoveryMetadata": {
                    "$ref": "DiscoveryMetadata",
                    "description": "DiscoveryMetadata Info. Moved to UST."
                },
                "episodes": {
                    "description": "These fields are not stored in the UMS DB, but populated during the Show\nread.",
                    "items": {
                        "$ref": "Episode"
                    },
                    "type": "array"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this show. This may, or may not be same\nas id from other environments (e.g KG, YouTube etc.) for the same season.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet"
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "restricts": {
                    "$ref": "ContentRestricts"
                },
                "season": {
                    "items": {
                        "$ref": "Season"
                    },
                    "type": "array"
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                }
            },
            "type": "object"
        },
        "ShowCandidates": {
            "description": "Each repeated field has 10 episodes if available.\nthese fields are sorted based on display_time_seconds or\nunplugged_season_index + unplugged_episode_index.",
            "id": "ShowCandidates",
            "properties": {
                "latestPeriodEpisodes": {
                    "description": "for weekly/monthly based show. Period can be 7 days or 30 days.",
                    "items": {
                        "$ref": "EpisodeUniqueContentMetadata"
                    },
                    "type": "array"
                },
                "latestSeasonEpisodes": {
                    "items": {
                        "$ref": "EpisodeUniqueContentMetadata"
                    },
                    "type": "array"
                },
                "seasonFirstEpisodes": {
                    "description": "first available episode for each season.",
                    "items": {
                        "$ref": "EpisodeUniqueContentMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ShowDetails": {
            "description": "Next tag: 26",
            "id": "ShowDetails",
            "properties": {
                "castMembers": {
                    "description": "Cast and Crew.\n\nThe lists are kept separate for now due to the fact that ordering is\nmeaningful within each list (i.e more prominent actors first).",
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "corpus": {
                    "description": "Corpus type for this program (SVOD/TVOD/LIVE).",
                    "enum": [
                        "CORPUS_UNKNOWN",
                        "CORPUS_SVOD",
                        "CORPUS_TVOD",
                        "CORPUS_TV",
                        "CORPUS_YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Represents transactional content.",
                        "Represents live tv.",
                        "Represents youtube creator content."
                    ],
                    "type": "string"
                },
                "countryRestriction": {
                    "$ref": "CountryRestriction",
                    "description": "Country restrictions for this program."
                },
                "crewMembers": {
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "customPlayerMetadata": {
                    "$ref": "CustomPlayerMetadata"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Additional info about the show."
                },
                "entityNetworks": {
                    "$ref": "EntityNetworks"
                },
                "episodesDisplayType": {
                    "enum": [
                        "EPISODES_DISPLAY_TYPE_UNKNOWN",
                        "EPISODES_DISPLAY_TYPE_SEASON_BASED",
                        "EPISODES_DISPLAY_TYPE_MONTHLY_BASED",
                        "EPISODES_DISPLAY_TYPE_WEEKLY_BASED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Standard season based shows, displaying episodes by season.",
                        "Daily shows with new airings 4-5 times/week, displaying episodes by month.",
                        "Daily shows with new airings > 5 times/week, displaying episodes by week."
                    ],
                    "type": "string"
                },
                "episodesDisplayTypeOpsOverride": {
                    "enum": [
                        "EPISODES_DISPLAY_TYPE_UNKNOWN",
                        "EPISODES_DISPLAY_TYPE_SEASON_BASED",
                        "EPISODES_DISPLAY_TYPE_MONTHLY_BASED",
                        "EPISODES_DISPLAY_TYPE_WEEKLY_BASED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Standard season based shows, displaying episodes by season.",
                        "Daily shows with new airings 4-5 times/week, displaying episodes by month.",
                        "Daily shows with new airings > 5 times/week, displaying episodes by week."
                    ],
                    "type": "string"
                },
                "fifeImages": {
                    "description": "Set of fife images, which contain fife url and aspect ratio, for show.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "finaleYear": {
                    "description": "The year of last season (e.g. 2005)",
                    "type": "string"
                },
                "genres": {
                    "description": "List of genres for this show.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "Set of ingestion images, converted directly from external sources, for\nshow.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultOnly": {
                    "type": "boolean"
                },
                "networkIds": {
                    "description": "List of TV networks the show airs on.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "originatingYtSource": {
                    "$ref": "OriginatingYTSource",
                    "description": "Filled if the show originated from a youtube entity."
                },
                "partnerGenres": {
                    "description": "List of raw genre strings from parnter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "premiereYear": {
                    "description": "The year of first season (e.g. 1997)",
                    "type": "string"
                },
                "primaryNetworkId": {
                    "description": "The top-level network this program airs on.",
                    "type": "string"
                },
                "rating": {
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "recommendedAudience": {
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Primary title of the show."
                },
                "tmsOriginalNetwork": {
                    "description": "Original network name (like \"NBC\", \"ABC\", etc).\nNOTE: don't use this directly, it is used to derive primary network id.",
                    "type": "string"
                },
                "vodDetails": {
                    "$ref": "VodDetails",
                    "description": "Will be true if any of its programs are vod."
                }
            },
            "type": "object"
        },
        "ShowFlags": {
            "description": "next tag: 3",
            "id": "ShowFlags",
            "properties": {
                "kidsCorpus": {
                    "enum": [
                        "KIDS_CORPUS_UNKNOWN",
                        "KIDS_CORPUS_NOT_OK",
                        "KIDS_CORPUS_OK"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "seriesStyle": {
                    "enum": [
                        "SERIES_STYLE_UNKNOWN",
                        "SERIES_STYLE_EPISODIC",
                        "SERIES_STYLE_SERIAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "The normal style for most shows, each show contains a set of seasons,\neach season represents a set of probably contiguous episodes, each\nepisode contains one or more programs.",
                        "Shows that only contain one season, and one episode. All airings point\nto the same episode in db, but each airing is effectively a new episode (\ne.g. some news or talk shows).Doc: http://shortn/_uxeG99Mq7S"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ShowIngestionMetadata": {
            "id": "ShowIngestionMetadata",
            "properties": {
                "episodesDisplayType": {
                    "description": "Whether the show is season based, or montly/weekly based.",
                    "enum": [
                        "EPISODES_DISPLAY_TYPE_UNKNOWN",
                        "EPISODES_DISPLAY_TYPE_SEASON_BASED",
                        "EPISODES_DISPLAY_TYPE_MONTHLY_BASED",
                        "EPISODES_DISPLAY_TYPE_WEEKLY_BASED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Standard season based shows, displaying episodes by season.",
                        "Daily shows with new airings 4-5 times/week, displaying episodes by month.",
                        "Daily shows with new airings > 5 times/week, displaying episodes by week."
                    ],
                    "type": "string"
                },
                "episodesOriginalAiringTimeSecs": {
                    "description": "Past 28 and future 14 premier timestamps generated for:\n* Episodes of the season based show.\nSorted by descending order.",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                },
                "nonSeasonalShowFrequencyInLast7Days": {
                    "description": "Frequency in last 7 days generated for:\n* Non season based Shows.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "SidelineStation": {
            "description": "Station available for user. Combines fields needed for render from\nUMS' youtube.unplugged.Station and UPS' youtube.unplugged.ups.ContentNode.",
            "id": "SidelineStation",
            "properties": {
                "channelNumber": {
                    "description": "Used for ordering channels in the EPG.",
                    "format": "int32",
                    "type": "integer"
                },
                "isNational": {
                    "description": "Whether this station is national station.",
                    "type": "boolean"
                },
                "logoImage": {
                    "description": "Logo to be displayed.",
                    "type": "string"
                },
                "package": {
                    "$ref": "Package",
                    "description": "Reason why this station in user's lineup."
                },
                "shortName": {
                    "description": "Contains short name for this station (e.g. 'ABC').",
                    "type": "string"
                },
                "stationCallSign": {
                    "description": "The call sign of this station (e.g. 'KGO').",
                    "type": "string"
                },
                "stationId": {
                    "description": "Station id UMS (e.g. 'STziklI9XYuUM=').",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Signal": {
            "description": "Defines a ranking signal using a type and a score.\nNext tag: 59",
            "id": "Signal",
            "properties": {
                "confidence": {
                    "format": "float",
                    "type": "number"
                },
                "debugInfo": {
                    "type": "string"
                },
                "debugScores": {
                    "items": {
                        "$ref": "DebugScore"
                    },
                    "type": "array"
                },
                "score": {
                    "format": "float",
                    "type": "number"
                },
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "CHUCK_DEFAULT_POPULARITY",
                        "CHUCK_SHORT_TERM_POPULARITY",
                        "CHUCK_TRENDING",
                        "QUERY_VOLUME_RZ_TRENDING",
                        "CHUCK_VIEWERSHIP",
                        "CHUCK_VIEWERSHIP_AGG",
                        "CHUCK_SPORTS_POPULARITY",
                        "QUERY_SPANNING_MENTIONS",
                        "RM_QUERY_SPANNING_MENTIONS",
                        "RM_QUERY_SPANNING_MENTIONS_AGG",
                        "LOG_IMPRESSIONS",
                        "RM_LOG_IMPRESSIONS",
                        "CHUCK_USER_BASED_RATING",
                        "CHUCK_TMS_QUALITY_RATING",
                        "BONES_TMS_QUALITY_RATING",
                        "BONES_TOMATO_CRITIC_RATING",
                        "BONES_TOMATO_FAN_RATING",
                        "TS_TOMATO_CRITIC_RATING",
                        "TS_IMDB_RATING",
                        "TS_TV_COM_RATING",
                        "TS_METACRITIC_RATING",
                        "POPULARITY_RESCALED",
                        "POPULARITY_SHORTTERM_RESCALED",
                        "TRENDING_RESCALED",
                        "RATING_RESCALED",
                        "VIEWERSHIP_RESCALED",
                        "YOUTUBE_WATCHTIME_RESCALED",
                        "YT_UNPLUGGED_WATCHTIME_RESCALED",
                        "YT_UNPLUGGED_WATCHTIME",
                        "YT_UNPLUGGED_VIEWCOUNT",
                        "YT_UNPLUGGED_STATION_WATCHTIME",
                        "YT_UNPLUGGED_STATION_VIEWCOUNT",
                        "YT_UNPLUGGED_COLLECTS",
                        "YT_UNPLUGGED_COLLECTS_RESCALED",
                        "YT_UNPLUGGED_COLLECTS_SHORTTERM",
                        "YT_UNPLUGGED_COLLECTS_SHORTTERM_RESCALED",
                        "YT_UNPLUGGED_USER_COLLECT_PERCENTAGE",
                        "YT_UNPLUGGED_RECENT_COLLECT_RATIO",
                        "YT_UNPLUGGED_ACTIVE_DVR_RATIO",
                        "YTV_RATING",
                        "YTV_VIEWERSHIP",
                        "YTV_VIEWERSHIP_SIX_MONTHS",
                        "YOUTUBE_HOTNESS_AGG",
                        "QV_7D_RESCALED",
                        "MAPPED_YOUTUBE_RELATED_GRAPH",
                        "RM_CHUCK_SIMILARITY",
                        "RM_WEB_COOCCURRENCE",
                        "RM_YOUTUBE_COWATCHED_CHANNELS",
                        "RELATEDNESS_FROM_TAGS_SIMILARITY",
                        "RELATEDNESS_FROM_EMBEDDING_SIMILARITY",
                        "BLENDED_RELATEDNESS",
                        "BLENDED_RELATEDNESS_MODEL_BASED",
                        "GLOBAL_RM_CHUCK_SIMILARITY",
                        "GLOBAL_NETWORK_TO_YTV_RELATEDNESS",
                        "INVERTED_GLOBAL_RM_CHUCK_SIMILARITY",
                        "INVERTED_GLOBAL_NETWORK_TO_YTV_RELATEDNESS",
                        "CHANNEL_AFFINITY",
                        "YTV_BELL_WTR"
                    ],
                    "enumDescriptions": [
                        "",
                        "This popularity score is out of weights:\n30 * lastDay + 0.5 * lastWeek + 0.01 * lastMonth.",
                        "This popularity score is out of weights:\n7 * lastDay + 2 * lastWeek.",
                        "trending score = click_count(last_week)  # (=weeks_back_click_counts[0])\n  * multiplier  # derived from map(weeks_back_click_counts, growth_rate)\n  * len(e for e in weeks_back_click_counts if growth_rate(e) > 1.2)\n  / len(weeks_back_click_counts)  # doesn't look back more than 5 weeks.\n// See also: TrendingScorer#getTrendingScore.",
                        "Trending score calculated from query volume. Rolling Z-Score is computed\nover trailing 7 days search volume.",
                        "This viewership is predicted from a live TV model over live TV features.\nSee also: ProgramScorer -- powered by Weka model.",
                        "SUM(chuck viewership) for sports events.",
                        "Chuck sports popularity is powered by sports matchers and click measures.\nSee also: go/sports-recommendations",
                        "QUERY_SPANNING_MENTIONS from the relatedness matrix.\ne.g. a score for movie \"Frozen\" http://go/frozen-query-popularity-score\nhttp://g3doc/knowledge/relatedness/g3doc/signals/query_spanning_mentions",
                        "will deprecate QUERY_SPANNING_MENTIONS.",
                        "SUM(query spanning mentions)",
                        "LOG_IMPRESSIONS from the relatedness matrix.",
                        "will deprecate LOG_IMPRESSIONS.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Rotten Tomato Critic rating scraped from topic server.\nTODO (rajeshroy): Deprecate BONES_TOMATO_CRITIC_RATING once we are fully\nsatisfied with TS_TOMATO_CRITIC_RATING signal.",
                        "IMDB rating scraped from topic server.",
                        "TV.com rating scraped from topic server.",
                        "Metacritic rating scraped from topic server.",
                        "Signals are rescaled by standardization -- shifting the distribution of\neach score to have a mean of 0 and a std deviation of 1 (unit variance).\nfrom GTV Chuck, and query spanning mentions.",
                        "Blended popularity using QV_7D_RESCALED, QUERY_VOLUME_RZ_TRENDING and few\nadditional inputs. Still under experimentation.",
                        "from GTV Chuck trending scores.",
                        "from GTV Chuck, TMS, and Tomato rating scores.",
                        "from GTV Chuck viewerships.",
                        "Aggregated from playback.watch_time_msec FROM ytdata.bt_activity_base.",
                        "Unplugged User Behavior metrics",
                        "",
                        "",
                        "",
                        "",
                        "Collects signal is calculated from User Action DB (UAS).\nFor each channel, it counts how many users collect it.",
                        "",
                        "Similar to YT_UNPLUGGED_COLLECTS, counts the number of users collect\nthe channel in the past 30 days.",
                        "",
                        "Percentage of two week active users collecting an entity.",
                        "Recent collect ratio is calculated by measuring the ratio of recent\ncollects of a future event to all collects of a future event",
                        "Active dvr ratio is calculated by measuring the ratio of active dvr's\nfor a future event to the total number of users with an active dvr.",
                        "YouTube TV Rating",
                        "YouTube TV viewership over the past two weeks.",
                        "YouTube TV viewership over the past six months.",
                        "youtube hotness scores aggregated.",
                        "Popularity score calculated from query volume of trailing 7 days.\nScore is rescaled and calibrated over content type using Z-Score.\nBased on 7D Query volume",
                        "This relatedness score is among Unplugged shows and movies\n-- influenced by their KG-id-mapped videos in YouTube related graph.",
                        "This similarity score is among TV shows and movies\n-- influenced by signals of TMS data, wikipedia descriptions, and etc.\nSee also go/rm-chuck-similarity.",
                        "See also go/rm-web-cooccurrence",
                        "See also go/rm-yt-cowatched-channels",
                        "",
                        "",
                        "blended e2e scores (chuck sims, web coocc.)",
                        "This blended score is computed using a model-specified configuration.",
                        "Global relatedness signals are keyed by kg id not limited to YTV corpus.\nThe related entities are within YTV corpus keyed by yt external id.",
                        "See also go/ytv-network-relatedness.",
                        "Auxiliary signals which invert index of relatedness signals.",
                        "",
                        "For a given channel (e.g. show sports team), what is the affinity score\nfor different demographic groups. The affinity score of Channel Ci for\ndemographic group Dj (e.g. female users) is calculated as follows:\n\n      affinity(Ci, Dj) = ytv_rating(Ci | Dj) / ytv_rating(Ci)\n\nwhere ytv_rating(Ci), is the global YTV rating of channel Ci, and\nytv_rating(Ci | Dj) is the YTV rating of Channel Ci only among users in\ndemographic group Dj.\n\nThe range of the affinity is [0, +oo). Affinity score greater than 1.0\nmeans this specific group of users are more interested in this channel\nthan general audiences.\n\n Usecases:\n (1). Used to compute the proxy of concurrent viewership per demographic\n e.g. concurrent_viewership(Ci | Dj) =\n          concurrent_viewership(Ci) * affinity(Ci, Dj)",
                        "YouTube TV Bell notification watch through rate.\nWTR = 100 * #watches / #sends\nNote: User can watch an airing without clicking the notification."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SignalTypeWrapper": {
            "description": "Wraps the enum Signal.Type to be available for proto3.",
            "id": "SignalTypeWrapper",
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "CHUCK_DEFAULT_POPULARITY",
                        "CHUCK_SHORT_TERM_POPULARITY",
                        "CHUCK_TRENDING",
                        "QUERY_VOLUME_RZ_TRENDING",
                        "CHUCK_VIEWERSHIP",
                        "CHUCK_VIEWERSHIP_AGG",
                        "CHUCK_SPORTS_POPULARITY",
                        "QUERY_SPANNING_MENTIONS",
                        "RM_QUERY_SPANNING_MENTIONS",
                        "RM_QUERY_SPANNING_MENTIONS_AGG",
                        "LOG_IMPRESSIONS",
                        "RM_LOG_IMPRESSIONS",
                        "CHUCK_USER_BASED_RATING",
                        "CHUCK_TMS_QUALITY_RATING",
                        "BONES_TMS_QUALITY_RATING",
                        "BONES_TOMATO_CRITIC_RATING",
                        "BONES_TOMATO_FAN_RATING",
                        "TS_TOMATO_CRITIC_RATING",
                        "TS_IMDB_RATING",
                        "TS_TV_COM_RATING",
                        "TS_METACRITIC_RATING",
                        "POPULARITY_RESCALED",
                        "POPULARITY_SHORTTERM_RESCALED",
                        "TRENDING_RESCALED",
                        "RATING_RESCALED",
                        "VIEWERSHIP_RESCALED",
                        "YOUTUBE_WATCHTIME_RESCALED",
                        "YT_UNPLUGGED_WATCHTIME_RESCALED",
                        "YT_UNPLUGGED_WATCHTIME",
                        "YT_UNPLUGGED_VIEWCOUNT",
                        "YT_UNPLUGGED_STATION_WATCHTIME",
                        "YT_UNPLUGGED_STATION_VIEWCOUNT",
                        "YT_UNPLUGGED_COLLECTS",
                        "YT_UNPLUGGED_COLLECTS_RESCALED",
                        "YT_UNPLUGGED_COLLECTS_SHORTTERM",
                        "YT_UNPLUGGED_COLLECTS_SHORTTERM_RESCALED",
                        "YT_UNPLUGGED_USER_COLLECT_PERCENTAGE",
                        "YT_UNPLUGGED_RECENT_COLLECT_RATIO",
                        "YT_UNPLUGGED_ACTIVE_DVR_RATIO",
                        "YTV_RATING",
                        "YTV_VIEWERSHIP",
                        "YTV_VIEWERSHIP_SIX_MONTHS",
                        "YOUTUBE_HOTNESS_AGG",
                        "QV_7D_RESCALED",
                        "MAPPED_YOUTUBE_RELATED_GRAPH",
                        "RM_CHUCK_SIMILARITY",
                        "RM_WEB_COOCCURRENCE",
                        "RM_YOUTUBE_COWATCHED_CHANNELS",
                        "RELATEDNESS_FROM_TAGS_SIMILARITY",
                        "RELATEDNESS_FROM_EMBEDDING_SIMILARITY",
                        "BLENDED_RELATEDNESS",
                        "BLENDED_RELATEDNESS_MODEL_BASED",
                        "GLOBAL_RM_CHUCK_SIMILARITY",
                        "GLOBAL_NETWORK_TO_YTV_RELATEDNESS",
                        "INVERTED_GLOBAL_RM_CHUCK_SIMILARITY",
                        "INVERTED_GLOBAL_NETWORK_TO_YTV_RELATEDNESS",
                        "CHANNEL_AFFINITY",
                        "YTV_BELL_WTR"
                    ],
                    "enumDescriptions": [
                        "",
                        "This popularity score is out of weights:\n30 * lastDay + 0.5 * lastWeek + 0.01 * lastMonth.",
                        "This popularity score is out of weights:\n7 * lastDay + 2 * lastWeek.",
                        "trending score = click_count(last_week)  # (=weeks_back_click_counts[0])\n  * multiplier  # derived from map(weeks_back_click_counts, growth_rate)\n  * len(e for e in weeks_back_click_counts if growth_rate(e) > 1.2)\n  / len(weeks_back_click_counts)  # doesn't look back more than 5 weeks.\n// See also: TrendingScorer#getTrendingScore.",
                        "Trending score calculated from query volume. Rolling Z-Score is computed\nover trailing 7 days search volume.",
                        "This viewership is predicted from a live TV model over live TV features.\nSee also: ProgramScorer -- powered by Weka model.",
                        "SUM(chuck viewership) for sports events.",
                        "Chuck sports popularity is powered by sports matchers and click measures.\nSee also: go/sports-recommendations",
                        "QUERY_SPANNING_MENTIONS from the relatedness matrix.\ne.g. a score for movie \"Frozen\" http://go/frozen-query-popularity-score\nhttp://g3doc/knowledge/relatedness/g3doc/signals/query_spanning_mentions",
                        "will deprecate QUERY_SPANNING_MENTIONS.",
                        "SUM(query spanning mentions)",
                        "LOG_IMPRESSIONS from the relatedness matrix.",
                        "will deprecate LOG_IMPRESSIONS.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Rotten Tomato Critic rating scraped from topic server.\nTODO (rajeshroy): Deprecate BONES_TOMATO_CRITIC_RATING once we are fully\nsatisfied with TS_TOMATO_CRITIC_RATING signal.",
                        "IMDB rating scraped from topic server.",
                        "TV.com rating scraped from topic server.",
                        "Metacritic rating scraped from topic server.",
                        "Signals are rescaled by standardization -- shifting the distribution of\neach score to have a mean of 0 and a std deviation of 1 (unit variance).\nfrom GTV Chuck, and query spanning mentions.",
                        "Blended popularity using QV_7D_RESCALED, QUERY_VOLUME_RZ_TRENDING and few\nadditional inputs. Still under experimentation.",
                        "from GTV Chuck trending scores.",
                        "from GTV Chuck, TMS, and Tomato rating scores.",
                        "from GTV Chuck viewerships.",
                        "Aggregated from playback.watch_time_msec FROM ytdata.bt_activity_base.",
                        "Unplugged User Behavior metrics",
                        "",
                        "",
                        "",
                        "",
                        "Collects signal is calculated from User Action DB (UAS).\nFor each channel, it counts how many users collect it.",
                        "",
                        "Similar to YT_UNPLUGGED_COLLECTS, counts the number of users collect\nthe channel in the past 30 days.",
                        "",
                        "Percentage of two week active users collecting an entity.",
                        "Recent collect ratio is calculated by measuring the ratio of recent\ncollects of a future event to all collects of a future event",
                        "Active dvr ratio is calculated by measuring the ratio of active dvr's\nfor a future event to the total number of users with an active dvr.",
                        "YouTube TV Rating",
                        "YouTube TV viewership over the past two weeks.",
                        "YouTube TV viewership over the past six months.",
                        "youtube hotness scores aggregated.",
                        "Popularity score calculated from query volume of trailing 7 days.\nScore is rescaled and calibrated over content type using Z-Score.\nBased on 7D Query volume",
                        "This relatedness score is among Unplugged shows and movies\n-- influenced by their KG-id-mapped videos in YouTube related graph.",
                        "This similarity score is among TV shows and movies\n-- influenced by signals of TMS data, wikipedia descriptions, and etc.\nSee also go/rm-chuck-similarity.",
                        "See also go/rm-web-cooccurrence",
                        "See also go/rm-yt-cowatched-channels",
                        "",
                        "",
                        "blended e2e scores (chuck sims, web coocc.)",
                        "This blended score is computed using a model-specified configuration.",
                        "Global relatedness signals are keyed by kg id not limited to YTV corpus.\nThe related entities are within YTV corpus keyed by yt external id.",
                        "See also go/ytv-network-relatedness.",
                        "Auxiliary signals which invert index of relatedness signals.",
                        "",
                        "For a given channel (e.g. show sports team), what is the affinity score\nfor different demographic groups. The affinity score of Channel Ci for\ndemographic group Dj (e.g. female users) is calculated as follows:\n\n      affinity(Ci, Dj) = ytv_rating(Ci | Dj) / ytv_rating(Ci)\n\nwhere ytv_rating(Ci), is the global YTV rating of channel Ci, and\nytv_rating(Ci | Dj) is the YTV rating of Channel Ci only among users in\ndemographic group Dj.\n\nThe range of the affinity is [0, +oo). Affinity score greater than 1.0\nmeans this specific group of users are more interested in this channel\nthan general audiences.\n\n Usecases:\n (1). Used to compute the proxy of concurrent viewership per demographic\n e.g. concurrent_viewership(Ci | Dj) =\n          concurrent_viewership(Ci) * affinity(Ci, Dj)",
                        "YouTube TV Bell notification watch through rate.\nWTR = 100 * #watches / #sends\nNote: User can watch an airing without clicking the notification."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SignalsProcessorLog": {
            "description": "Shared processing status for all UST signals processors.",
            "id": "SignalsProcessorLog",
            "properties": {
                "dirtyValue": {
                    "description": "The value of the dirty bit which triggered processing.  If there were\nmultiple dirty bits, the one with the highest timestamp will be logged\nhere.",
                    "type": "string"
                },
                "status": {
                    "$ref": "StatusProto"
                }
            },
            "type": "object"
        },
        "SocialProfile": {
            "description": "Encapsulating the url on a social profile.",
            "id": "SocialProfile",
            "properties": {
                "profileId": {
                    "description": "For example, the profile-id for facebook.com/nfl will be nfl.",
                    "type": "string"
                },
                "provider": {
                    "$ref": "EntityEntity"
                },
                "providerType": {
                    "enum": [
                        "UNKNOWN",
                        "FACEBOOK",
                        "TWITTER",
                        "INSTAGRAM"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "This will be the full url.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SportsDetails": {
            "description": "Next tag: 13",
            "id": "SportsDetails",
            "properties": {
                "bonesSportsDetails": {
                    "$ref": "BonesSportsDetails"
                },
                "gameDate": {
                    "$ref": "Date",
                    "description": "The date of the game."
                },
                "gameTime": {
                    "description": "The date and time of the game start, accounting for time zone.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "seasonType": {
                    "description": "Season type",
                    "enum": [
                        "SEASON_TYPE_UNKNOWN",
                        "SEASON_TYPE_PRESEASON",
                        "SEASON_TYPE_REGULAR",
                        "SEASON_TYPE_POSTSEASON"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "seasonYear": {
                    "description": "The year of the season. Eg. 2012 or 2012-2013",
                    "type": "string"
                },
                "sportsEventEntity": {
                    "$ref": "EntityEntity",
                    "description": "Optional sports event entity associated with this program."
                },
                "sportsTitle": {
                    "description": "Primary title of the event.",
                    "type": "string"
                },
                "teamDetails": {
                    "description": "List of details for teams in this program",
                    "items": {
                        "$ref": "SportsDetailsTeamDetailsTeamDetails"
                    },
                    "type": "array"
                },
                "tmsOrganizationId": {
                    "description": "TMS ID for the sports organization.",
                    "type": "string"
                },
                "tmsSportsId": {
                    "description": "TMS ID for the sport of the event.",
                    "type": "string"
                },
                "umsLeagueId": {
                    "description": "When reconciled, UMS IDs for leagues this event is part of.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "venue": {
                    "$ref": "VenueDetails",
                    "description": "The venue of the sports event."
                }
            },
            "type": "object"
        },
        "SportsDetailsTeamDetailsTeamDetails": {
            "description": "Next tag: 5",
            "id": "SportsDetailsTeamDetailsTeamDetails",
            "properties": {
                "eventLocation": {
                    "description": "Location of the event for the team.",
                    "enum": [
                        "EVENT_LOCATION_UNKNOWN",
                        "EVENT_LOCATION_HOME",
                        "EVENT_LOCATION_AWAY",
                        "EVENT_LOCATION_NEUTRAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "fullTeamName": {
                    "description": "Full name for this sports team",
                    "type": "string"
                },
                "tmsSportsTeamId": {
                    "description": "TMS sports team ID.",
                    "type": "string"
                },
                "umsSportsTeamId": {
                    "description": "When reconciled, ID of this sports team in UMS.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SportsLeagueCandidates": {
            "id": "SportsLeagueCandidates",
            "properties": {
                "latestEvents": {
                    "description": "latest 10 candidates sorted by event start date.",
                    "items": {
                        "$ref": "EventUniqueContentMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SportsLeagueIngestionMetadata": {
            "id": "SportsLeagueIngestionMetadata",
            "properties": {
                "detailsLinkLeagueChannelId": {
                    "description": "The details page that displayed this league. Used for flexible sports\ngrouping. See youtube.unplugged.sports.LeagueInfo for details.",
                    "type": "string"
                },
                "sportsEventsOriginalAiringTimeSecs": {
                    "description": "Past 28 and future 14 premier timestamps generated for:\n* Games of a tail league.\nSorted by descending order.",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SportsTeamCandidates": {
            "id": "SportsTeamCandidates",
            "properties": {
                "latestEvents": {
                    "description": "last 10 candidates sorted by event start date.",
                    "items": {
                        "$ref": "EventUniqueContentMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SportsTeamIngestionMetadata": {
            "id": "SportsTeamIngestionMetadata",
            "properties": {
                "leagueChannelIds": {
                    "description": "Leagues that our sports team belongs to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sportsEventsOriginalAiringTimeSecs": {
                    "description": "Past 28 and future 14 premier timestamps generated for:\n* Games of the team belonging to a head league.\nSorted by descending order.",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "StandingEntry": {
            "id": "StandingEntry",
            "properties": {
                "entity": {
                    "$ref": "EntityEntity",
                    "description": "The Entity corresponding to this entry."
                },
                "position": {
                    "description": "The position of the ranked entity.",
                    "format": "int32",
                    "type": "integer"
                },
                "stats": {
                    "description": "Set of statistics for this entry.",
                    "items": {
                        "$ref": "Stat"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Standings": {
            "description": "Standings Data.",
            "id": "Standings",
            "properties": {
                "standingsGroup": {
                    "$ref": "StandingsGroup"
                }
            },
            "type": "object"
        },
        "StandingsGroup": {
            "description": "A group of standing data.\n\ne.g for a league like NBA there will be\n NBA (top-level standing group)\n  + Eastern Conference (sub-standing group)\n    - standing table.\n  + Western Confernece (sub-standing group)\n    - standing table.",
            "id": "StandingsGroup",
            "properties": {
                "context": {
                    "$ref": "EntityEntity",
                    "description": "Context of this particular standings group."
                },
                "hierarchyLevel": {
                    "enum": [
                        "UNSPECIFIED",
                        "LEAGUE",
                        "CONFERENCE",
                        "DIVISION"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "standingsGroups": {
                    "description": "Either the group, or the standing entry would be present.",
                    "items": {
                        "$ref": "StandingsGroup"
                    },
                    "type": "array"
                },
                "standingsTable": {
                    "$ref": "StandingsTable"
                }
            },
            "type": "object"
        },
        "StandingsTable": {
            "description": "Simple Table containing bunch of stats rows.",
            "id": "StandingsTable",
            "properties": {
                "rows": {
                    "items": {
                        "$ref": "StandingEntry"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Stat": {
            "description": "A single stat entry.",
            "id": "Stat",
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "WINS",
                        "LOSSES",
                        "TIES",
                        "POINTS_FOR",
                        "POINTS_AGAINST",
                        "WIN_LOSS_PERCENTAGE",
                        "GAMES_BEHIND",
                        "LAST_10",
                        "GAMES_PLAYED",
                        "OVERTIME_LOSSES",
                        "POINTS",
                        "STREAK",
                        "WINS_LOSSES",
                        "CONFERENCE_WINS_LOSSES",
                        "BASKETBALL_MINUTES",
                        "BASKETBALL_REBOUNDS",
                        "BASKETBALL_ASSISTS",
                        "BASKETBALL_POINTS"
                    ],
                    "enumDescriptions": [
                        "",
                        "Win - Loss record stats. Agnostic of the sports type.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Compounds",
                        "",
                        "Basketball team-player stat types.",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "value": {
                    "$ref": "Value"
                }
            },
            "type": "object"
        },
        "Station": {
            "description": "Next tag: 11",
            "id": "Station",
            "properties": {
                "airings": {
                    "description": "'airings' field is not stored in Stations db table, but in\nstations.sstable.",
                    "items": {
                        "$ref": "YoutubeUnpluggedAiring"
                    },
                    "type": "array"
                },
                "availability": {
                    "$ref": "ContentAvailability"
                },
                "details": {
                    "$ref": "YoutubeUnpluggedStationDetails"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this station.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "Optional ID set for station."
                },
                "publishStatus": {
                    "$ref": "PublishingStatus"
                },
                "restricts": {
                    "$ref": "ContentRestricts"
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                }
            },
            "type": "object"
        },
        "StationAcquisitionStreamInfo": {
            "description": "information of station acquisition stream",
            "id": "StationAcquisitionStreamInfo",
            "properties": {
                "acquisitionStreamId": {
                    "description": "id of this acquisition stream",
                    "type": "string"
                },
                "ingestCopies": {
                    "description": "copies that ingests from this stream. empty if this stream is uningested.",
                    "items": {
                        "$ref": "IngestionCopyInfo"
                    },
                    "type": "array"
                },
                "streamInfo": {
                    "$ref": "AcquisitionStreamInfo",
                    "description": "Detailed info of this acquisition stream"
                }
            },
            "type": "object"
        },
        "StationDetails": {
            "description": "Details of tv ingest station entity.",
            "id": "StationDetails",
            "properties": {
                "alerts": {
                    "$ref": "AlertList",
                    "description": "All alert entries."
                },
                "assignee": {
                    "description": "Ldap of current assignee who is working on the station, empty if no\nassignee.",
                    "type": "string"
                },
                "broadcastId": {
                    "description": "The broadcast id of station, used for video playing.",
                    "type": "string"
                },
                "callSign": {
                    "description": "The callsign of station. e.g. ESPNHD",
                    "type": "string"
                },
                "incidentIds": {
                    "description": "Id of the incident related to this station, empty if no incident existed.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ingestConfigIds": {
                    "description": "Ids of all ingest stream config, in \"ICxxxxxx\" format.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "launchStatus": {
                    "description": "The launch state of station. e.g.STATION_LAUNCH_STATE_FISHFOOD.",
                    "type": "string"
                },
                "logoThumbnail": {
                    "$ref": "ThumbnailDetails",
                    "description": "The thumbnail of station logo."
                },
                "networkId": {
                    "description": "The ums id of the network that station belongs to.",
                    "type": "string"
                },
                "networkName": {
                    "description": "The title of network the station belongs to.",
                    "type": "string"
                },
                "schedule": {
                    "$ref": "YtvSchedule",
                    "description": "Schedule information of station."
                },
                "signOff": {
                    "description": "True if station is sign-off.",
                    "type": "boolean"
                },
                "status": {
                    "description": "Alert status of this station. e.g. \"STATUS_OK\"",
                    "enum": [
                        "STATUS_UNKNOWN",
                        "STATUS_OK",
                        "STATUS_NOTICE",
                        "STATUS_DEGRADED",
                        "STATUS_NONREDUNDANT",
                        "STATUS_OUTAGE"
                    ],
                    "enumDescriptions": [
                        "Unknown status.",
                        "Status is ok when entity has no alerts.",
                        "For station, status is notice when station has only notice level alerts, or\nalerts only happen in non-active stream copies.\nFor stream, status is notice when the stream has only notice level alerts.",
                        "For station, this means station has 'degraded' level alerts, or some active\nstream copies have alerts but at least 2 active copies are healthy.\nFor stream, this means stream has 'degraded' level alerts.",
                        "For station, this means station has 'non redundant' level alerts, or some\nactive stream copies have alerts and only 1 active copy is healthy.\nFor stream, this means stream has 'non redundant' level alert.",
                        "For station, this means station has 'outage' level alerts, or all active\nstream copies have alerts.\nFor stream, this mean stream has 'outage' level alert."
                    ],
                    "type": "string"
                },
                "streamCopies": {
                    "description": "Information of stream copies.",
                    "items": {
                        "$ref": "StationStreamCopyView"
                    },
                    "type": "array"
                },
                "viewers": {
                    "description": "The highest viewership in last 1 hour.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "StationFlags": {
            "id": "StationFlags",
            "properties": {
                "airingIngestion": {
                    "enum": [
                        "AIRING_INGESTION_UNKNOWN",
                        "AIRING_INGESTION_ENABLED",
                        "AIRING_INGESTION_DISABLED"
                    ],
                    "enumDescriptions": [
                        "Defaults to enabled",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "stationType": {
                    "enum": [
                        "STATION_TYPE_UNKNOWN",
                        "STATION_TYPE_RSN_SUBCHANNEL"
                    ],
                    "enumDescriptions": [
                        "",
                        "Indicates that this channel is really a subchannel RSN\nIt has a stable TMS id but may not always have airings, long-term it may\nget switched into another RSN channel based on external signals."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StationHasLiveAiring": {
            "description": "Station has a live airing.",
            "id": "StationHasLiveAiring",
            "properties": {
                "lookaheadWindow": {
                    "description": "Duration to lookahead for an upcoming live airing.",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StationHasUpcomingBlackout": {
            "description": "Station has an upcoming blackout.",
            "id": "StationHasUpcomingBlackout",
            "properties": {
                "allowedBlackoutType": {
                    "description": "Matches only if it has the specified blackout type",
                    "enum": [
                        "ALLOWED_BLACKOUT_TYPE_UNSPECIFIED",
                        "ALLOWED_BLACKOUT_TYPE_OTT",
                        "ALLOWED_BLACKOUT_TYPE_MOBILE",
                        "ALLOWED_BLACKOUT_TYPE_LOCATION",
                        "ALLOWED_BLACKOUT_TYPE_MLB",
                        "ALLOWED_BLACKOUT_TYPE_OVERRIDE",
                        "ALLOWED_BLACKOUT_TYPE_STATION_OUTAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified matches all blackouts.",
                        "OTT blackouts only.",
                        "Mobile blackouts only.",
                        "Location blackouts only.",
                        "MLB blackouts only.",
                        "Override blackouts only.",
                        "Station outage blackouts only"
                    ],
                    "type": "string"
                },
                "lookaheadWindow": {
                    "description": "Duration to lookahead for an upcoming blackout.",
                    "format": "google-duration",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StationIngestionMetadata": {
            "description": "Station channels only.",
            "id": "StationIngestionMetadata",
            "properties": {
                "broadcastVideoId": {
                    "description": "External video id for the live stream.",
                    "type": "string"
                },
                "schedule": {
                    "$ref": "UnpluggedStationSchedule",
                    "description": "Station airing schedule."
                }
            },
            "type": "object"
        },
        "StationScheduleStatus": {
            "description": "Status of station schedule",
            "id": "StationScheduleStatus",
            "properties": {
                "cnclScheduleStatus": {
                    "$ref": "ScheduleStatus",
                    "description": "status of canonical schedule"
                },
                "stationId": {
                    "description": "id of station",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StationStreamCopyView": {
            "description": "Proto that contains basic information of stream copies being used by\nstation.",
            "id": "StationStreamCopyView",
            "properties": {
                "copyId": {
                    "description": "Copy id of this stream within 4 stream copies. e.g. \"1\"",
                    "type": "string"
                },
                "pop": {
                    "description": "Pop name of stream. e.g. \"AUS202\"",
                    "type": "string"
                },
                "status": {
                    "description": "Alert status of this stream. e.g. \"STATUS_OK\"",
                    "enum": [
                        "STATUS_UNKNOWN",
                        "STATUS_OK",
                        "STATUS_NOTICE",
                        "STATUS_DEGRADED",
                        "STATUS_NONREDUNDANT",
                        "STATUS_OUTAGE"
                    ],
                    "enumDescriptions": [
                        "Unknown status.",
                        "Status is ok when entity has no alerts.",
                        "For station, status is notice when station has only notice level alerts, or\nalerts only happen in non-active stream copies.\nFor stream, status is notice when the stream has only notice level alerts.",
                        "For station, this means station has 'degraded' level alerts, or some active\nstream copies have alerts but at least 2 active copies are healthy.\nFor stream, this means stream has 'degraded' level alerts.",
                        "For station, this means station has 'non redundant' level alerts, or some\nactive stream copies have alerts and only 1 active copy is healthy.\nFor stream, this means stream has 'non redundant' level alert.",
                        "For station, this means station has 'outage' level alerts, or all active\nstream copies have alerts.\nFor stream, this mean stream has 'outage' level alert."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StationsWithError": {
            "description": "Stations with specific kind of error.",
            "id": "StationsWithError",
            "properties": {
                "error": {
                    "description": "error code of adjusting schedules in cora.",
                    "enum": [
                        "UNKNOWN",
                        "CHANGING_IN_PENDING",
                        "CMS_INTERNAL_ISSUE",
                        "INVALID_USER_INPUT",
                        "OLD_SCHEDULE_VERSION",
                        "BROKEN_SCHEDULE",
                        "BLACKOUT_SERVER_ISSUE"
                    ],
                    "enumDescriptions": [
                        "unknown error code",
                        "change of station is still in pending.",
                        "there are some problem in cms side.",
                        "the user input value is invalid.",
                        "the schedule version in user's client is old",
                        "the schedule user wants to edit is already broken",
                        "there is some problem in blackout server side"
                    ],
                    "type": "string"
                },
                "stationIds": {
                    "description": "id of stations with this kind of error.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "StatusProto": {
            "description": "Wire-format for a Status object",
            "id": "StatusProto",
            "properties": {
                "canonicalCode": {
                    "description": "The canonical error code (see codes.proto) that most closely\ncorresponds to this status. May be missing.",
                    "format": "int32",
                    "type": "integer"
                },
                "code": {
                    "description": "Numeric code drawn from the space specified below. Often, this is the\ncanonical error space, and code is drawn from google3/util/task/codes.proto",
                    "format": "int32",
                    "type": "integer"
                },
                "message": {
                    "description": "Detail message",
                    "type": "string"
                },
                "messageSet": {
                    "$ref": "MessageSet",
                    "description": "message_set associates an arbitrary proto message with the status."
                },
                "payload": {
                    "$ref": "TypedMessage",
                    "description": "DEPRECATED.\n\nThis field was deprecated in 2011 with cl/20297133.  Java support\nfor the field was moved to a proto1 backward compatibility class\nin April 2017 with cl/142615857 and cl/154123203.  There was\nnever support for this field in Go; if set Go will ignore it.\nC++ stopped setting StatusProto::payload in October 2015 with cl/106347055,\nand stopped reading the field in October 2017 with cl/173324114.\n\nIn general, newly written code should use only \"message_set\". If you need\nto maintain backward compatibility with code written before 3/25/2011, do\nthe following:\n\n- During the transition period, either (1) set both \"payload\" and\n  \"message_set\", or (2) write the consumer of StatusProto so that it can\n  forge a MessageSet object from \"payload\" if \"message_set\" is missing.\n  The C++ util::Status implementation does (2).\n\n- Once all the consumers are converted to accept \"message_set\", then\n  remove the use of \"payload\" on the producer side."
                },
                "space": {
                    "description": "The following are usually only present when code != 0\nSpace to which this status belongs",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StitchRequest": {
            "id": "StitchRequest",
            "properties": {
                "airingId": {
                    "type": "string"
                },
                "airingTime": {
                    "$ref": "TimeRange"
                },
                "allowLooserBlackoutOverride": {
                    "description": "Whether user recording can be updated by a looser blackout status.\nThis field should only be set from ops.",
                    "type": "boolean"
                },
                "disableAutoExtension": {
                    "description": "Whether the airing should be auto extended based on live schedule after the\ngiven airing end time.\nThis field should only be set from ops.",
                    "type": "boolean"
                },
                "externalVideoId": {
                    "type": "string"
                },
                "partialVideo": {
                    "description": "Whether the video is a partial one.",
                    "type": "boolean"
                },
                "stationId": {
                    "type": "string"
                },
                "stitchOnly": {
                    "description": "For transition from streaming to blocking.\nFalse - streaming; True - blocking.",
                    "type": "boolean"
                },
                "streamId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StreamDetails": {
            "description": "Details of tv ingest stream entity.",
            "id": "StreamDetails",
            "properties": {
                "copyId": {
                    "description": "Id of ingested copy if enabled, empty if not enabled.",
                    "type": "string"
                },
                "enabled": {
                    "description": "True if this stream is enabled.",
                    "type": "boolean"
                },
                "pop": {
                    "description": "Pop of this stream.",
                    "type": "string"
                },
                "resolution": {
                    "description": "Resolution of this stream. e.g. \"1080\"",
                    "type": "string"
                },
                "sourceType": {
                    "description": "Acquisition type of this stream. e.g. \"TYPE_FIBER\"",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StreamSwitchingDetails": {
            "description": "Stream switching details of station",
            "id": "StreamSwitchingDetails",
            "properties": {
                "currentSourceStationId": {
                    "description": "id of current source station",
                    "type": "string"
                },
                "errors": {
                    "description": "Type of errors happens in stream switching",
                    "enumDescriptions": [
                        "",
                        "SCTE 35 marker is not sent out from source station.",
                        "SCTE 224 schedule is not correct.",
                        "The content in source station is not correct."
                    ],
                    "items": {
                        "enum": [
                            "ERROR_TYPE_UNKNOWN",
                            "ERROR_TYPE_SCTE35_MARKER_NOT_SENT",
                            "ERROR_TYPE_SCTE224_SCHEDULE_INCORRECT",
                            "ERROR_TYPE_SOURCE_STATION_INCORRECT"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "overrideExpiresTime": {
                    "description": "Timestamp when the override expires.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "overrideSourceStationId": {
                    "description": "id of source station that manual override this station. Empty if no\noverride happens currently",
                    "type": "string"
                },
                "scheduledSourceStationId": {
                    "description": "id of source station that is supposed to be shown for the user station",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StudioInfo": {
            "id": "StudioInfo",
            "properties": {
                "studioPopCode": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SwitchStationsStreamSourceRequest": {
            "id": "SwitchStationsStreamSourceRequest",
            "properties": {
                "expiration": {
                    "description": "expiration date for override.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "overrideSourceStationId": {
                    "description": "if set, then all user stations will be force override by this station\nelse force airing matching will be triggered by sending faux scte35\nmarkers.",
                    "type": "string"
                },
                "userStationIds": {
                    "description": "ids of station that need to do source switch",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SwitchStationsStreamSourceResponse": {
            "id": "SwitchStationsStreamSourceResponse",
            "properties": {
                "failedStations": {
                    "items": {
                        "$ref": "FailedStationInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TagType": {
            "description": "Deprecated",
            "id": "TagType",
            "properties": {
                "mid": {
                    "description": "If KG entry available.",
                    "type": "string"
                },
                "name": {
                    "description": "KG type if available e.g., /film/film_genre; otherwise we will assign a\ntype using /upg/tag/ as prefix e.g., /upg/tag/bones_genre.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TargetingCriteria": {
            "description": "Targeting Criteria used to identity the airing belonging to |station_id|.",
            "id": "TargetingCriteria",
            "properties": {
                "canonicalScheduleVersionTimestamp": {
                    "description": "Version timestamp of canonical schedule which user makes adjustment.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "stationId": {
                    "description": "UMS StationId.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Team": {
            "description": "Next tag: 12",
            "id": "Team",
            "properties": {
                "discoveryMetadata": {
                    "$ref": "DiscoveryMetadata"
                },
                "displayInfo": {
                    "$ref": "DisplayInfo"
                },
                "entity": {
                    "$ref": "EntityEntity"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "entity ID that will be populated in addition to entity.id field",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet",
                    "description": "IdSet."
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "teamInfo": {
                    "$ref": "TeamInfo",
                    "description": "Team Info."
                },
                "teamRoster": {
                    "$ref": "TeamRoster",
                    "description": "Team Roster."
                }
            },
            "type": "object"
        },
        "TeamBoxScore": {
            "id": "TeamBoxScore",
            "properties": {
                "playerStats": {
                    "items": {
                        "$ref": "EntityStats"
                    },
                    "type": "array"
                },
                "teamStats": {
                    "items": {
                        "$ref": "Stat"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TeamDetails": {
            "description": "Next tag: 5",
            "id": "TeamDetails",
            "properties": {
                "fullTeamName": {
                    "description": "full name for this sports team",
                    "type": "string"
                },
                "image": {
                    "description": "Images for for this sports team. Order of the image infos is arbitrary.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "sportsTeamId": {
                    "description": "Bones sports team id",
                    "type": "string"
                },
                "teamEventLocation": {
                    "description": "Team location",
                    "enum": [
                        "SPORTS_TEAM_EVENT_LOCATION_UNKNOWN",
                        "SPORTS_TEAM_EVENT_LOCATION_HOME",
                        "SPORTS_TEAM_EVENT_LOCATION_AWAY",
                        "SPORTS_TEAM_EVENT_LOCATION_NEUTRAL"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TeamInfo": {
            "description": "Next Tag: 13",
            "id": "TeamInfo",
            "properties": {
                "arenaStadiums": {
                    "description": "Arena/Stadium.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "championshipYears": {
                    "description": "The championship years that this team won.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "description": {
                    "$ref": "TranslationPack",
                    "description": "Description of the team."
                },
                "division": {
                    "$ref": "TranslationPack",
                    "description": "Extra info that is league specific.\nDivision."
                },
                "headCoaches": {
                    "description": "Head Coach.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "leagues": {
                    "description": "The leagues and tournaments that this team plays in currently.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "location": {
                    "$ref": "EntityEntity",
                    "description": "Location of the team."
                },
                "mascot": {
                    "$ref": "EntityEntity",
                    "description": "Team Mascot."
                },
                "owners": {
                    "description": "Owner.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "primaryTeamColor": {
                    "description": "The primary color (RGB in hex string form) of the team\n(e.g. \"04529C\" for the Golden State warriors).",
                    "type": "string"
                },
                "socialProfiles": {
                    "description": "Social Profiles of the team.",
                    "items": {
                        "$ref": "SocialProfile"
                    },
                    "type": "array"
                },
                "standings": {
                    "$ref": "StandingsTable",
                    "description": "The teams standing for the current season from all leagues."
                }
            },
            "type": "object"
        },
        "TeamRoster": {
            "description": "TeamRoster.",
            "id": "TeamRoster",
            "properties": {
                "players": {
                    "items": {
                        "$ref": "Entry"
                    },
                    "type": "array"
                },
                "substitutes": {
                    "description": "This information is filled only, if available, in context of an event.",
                    "items": {
                        "$ref": "Entry"
                    },
                    "type": "array"
                },
                "type": {
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_GENERAL"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TensorProto": {
            "description": "Protocol buffer representing a tensor.",
            "id": "TensorProto",
            "properties": {
                "boolVal": {
                    "description": "DT_BOOL",
                    "items": {
                        "type": "boolean"
                    },
                    "type": "array"
                },
                "dcomplexVal": {
                    "description": "DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real\nand imaginary parts of i-th double precision complex.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "doubleVal": {
                    "description": "DT_DOUBLE.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "dtype": {
                    "enum": [
                        "DT_INVALID",
                        "DT_FLOAT",
                        "DT_DOUBLE",
                        "DT_INT32",
                        "DT_UINT8",
                        "DT_INT16",
                        "DT_INT8",
                        "DT_STRING",
                        "DT_COMPLEX64",
                        "DT_INT64",
                        "DT_BOOL",
                        "DT_QINT8",
                        "DT_QUINT8",
                        "DT_QINT32",
                        "DT_BFLOAT16",
                        "DT_QINT16",
                        "DT_QUINT16",
                        "DT_UINT16",
                        "DT_COMPLEX128",
                        "DT_HALF",
                        "DT_RESOURCE",
                        "DT_VARIANT",
                        "DT_UINT32",
                        "DT_UINT64",
                        "DT_FLOAT_REF",
                        "DT_DOUBLE_REF",
                        "DT_INT32_REF",
                        "DT_UINT8_REF",
                        "DT_INT16_REF",
                        "DT_INT8_REF",
                        "DT_STRING_REF",
                        "DT_COMPLEX64_REF",
                        "DT_INT64_REF",
                        "DT_BOOL_REF",
                        "DT_QINT8_REF",
                        "DT_QUINT8_REF",
                        "DT_QINT32_REF",
                        "DT_BFLOAT16_REF",
                        "DT_QINT16_REF",
                        "DT_QUINT16_REF",
                        "DT_UINT16_REF",
                        "DT_COMPLEX128_REF",
                        "DT_HALF_REF",
                        "DT_RESOURCE_REF",
                        "DT_VARIANT_REF",
                        "DT_UINT32_REF",
                        "DT_UINT64_REF"
                    ],
                    "enumDescriptions": [
                        "Not a legal value for DataType.  Used to indicate a DataType field\nhas not been set.",
                        "Data types that all computation devices are expected to be\ncapable to support.",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Single-precision complex",
                        "",
                        "",
                        "Quantized int8",
                        "Quantized uint8",
                        "Quantized int32",
                        "Float32 truncated to 16 bits.  Only for cast ops.",
                        "Quantized int16",
                        "Quantized uint16",
                        "",
                        "Double-precision complex",
                        "",
                        "",
                        "Arbitrary C++ data types",
                        "",
                        "",
                        "Do not use!  These are only for parameters.  Every enum above\nshould have a corresponding value below (verified by types_test).",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "floatVal": {
                    "description": "DT_FLOAT.",
                    "items": {
                        "format": "float",
                        "type": "number"
                    },
                    "type": "array"
                },
                "halfVal": {
                    "description": "DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll\nhave some pointless zero padding for each value here.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "int64Val": {
                    "description": "DT_INT64",
                    "items": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "array"
                },
                "intVal": {
                    "description": "DT_INT32, DT_INT16, DT_INT8, DT_UINT8.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "resourceHandleVal": {
                    "description": "DT_RESOURCE",
                    "items": {
                        "$ref": "ResourceHandleProto"
                    },
                    "type": "array"
                },
                "scomplexVal": {
                    "description": "DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real\nand imaginary parts of i-th single precision complex.",
                    "items": {
                        "format": "float",
                        "type": "number"
                    },
                    "type": "array"
                },
                "stringVal": {
                    "description": "DT_STRING",
                    "items": {
                        "format": "byte",
                        "type": "string"
                    },
                    "type": "array"
                },
                "tensorContent": {
                    "description": "Serialized raw tensor content from either Tensor::AsProtoTensorContent or\nmemcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation\ncan be used for all tensor types. The purpose of this representation is to\nreduce serialization overhead during RPC call by avoiding serialization of\nmany repeated small items.",
                    "format": "byte",
                    "type": "string"
                },
                "tensorShape": {
                    "$ref": "TensorShapeProto",
                    "description": "Shape of the tensor.  "
                },
                "uint32Val": {
                    "description": "DT_UINT32",
                    "items": {
                        "format": "uint32",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "uint64Val": {
                    "description": "DT_UINT64",
                    "items": {
                        "format": "uint64",
                        "type": "string"
                    },
                    "type": "array"
                },
                "variantVal": {
                    "description": "DT_VARIANT",
                    "items": {
                        "$ref": "VariantTensorDataProto"
                    },
                    "type": "array"
                },
                "versionNumber": {
                    "description": "Version number.\n\nIn version 0, if the \"repeated xxx\" representations contain only one\nelement, that element is repeated to fill the shape.  This makes it easy\nto represent a constant Tensor with a single value.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "TensorShapeProto": {
            "description": "Dimensions of a tensor.",
            "id": "TensorShapeProto",
            "properties": {
                "dim": {
                    "description": "Dimensions of the tensor, such as {\"input\", 30}, {\"output\", 40}\nfor a 30 x 40 2D tensor.  If an entry has size -1, this\ncorresponds to a dimension of unknown size. The names are\noptional.\n\nThe order of entries in \"dim\" matters: It indicates the layout of the\nvalues in the tensor in-memory representation.\n\nThe first entry in \"dim\" is the outermost dimension used to layout the\nvalues, the last entry is the innermost dimension.  This matches the\nin-memory layout of RowMajor Eigen tensors.\n\nIf \"dim.size()\" > 0, \"unknown_rank\" must be false.",
                    "items": {
                        "$ref": "Dim"
                    },
                    "type": "array"
                },
                "unknownRank": {
                    "description": "If true, the number of dimensions in the shape is unknown.\n\nIf true, \"dim.size()\" must be 0.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ThirdPartyTargetingData": {
            "description": "Ad targeting data ingested.\nNext tag: 6",
            "id": "ThirdPartyTargetingData",
            "properties": {
                "adNamespace": {
                    "description": "Ad platform of these parameters used in, Freewheel, XFP etc.",
                    "enum": [
                        "AD_NS_NONE",
                        "FREEWHEEL",
                        "XFP"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "extraParameters": {
                    "items": {
                        "$ref": "KeyValuePair"
                    },
                    "type": "array"
                },
                "googleSoldDistribution": {
                    "description": "How to distribute Google sold DAI in a VOD.",
                    "enum": [
                        "UNKNOWN",
                        "MIX",
                        "STANDALONE"
                    ],
                    "enumDescriptions": [
                        "",
                        "Google Sold DAI will mix with Partner sold for each ad pod.",
                        "Google Sold DAI will own a full pod, instead of sharing with Partner\nsold."
                    ],
                    "type": "string"
                },
                "googleSoldPercentage": {
                    "description": "The percentage of ad break duration in a VOD that should be Google sold.\nExpected values should be within (0,1).",
                    "format": "double",
                    "type": "number"
                },
                "unpluggedTargetingData": {
                    "$ref": "UnpluggedTargetingData"
                }
            },
            "type": "object"
        },
        "Thumbnail": {
            "description": "Information about a single thumbnail, with URL and height/width.",
            "id": "Thumbnail",
            "properties": {
                "height": {
                    "description": "Height of the thumbnail image.",
                    "format": "uint32",
                    "type": "integer"
                },
                "url": {
                    "description": "The thumbnail image's URL.",
                    "type": "string"
                },
                "width": {
                    "description": "Width of the thumbnail image.",
                    "format": "uint32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ThumbnailDetails": {
            "description": "Information about a thumbnail to show. Contains a sorted list of thumbnails\nin ascending order. Clients can pick the best one to use.\nNext id: 10",
            "id": "ThumbnailDetails",
            "properties": {
                "accessibility": {
                    "$ref": "AccessibilitySupportedDatas",
                    "description": "Accessibility label of the thumbnail.\ne.g. https://screenshot.googleplex.com/fJSN0mmL9Hg\nNote: older versions won't honor this field."
                },
                "enableLoadedLogging": {
                    "description": "Whether to send a logging event when the thumbnail is loaded.\nThis will only be filled for clients that support the unscoped\nTHUMBNAIL_LOADED_LOGGING capability.\nGEL payload:\nhttps://cs/#piper///depot/google3/logs/proto/youtube/innertube/event_logging_payloads/thumbnail_loaded.proto",
                    "type": "boolean"
                },
                "isReelsVideo": {
                    "description": "Whether or not the thumbnails are for story videos\nTODO(akbatra) remove this when go/thumbexp is expanded to go beyond stories\nIt is only used for thumbnail_util to tell that request was for a\nreels video and can have thumbnail experiments. It is not used by client.",
                    "type": "boolean"
                },
                "logAsMovingThumbnail": {
                    "description": "Whether to log the thumbnail as a moving thumbnail. Informative only and\nnot available on clients before enable_loaded_logging was added.",
                    "type": "boolean"
                },
                "lowResJpeg": {
                    "format": "byte",
                    "type": "string"
                },
                "lowResThumbnail": {
                    "$ref": "LowResThumbnail"
                },
                "placeholderColor": {
                    "description": "Placeholder color for the thumbnails, which can be used before the images\nare downloaded by the client. This field may be absent. Packed ARGB\n8-bits per channel, gamma-corrected sRGB, non-premultiplied alpha.",
                    "format": "uint32",
                    "type": "integer"
                },
                "thumbnails": {
                    "description": "Sorted in ascending order by area. You should pick the closest fit to what\nyou are trying to display. For reference, the desktop implementation see\nfor_thumbnail_details here:\nhttp://cs/#piper///depot/google3/video/youtube/src/python/logic/thumbnails/thumbnail_url_factory.py\nor GetUrlFromThumbnailDetails here:\nhttps://cs.corp.google.com/piper///depot/google3/video/thumbnails/urls/thumbnail_util.cc",
                    "items": {
                        "$ref": "Thumbnail"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TimeRange": {
            "description": "Describes a range of time. This range is a closed-open interval [start, end).",
            "id": "TimeRange",
            "properties": {
                "end": {
                    "description": "End time (exclusive).",
                    "format": "google-datetime",
                    "type": "string"
                },
                "start": {
                    "description": "Start time (inclusive).",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TimeSpan": {
            "description": "Used to represent timespan of an event.",
            "id": "TimeSpan",
            "properties": {
                "endTimeSecs": {
                    "format": "int64",
                    "type": "string"
                },
                "isTimeTbd": {
                    "type": "boolean"
                },
                "startTimeSecs": {
                    "description": "Start & end time in seconds (since epoch)\nIf is_time_tbd is true the start time is not set to the actual start time,\ninstead it is set to the start date using 12:00 UTC as the time.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TmsId": {
            "id": "TmsId",
            "properties": {
                "tmsNetworkId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TmsIdSet": {
            "description": "Next id: 14",
            "id": "TmsIdSet",
            "properties": {
                "generatedTmsAiringId": {
                    "type": "string"
                },
                "tmsId": {
                    "description": "This is the tms_program_id.",
                    "type": "string"
                },
                "tmsImageId": {
                    "description": "This refers to the image URI and is populated during CMS image ingestion.",
                    "type": "string"
                },
                "tmsNetworkIds": {
                    "description": "An unplugged network could map to multiple TMS networks,\nsee: go/upg-tms-networks.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tmsOrganizationId": {
                    "type": "string"
                },
                "tmsPersonId": {
                    "type": "string"
                },
                "tmsRootId": {
                    "type": "string"
                },
                "tmsSeriesId": {
                    "type": "string"
                },
                "tmsSportId": {
                    "description": "Note: TMS calls this 'sports_id'",
                    "type": "string"
                },
                "tmsStationId": {
                    "type": "string"
                },
                "tmsTeamBrandId": {
                    "description": "TODO(b/131091104) remove after all code is using repeated version",
                    "type": "string"
                },
                "tmsTeamBrandIds": {
                    "description": "An unplugged team could map to multiple TMS team brand ids,\nsee: go/ytv-tms-team-id-design.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TranslatedMessage": {
            "description": "This proto represents a localized text message.",
            "id": "TranslatedMessage",
            "properties": {
                "createTime": {
                    "description": "Time of translation creation.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "locale": {
                    "description": "The language of this message.\nDepending on usage, may be a content language (go/yt-content-languages),\nor either kind of identifier for a site language (go/yt-live-languages).\nUsers should document which kind of language is used in their specific\napplication.",
                    "type": "string"
                },
                "message": {
                    "description": "The localized content of this message.",
                    "type": "string"
                },
                "source": {
                    "description": "Source of the translation, if known.",
                    "enum": [
                        "SOURCE_UNSPECIFIED",
                        "CREATOR",
                        "CROWD",
                        "MARKETPLACE",
                        "MACHINE",
                        "YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "Unspecified translation source.",
                        "Creator-provided translation.",
                        "Crowd-sourced translation.",
                        "Translation sourced from the marketplace.",
                        "Machine-generated translation.",
                        "Translation created by the Youtube team."
                    ],
                    "type": "string"
                },
                "updateTime": {
                    "description": "Time of last update.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TranslationPack": {
            "description": "This proto represents a pack of localized messages.",
            "id": "TranslationPack",
            "properties": {
                "messages": {
                    "description": "List of all translated messages.",
                    "items": {
                        "$ref": "TranslatedMessage"
                    },
                    "type": "array"
                },
                "original": {
                    "description": "The default text content of this pack.\nThis is used when no locale is found.\nUsers should document the semantics of the `original` field and of a\nmissing `original` field for their specific application.",
                    "type": "string"
                },
                "originalLanguage": {
                    "description": "The language of the original message. If present, the original string\ntakes precedence over a matching (locale, message) pair in the messages\nlist.\nThe kind of language (content or site) used and the identifier (HL or\ndiscouraged language ID for site languages) should be documented by the\nuser for their specific application.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TypedMessage": {
            "description": "Message that groups a protocol type_id (as defined by MessageSet),\nwith an encoded message of that type.  Its use is similar to\nMessageSet, except it represents a single (type, encoded message)\ninstead of a set.\n\nTo fill for known protocol type:\n  MyProtocolMsg proto;\n  TypedMessage typed_msg;\n  typed_msg.set_type_id(MyProtocolMsg::MESSAGE_TYPE_ID);\n  proto.AppendToCord(typed_msg.mutable_message());\n\nTo fill for unknown protocol type:\n  ProtocolMessage proto;\n  TypedMessage typed_msg;\n  typed_msg.set_type_id(proto.GetMapper()->type_id());\n  proto.AppendToCord(typed_msg.mutable_message());",
            "id": "TypedMessage",
            "properties": {
                "message": {
                    "description": "Message bytes.",
                    "format": "byte",
                    "type": "string"
                },
                "typeId": {
                    "description": "Identifier for the type.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "UniqueContentCandidatesMetadata": {
            "description": "For show, league and team channel.\nWill be used to compute unique content signal\nneeded for uniuqe content selection.",
            "id": "UniqueContentCandidatesMetadata",
            "properties": {
                "episodes": {
                    "description": "a full list of episodes sorted by display_time_seconds or\nunplugged_season_index + unplugged_episode_index",
                    "items": {
                        "$ref": "EpisodeUniqueContentMetadata"
                    },
                    "type": "array"
                },
                "events": {
                    "description": "a full list of events for league or team sorted by event start time.",
                    "items": {
                        "$ref": "EventUniqueContentMetadata"
                    },
                    "type": "array"
                },
                "lookBackWindowSeconds": {
                    "description": "For shows we cannot easily precompute candidates\nlike some shows with placeholder programs.\nIndicates that we can only serve this channel online using latest videos\nin this window. USL can use this time window to look for DVRs.\nWe don't need to consider VODs or use display_time_seconds for this case.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UniqueContentCandidatesSignals": {
            "description": "For show, team and league.\nThe proto is used for serving.\nThere is no guarantee that any field can be precomputed and available here.\nWe should have a fall back path to use time range query to serve onlnie.\nFor example using UniqueContentCandidatesSignals.look_back_window_seconds.",
            "id": "UniqueContentCandidatesSignals",
            "properties": {
                "leagueCandidates": {
                    "$ref": "SportsLeagueCandidates"
                },
                "lookBackWindowSeconds": {
                    "description": "For shows we cannot easily precompute candidates\nlike some shows with placeholder programs.\nIndicates that we can only serve this channel online using latest videos\nin this window. USL can use this time window to look for DVRs.\nWe don't need to consider VODs or use display_time_seconds for this case.",
                    "format": "int64",
                    "type": "string"
                },
                "showCandidates": {
                    "$ref": "ShowCandidates"
                },
                "teamCandidates": {
                    "$ref": "SportsTeamCandidates"
                }
            },
            "type": "object"
        },
        "UniqueEpisodeSignals": {
            "description": "Only for a unique episode row on UST.\nThe message is used for serving. It includes relevant unique episodes of\nthe unique episode row.\nThere is no guarantee that any field can be precomputed and available here.\nWe should have a fall back path to use time range query to serve onlnie.\nFor example using UniqueContentCandidatesSignals.look_back_window_seconds.",
            "id": "UniqueEpisodeSignals",
            "properties": {
                "neighborUniqueContentCandidates": {
                    "description": "For non-season based shows, 15 episodes before the episode\nand 15 episodes after the episodes, also including current unique episode.\nsorted based on display_time_seconds.",
                    "items": {
                        "$ref": "EpisodeUniqueContentMetadata"
                    },
                    "type": "array"
                },
                "nextUniqueContentCandidates": {
                    "description": "next 10 episodes if available.\nsorted based on display_time_seconds or\nunplugged_season_index + unplugged_episode_index.",
                    "items": {
                        "$ref": "EpisodeUniqueContentMetadata"
                    },
                    "type": "array"
                },
                "sameSeasonUniqueContentCandidates": {
                    "description": "For season-based shows, all episodes from the same season.\nsorted based on unplugged_season_index + unplugged_episode_index.\nincluding current unique episode.",
                    "items": {
                        "$ref": "EpisodeUniqueContentMetadata"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnpluggedBroadcastStream": {
            "description": "A wrapper that represents an instance of a broadcast stream for a station.",
            "id": "UnpluggedBroadcastStream",
            "properties": {
                "broadcastVideoId": {
                    "description": "Encrypted video id for this broadcast.",
                    "type": "string"
                },
                "streamEndTimeUtcMillis": {
                    "description": "The time at which the stream was disabled, in UTC milliseconds.",
                    "format": "int64",
                    "type": "string"
                },
                "streamStartTimeUtcMillis": {
                    "description": "The time at which the stream was enabled, in UTC milliseconds.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedCustomPlayerMetadata": {
            "description": "Metadata for the player that deviates from the default. This will be used to\ncustomize a player page (initially only for TV client) for tentpole events.\n\nNext ID: 8",
            "id": "UnpluggedCustomPlayerMetadata",
            "properties": {
                "logoImage": {
                    "$ref": "Image",
                    "description": "ID of the event logo image."
                },
                "networkBugBackgroundColor": {
                    "$ref": "Color",
                    "description": "Background color of the network bug - http://screen/CLczBwO2va7"
                },
                "networkLogo": {
                    "$ref": "Image"
                },
                "scrubberBackImage": {
                    "$ref": "Image"
                },
                "scrubberForwardImage": {
                    "$ref": "Image",
                    "description": "Image IDs of various scrubber states."
                },
                "scrubberLiveImage": {
                    "$ref": "Image"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Secondary title for the event."
                }
            },
            "type": "object"
        },
        "UnpluggedDocumentInfo": {
            "id": "UnpluggedDocumentInfo",
            "properties": {
                "deleted": {
                    "type": "boolean"
                },
                "documentId": {
                    "type": "string"
                },
                "indexRequestFingerprint": {
                    "format": "uint64",
                    "type": "string"
                },
                "initialIndexTimestampUs": {
                    "format": "int64",
                    "type": "string"
                },
                "lastIndexTimestampUs": {
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedDvrDocumentInfo": {
            "id": "UnpluggedDvrDocumentInfo",
            "properties": {
                "shards": {
                    "description": "number of shards we currrently used.",
                    "format": "uint64",
                    "type": "string"
                },
                "usersWithAccess": {
                    "description": "number of users with access to the past airing (full or partial).",
                    "format": "uint64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedEmbedding": {
            "description": "Message name which does not conflict with UST ChannelSignals message type.",
            "id": "UnpluggedEmbedding",
            "properties": {
                "doubleVal": {
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnpluggedEpisodeIdSet": {
            "description": "Next tag: 3",
            "id": "UnpluggedEpisodeIdSet",
            "properties": {
                "mid": {
                    "description": "The Knowledge graph id, for the entity corresponding to the episode.",
                    "type": "string"
                },
                "tmsRootId": {
                    "description": "The TMS root id of this episode.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedEpisodeMetadata": {
            "description": "Next tag: 13",
            "id": "UnpluggedEpisodeMetadata",
            "properties": {
                "descriptionTranslation": {
                    "$ref": "TranslationPack",
                    "description": "Description of the episode."
                },
                "displayEpisodeNumber": {
                    "description": "Episode number to display to users. Could be \"1\", \"5B\", \"July 1\", \"3\",\n\"E1-E2\" (for multipart episodes).",
                    "type": "string"
                },
                "displaySeasonNumber": {
                    "description": "Season number to display to users. Could be \"1\", \"5B\", \"1999\".",
                    "type": "string"
                },
                "episodeImage": {
                    "description": "The per episode image used for thumbnail.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "episodeRating": {
                    "description": "The rating used in unplugged.",
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idSet": {
                    "$ref": "UnpluggedEpisodeIdSet",
                    "description": "Various optional set of alternate ids for this episode."
                },
                "images": {
                    "description": "Set of images for the episode.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "titleTranslation": {
                    "$ref": "TranslationPack",
                    "description": "Title of the episode."
                },
                "unpluggedEpisodeIndex": {
                    "description": "Our internal index of the episode in the season.",
                    "format": "int32",
                    "type": "integer"
                },
                "unpluggedSeasonIndex": {
                    "description": "Our internal index of the season in the show, used for season ordering.\nThe bigger the number, the latest the season.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "UnpluggedEventIdSet": {
            "description": "Next tag: 3",
            "id": "UnpluggedEventIdSet",
            "properties": {
                "mid": {
                    "description": "The Knowledge graph id, for the entity corresponding to the event.",
                    "type": "string"
                },
                "tmsRootId": {
                    "description": "The TMS root id of this event.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedEventMetadata": {
            "description": "Next tag: 16",
            "id": "UnpluggedEventMetadata",
            "properties": {
                "customPlayerMetadata": {
                    "$ref": "UnpluggedCustomPlayerMetadata",
                    "description": "Metadata to customize the player. Used for tentpole easter egg special\ntreatment."
                },
                "endTimeSecs": {
                    "description": "End time of basic event occurred, not aired.",
                    "format": "int64",
                    "type": "string"
                },
                "eventRating": {
                    "description": "The rating used in unplugged.",
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "forceEmptyPrimaryNetwork": {
                    "description": "If this is true, no network should be added on details page of this event.",
                    "type": "boolean"
                },
                "genres": {
                    "description": "Various genres for the event.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "idSet": {
                    "$ref": "UnpluggedEventIdSet",
                    "description": "Optional alternative ids for the event."
                },
                "images": {
                    "description": "Set of images for the event.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultContent": {
                    "description": "Is the event rated as having adult content. (see go/upg-content-safety)",
                    "type": "boolean"
                },
                "isCrosswalk": {
                    "description": "If this is true, this event is a Crosswalk(go/xwalk-tv) event.",
                    "type": "boolean"
                },
                "networkMetadata": {
                    "description": "List of TV networks this event airs on.",
                    "items": {
                        "$ref": "UnpluggedNetworkMetadata"
                    },
                    "type": "array"
                },
                "networkNames": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "recommendedAudience": {
                    "description": "The audience that this event is recommended for.",
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "sportsEventMetadata": {
                    "$ref": "UnpluggedSportsEventMetadata",
                    "description": "Information about the sports event."
                },
                "startTimeSecs": {
                    "description": "Start time of basic event occurred, not aired.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedGenreIdSet": {
            "description": "Next tag: 2",
            "id": "UnpluggedGenreIdSet",
            "properties": {
                "mid": {
                    "description": "List of knowledge graph ids, for the corresponding Genre.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnpluggedGenreMetadata": {
            "description": "Next tag: 5",
            "id": "UnpluggedGenreMetadata",
            "properties": {
                "genreId": {
                    "description": "The genre mapped to this channel.",
                    "format": "int64",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "UnpluggedGenreIdSet"
                },
                "images": {
                    "description": "Set of images for the genre.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "secondaryGenrePageTitle": {
                    "description": "Optionally used as page title if available. E.g., genre title can be\n'Action' but page title can be 'Action Shows'. If this is not filled then\ngenre title should be used as genre page title.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedId": {
            "description": "Encapsulates Id for an unplugged entity.\nNext tag: 4",
            "id": "UnpluggedId",
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "SHOW",
                        "PROGRAM",
                        "AIRING",
                        "STATION",
                        "NETWORK",
                        "SEASON",
                        "PERSON",
                        "SPORTS_TEAM",
                        "MOVIE",
                        "EVENT",
                        "EPISODE",
                        "SPORTS_LEAGUE",
                        "SPORTS_EVENT",
                        "MICROGENRE",
                        "SCHEDULE",
                        "POP",
                        "MARKET",
                        "PACKAGE",
                        "INGESTION_STREAM",
                        "BROADCAST_STREAM",
                        "ACQUISITION_STREAM",
                        "SPORTS_ATHLETE",
                        "LEMONAID_METRIC"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Broadcast id, e.g., ogfYd705cRs.",
                        "<Multicast IP:Port:Program Number> of an acquistion stream.",
                        "",
                        "A lemonaid metrics is of the form <stream id>/<metric>/<cell>:<task id>\nExample: yt-tv:1234/agent/health/cb:1"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedIdSet": {
            "description": "Next tag: 14",
            "id": "UnpluggedIdSet",
            "properties": {
                "airingId": {
                    "type": "string"
                },
                "athleteId": {
                    "type": "string"
                },
                "episodeId": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "leagueId": {
                    "type": "string"
                },
                "movieId": {
                    "type": "string"
                },
                "networkId": {
                    "type": "string"
                },
                "personId": {
                    "type": "string"
                },
                "programId": {
                    "type": "string"
                },
                "showId": {
                    "type": "string"
                },
                "sportsEventId": {
                    "type": "string"
                },
                "stationId": {
                    "type": "string"
                },
                "teamId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedIdWrapper": {
            "description": "Unplugged spanner internal IDs that correspond to an entity (video or\nchannel). ID is assigned at ingestion time.",
            "id": "UnpluggedIdWrapper",
            "properties": {
                "unpluggedId": {
                    "$ref": "UnpluggedId",
                    "description": "The entity's Unplugged internal spanner id."
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "Published YT external id for the entity."
                }
            },
            "type": "object"
        },
        "UnpluggedIndexArtifacts": {
            "id": "UnpluggedIndexArtifacts",
            "properties": {
                "deleteIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "indexRequests": {
                    "items": {
                        "$ref": "IndexRequest"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnpluggedIndexMetadata": {
            "description": "Next id: 7",
            "id": "UnpluggedIndexMetadata",
            "properties": {
                "documentFingerprints": {
                    "additionalProperties": {
                        "format": "uint64",
                        "type": "string"
                    },
                    "type": "object"
                },
                "documentId": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "isDeleted": {
                    "type": "boolean"
                },
                "lastIndexTimestampsUs": {
                    "additionalProperties": {
                        "format": "int64",
                        "type": "string"
                    },
                    "type": "object"
                },
                "unpluggedDocumentInfo": {
                    "items": {
                        "$ref": "UnpluggedDocumentInfo"
                    },
                    "type": "array"
                },
                "unpluggedDvrDocumentInfo": {
                    "additionalProperties": {
                        "$ref": "UnpluggedDvrDocumentInfo"
                    },
                    "description": "key is dvr document_id, i.e. youtube_external_id.\nWe don't remove key when document get deleted.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "UnpluggedLeagueDetails": {
            "description": "Next tag: 11\nLeague information used by serving systems.",
            "id": "UnpluggedLeagueDetails",
            "properties": {
                "allowFollowLeague": {
                    "description": "When true, user is allowed to follow this league's channel.\nIf true, the league will show up in the recording options list of this\nleague entity.",
                    "type": "boolean"
                },
                "childLeagueIds": {
                    "description": "UMS IDs of leagues or flexible grouping that are children of this league.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "displayTeamsInRecordingMenu": {
                    "description": "When true, teams will be displayed in DVR recording menu. Otherwise, teams\nwill be hidden, e.g. For March Madness we don't want to display teams in\nthe FSG recording menu.",
                    "type": "boolean"
                },
                "eventNounPlural": {
                    "$ref": "TranslationPack",
                    "description": "Noun to use to describe multiple events. E.g. \"events\", \"games\", \"matches\".\nIf not populated, will default to \"events\"."
                },
                "eventNounSingular": {
                    "$ref": "TranslationPack",
                    "description": "Noun to use to describe a single event. E.g. \"event\", \"game\", \"match\".\nIf not populated, will default to \"event\"."
                },
                "id": {
                    "description": "The UMS ID for the entity.",
                    "type": "string"
                },
                "images": {
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "name": {
                    "$ref": "TranslationPack"
                },
                "teamIds": {
                    "description": "UMS IDs of teams that will be shown in the recording options list of this\nleague entity, they should be followable.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "External channel ID of the league."
                }
            },
            "type": "object"
        },
        "UnpluggedMetadata": {
            "description": "Next Index: 11",
            "id": "UnpluggedMetadata",
            "properties": {
                "eventMetadata": {
                    "$ref": "UnpluggedEventMetadata"
                },
                "genreMetadata": {
                    "$ref": "UnpluggedGenreMetadata"
                },
                "leagueMetadata": {
                    "$ref": "UnpluggedSportsLeagueMetadata"
                },
                "microgenreMetadata": {
                    "$ref": "UnpluggedMicrogenreMetadata"
                },
                "movieMetadata": {
                    "$ref": "UnpluggedMovieMetadata"
                },
                "networkPortalMetadata": {
                    "$ref": "UnpluggedNetworkPortalMetadata",
                    "description": "Adding a new field?  See go/upg-channel-metadata."
                },
                "personMetadata": {
                    "$ref": "UnpluggedPersonMetadata"
                },
                "showMetadata": {
                    "$ref": "UnpluggedShowMetadata"
                },
                "stationMetadata": {
                    "$ref": "UnpluggedStationMetadata"
                },
                "teamMetadata": {
                    "$ref": "UnpluggedSportsTeamMetadata"
                }
            },
            "type": "object"
        },
        "UnpluggedMicrogenreMetadata": {
            "description": "Next tag: 2",
            "id": "UnpluggedMicrogenreMetadata",
            "properties": {
                "microgenreId": {
                    "description": "The microgenre mapped to this channel.\nAdding a new field?  See go/upg-channel-metadata.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedMovieIdSet": {
            "description": "Next tag: 4",
            "id": "UnpluggedMovieIdSet",
            "properties": {
                "mid": {
                    "description": "The Knowledge graph id, for the entity corresponding to the movie.",
                    "type": "string"
                },
                "tmsRootId": {
                    "description": "The TMS root id of this movie.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedMovieMetadata": {
            "description": "Next tag: 26",
            "id": "UnpluggedMovieMetadata",
            "properties": {
                "castMembers": {
                    "description": "Cast and Crew.\n\nThe lists are kept separate for now due to the fact that ordering is\nmeaningful within each list (i.e more prominent actors first).",
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "contentRestricts": {
                    "$ref": "ContentRestricts",
                    "description": "Content restrictions. Used for displaying restricts on this particular\nchannel."
                },
                "corpus": {
                    "description": "Corpus here aligns with the source of content.",
                    "enum": [
                        "CORPUS_UNKNOWN",
                        "CORPUS_SVOD",
                        "CORPUS_TVOD",
                        "CORPUS_TV",
                        "CORPUS_YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Represents transactional content.",
                        "Represents live tv.",
                        "Represents youtube creator content."
                    ],
                    "type": "string"
                },
                "crewMembers": {
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "forceEmptyPrimaryNetwork": {
                    "description": "If this is true, no network should be added on details page of this movie.",
                    "type": "boolean"
                },
                "genres": {
                    "description": "Various genres for the movie.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "idSet": {
                    "$ref": "UnpluggedMovieIdSet",
                    "description": "Various optional set of alternate ids for this movie."
                },
                "images": {
                    "description": "Set of images for the movie.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultContent": {
                    "description": "Is the movie rated as having adult content. (see go/upg-content-safety)",
                    "type": "boolean"
                },
                "isCrosswalk": {
                    "description": "If this is true, the movie is a Crosswalk(go/xwalk-tv) movie.",
                    "type": "boolean"
                },
                "language": {
                    "description": "The language code of this movie. Examples: \"en\", \"es\", \"fr\".\nUses the ISO 639 standard.",
                    "type": "string"
                },
                "microgenreNames": {
                    "description": "Names of associated microgenres.",
                    "items": {
                        "$ref": "TranslationPack"
                    },
                    "type": "array"
                },
                "movieRating": {
                    "description": "The rating used in unplugged",
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "networkMetadata": {
                    "description": "List of TV networks the movie airs on.",
                    "items": {
                        "$ref": "UnpluggedNetworkMetadata"
                    },
                    "type": "array"
                },
                "officialUrls": {
                    "description": "Official program web pages, eg. http://thedarkknight.warnerbros.com/",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "productionCompanyName": {
                    "description": "Production companies for the movie.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "recommendedAudience": {
                    "description": "The audience that this movie is recommended for.",
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "release": {
                    "description": "Earliest release info for this movie.",
                    "items": {
                        "$ref": "ReleaseInfo"
                    },
                    "type": "array"
                },
                "releaseDate": {
                    "description": "The release date of the movie in yyyy-mm-dd format.",
                    "type": "string"
                },
                "releaseYear": {
                    "description": "The year of the movie release. e.g. 2015.",
                    "type": "string"
                },
                "tomatometer": {
                    "description": "e.g, tomatometer 0.8 means 80% of reviews are positive.\nSee also http://screen/pAMrcmhgXoN.png.",
                    "format": "float",
                    "type": "number"
                },
                "youtubeSource": {
                    "$ref": "UnpluggedYoutubeSource",
                    "description": "For YT originals indicates the channel that owns this content."
                }
            },
            "type": "object"
        },
        "UnpluggedNetworkIdSet": {
            "description": "Next tag: 2",
            "id": "UnpluggedNetworkIdSet",
            "properties": {
                "mid": {
                    "description": "The Knowledge graph id for the entity corresponding to the network.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedNetworkMetadata": {
            "description": "Next Tag: 7",
            "id": "UnpluggedNetworkMetadata",
            "properties": {
                "images": {
                    "description": "Set of images for this network.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "networkChannelId": {
                    "description": "Channel id for this network.",
                    "type": "string"
                },
                "networkType": {
                    "description": "The type of network (affiliate, non-affiliate).",
                    "enum": [
                        "NETWORK_TYPE_UNKNOWN",
                        "NETWORK_TYPE_STANDARD",
                        "NETWORK_TYPE_AFFILIATE",
                        "NETWORK_TYPE_VOD_ONLY"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "title": {
                    "$ref": "TranslationPack",
                    "description": "Title of the network."
                },
                "titleColor": {
                    "$ref": "Color",
                    "description": "A color that matches the network's logo."
                },
                "type": {
                    "description": "The relationship this network has with the parent entity.",
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_PRIMARY_NETWORK",
                        "TYPE_NON_PRIMARY_NETWORK"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedNetworkPortalMetadata": {
            "description": "Next tag: 5",
            "id": "UnpluggedNetworkPortalMetadata",
            "properties": {
                "idSet": {
                    "$ref": "UnpluggedNetworkIdSet",
                    "description": "Various optional alternate ids for this network."
                },
                "networkMetadata": {
                    "$ref": "UnpluggedNetworkMetadata"
                },
                "networkPromos": {
                    "items": {
                        "$ref": "UnpluggedPromo"
                    },
                    "type": "array"
                },
                "stations": {
                    "description": "We get stations from package service content nodes,\nstations field should not be used.",
                    "items": {
                        "$ref": "UnpluggedStationInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnpluggedNetworkRevenueContentOwner": {
            "description": "Next tag: 2",
            "id": "UnpluggedNetworkRevenueContentOwner",
            "properties": {
                "externalRevenueContentOwnerId": {
                    "description": "Commerce identifies each content owner with an id such that we can route\nthe correct revenue to each content owner. See go/ytv-sox for more info.\nFor example: 'F1kPh-mQ8Ci4BQOuq6u6sQ' is the content owner id for ABC.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedPersonIdSet": {
            "id": "UnpluggedPersonIdSet",
            "properties": {
                "mid": {
                    "description": "Knowledge graph id.",
                    "type": "string"
                },
                "tmsId": {
                    "description": "TMS id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedPersonMetadata": {
            "description": "Next Tag: 12",
            "id": "UnpluggedPersonMetadata",
            "properties": {
                "athlete": {
                    "$ref": "Athlete",
                    "description": "Optional Athlete if this person is one.\nDeprecated. Use athlete_metadata.athlete instead."
                },
                "athleteMetadata": {
                    "$ref": "UnpluggedSportsAthleteMetadata",
                    "description": "Optional sports metadata if this person is an Athlete."
                },
                "dateOfBirth": {
                    "$ref": "Date"
                },
                "dateOfDeath": {
                    "$ref": "Date"
                },
                "gender": {
                    "enum": [
                        "GENDER_UNKNOWN",
                        "GENDER_MALE",
                        "GENDER_FEMALE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "idSet": {
                    "$ref": "UnpluggedPersonIdSet"
                },
                "images": {
                    "description": "Set of images for the person.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "roles": {
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "ROLE_UNKNOWN",
                            "ROLE_ACTION_CHOREOGRAPHER",
                            "ROLE_ACTOR",
                            "ROLE_ANCHOR",
                            "ROLE_ANIMATION_DIRECTOR",
                            "ROLE_ART_DIRECTOR",
                            "ROLE_ASSISTANT_DIRECTOR",
                            "ROLE_ASSOCIATE_PRODUCER",
                            "ROLE_CASTING",
                            "ROLE_CHOREOGRAPHER",
                            "ROLE_CINEMATOGRAPHER",
                            "ROLE_CO_EXECUTIVE_PRODUCER",
                            "ROLE_CO_PRODUCER",
                            "ROLE_COMPOSER",
                            "ROLE_CONSULTING_PRODUCER",
                            "ROLE_CONTESTANT",
                            "ROLE_CORRESPONDENT",
                            "ROLE_COSTUME_DESIGNER",
                            "ROLE_DIRECTOR",
                            "ROLE_DIRECTOR_PHOTOGRAPHY",
                            "ROLE_EDITING",
                            "ROLE_EXECUTIVE_PRODUCER",
                            "ROLE_FILM_EDITOR",
                            "ROLE_GUEST",
                            "ROLE_GUEST_STAR",
                            "ROLE_HAIR",
                            "ROLE_HOST",
                            "ROLE_JUDGE",
                            "ROLE_LYRICS",
                            "ROLE_MAKEUP",
                            "ROLE_MUSIC",
                            "ROLE_MUSIC_EDITOR",
                            "ROLE_MUSIC_SUPERVISOR",
                            "ROLE_MUSICAL_GUEST",
                            "ROLE_NARRATOR",
                            "ROLE_NON_ORIGINAL_MUSIC",
                            "ROLE_ORIGINAL_MUSIC",
                            "ROLE_PRODUCER",
                            "ROLE_PRODUCTION_DESIGN",
                            "ROLE_PRODUCTION_MANAGER",
                            "ROLE_PRODUCTION_SUPERVISOR",
                            "ROLE_SCREENWRITER",
                            "ROLE_SET_DESIGNER",
                            "ROLE_SOUND",
                            "ROLE_SPECIAL_EFFECTS",
                            "ROLE_STORYBOARD_ARTIST",
                            "ROLE_SUPERVISING_PRODUCER",
                            "ROLE_VOICE",
                            "ROLE_WRITER",
                            "ROLE_WRITER_ADAPTATION",
                            "ROLE_WRITER_BOOK",
                            "ROLE_WRITER_CHARACTERS",
                            "ROLE_WRITER_DIALOGUE",
                            "ROLE_WRITER_ORIGINAL_SCREENPLAY",
                            "ROLE_WRITER_PLAY",
                            "ROLE_WRITER_NOVEL",
                            "ROLE_WRITER_SCREENPLAY",
                            "ROLE_WRITER_SCREENPLAY_AND_NOVEL",
                            "ROLE_WRITER_STORY",
                            "ROLE_CO_CREATOR",
                            "ROLE_CREATOR"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "schedule": {
                    "$ref": "UnpluggedPersonSchedule"
                },
                "totalPersonMovies": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalPersonShows": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "UnpluggedPersonSchedule": {
            "description": "Represents the set of upcoming programs this person appears in.",
            "id": "UnpluggedPersonSchedule",
            "properties": {
                "airings": {
                    "description": "List of airings",
                    "items": {
                        "$ref": "Airing"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnpluggedPromo": {
            "id": "UnpluggedPromo",
            "properties": {
                "bannerImages": {
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "targetChannelId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedSeasonMetadata": {
            "description": "Next tag: 5",
            "id": "UnpluggedSeasonMetadata",
            "properties": {
                "episodes": {
                    "description": "Episodes in this season.",
                    "items": {
                        "$ref": "UnpluggedEpisodeMetadata"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "string"
                },
                "unpluggedSeasonIndex": {
                    "description": "DEPRECATED: Our internal index of the season in the show.  Right now it is\nonly being used by show_db_module to sort seasons, but will be removed from\nthere once we deprecate the Show.seasons field.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "UnpluggedShowIdSet": {
            "description": "Next tag: 3",
            "id": "UnpluggedShowIdSet",
            "properties": {
                "mid": {
                    "description": "The Knowledge graph id, for the entity corresponding to the show.",
                    "type": "string"
                },
                "tmsRootId": {
                    "description": "The TMS root ID of this show.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedShowMetadata": {
            "description": "Next tag: 25",
            "id": "UnpluggedShowMetadata",
            "properties": {
                "castMembers": {
                    "description": "Cast and Crew.\n\nThe lists are kept separate for now due to the fact that ordering is\nmeaningful within each list (i.e more prominent actors first).",
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "contentRestricts": {
                    "$ref": "ContentRestricts",
                    "description": "Content restrictions. Used for displaying restricts on this particular\nchannel."
                },
                "corpus": {
                    "description": "Corpus here aligns with the source of content.",
                    "enum": [
                        "CORPUS_UNKNOWN",
                        "CORPUS_SVOD",
                        "CORPUS_TVOD",
                        "CORPUS_TV",
                        "CORPUS_YOUTUBE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "Represents transactional content.",
                        "Represents live tv.",
                        "Represents youtube creator content."
                    ],
                    "type": "string"
                },
                "crewMembers": {
                    "items": {
                        "$ref": "PersonRole"
                    },
                    "type": "array"
                },
                "customPlayerMetadata": {
                    "$ref": "UnpluggedCustomPlayerMetadata",
                    "description": "Metadata to customize the player. Used for tentpole easter egg special\ntreatment."
                },
                "episodesDisplayType": {
                    "description": "Episodes display type; e.g, season_based.",
                    "enum": [
                        "EPISODES_DISPLAY_TYPE_UNKNOWN",
                        "EPISODES_DISPLAY_TYPE_SEASON_BASED",
                        "EPISODES_DISPLAY_TYPE_MONTHLY_BASED",
                        "EPISODES_DISPLAY_TYPE_WEEKLY_BASED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Standard season based shows, displaying episodes by season.",
                        "Daily shows with new airings 4-5 times/week, displaying episodes by month.",
                        "Daily shows with new airings > 5 times/week, displaying episodes by week."
                    ],
                    "type": "string"
                },
                "finaleYear": {
                    "description": "The year of last season (e.g. 2005)",
                    "type": "string"
                },
                "forceEmptyPrimaryNetwork": {
                    "description": "If this is true, no network should be added on details page of this show.",
                    "type": "boolean"
                },
                "genres": {
                    "description": "Various genres for the show.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "GENRE_UNKNOWN",
                            "GENRE_ACTION_AND_ADVENTURE",
                            "GENRE_ANIMATION_AND_CARTOONS",
                            "GENRE_AUTOMOTIVE",
                            "GENRE_BEAUTY",
                            "GENRE_COMEDY",
                            "GENRE_COOKING",
                            "GENRE_DOCUMENTARY",
                            "GENRE_DRAMA",
                            "GENRE_FAMILY",
                            "GENRE_FOOD",
                            "GENRE_GAMING",
                            "GENRE_HORROR_AND_SUSPENSE",
                            "GENRE_LIFESTYLE",
                            "GENRE_MUSIC",
                            "GENRE_MUSICALS",
                            "GENRE_REALITY_AND_GAME_SHOWS",
                            "GENRE_SCIENCE_FICTION_AND_FANTASY",
                            "GENRE_SPECIAL_INTEREST",
                            "GENRE_NEWS_AND_TALK",
                            "GENRE_SPORTS",
                            "GENRE_ROMANCE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "idSet": {
                    "$ref": "UnpluggedShowIdSet",
                    "description": "Various optional set of alternate ids for this show."
                },
                "images": {
                    "description": "Set of images for the show.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isAdultContent": {
                    "description": "Is the show rated as having adult content. (see go/upg-content-safety)",
                    "type": "boolean"
                },
                "isCrosswalk": {
                    "description": "If this is true, this show is a Crosswalk(go/xwalk-tv) show.",
                    "type": "boolean"
                },
                "language": {
                    "description": "The language code of this show. Examples: \"en\", \"es\", \"fr\".\nUses the ISO 639 standard.",
                    "type": "string"
                },
                "microgenreNames": {
                    "description": "Names of associated microgenres.",
                    "items": {
                        "$ref": "TranslationPack"
                    },
                    "type": "array"
                },
                "networkMetadata": {
                    "description": "List of TV networks this show airs on.",
                    "items": {
                        "$ref": "UnpluggedNetworkMetadata"
                    },
                    "type": "array"
                },
                "officialUrls": {
                    "description": "Official show web pages, eg. http://www.tbs.com/the_office",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "premiereYear": {
                    "description": "The year of first season (e.g. 1997)",
                    "type": "string"
                },
                "recommendedAudience": {
                    "description": "The audience that this show is recommended for.",
                    "enum": [
                        "RECOMMENDED_AUDIENCE_UNKNOWN",
                        "RECOMMENDED_AUDIENCE_FAMILY",
                        "RECOMMENDED_AUDIENCE_EVERYONE",
                        "RECOMMENDED_AUDIENCE_MATURE",
                        "RECOMMENDED_AUDIENCE_ADULT"
                    ],
                    "enumDescriptions": [
                        "We will not recommend anything to/from something with\nRECOMMENDED_AUDIENCE_UNKNOWN.",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "seasonCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "seasons": {
                    "description": "Seasons for the show.",
                    "items": {
                        "$ref": "UnpluggedSeasonMetadata"
                    },
                    "type": "array"
                },
                "showFlags": {
                    "$ref": "ShowFlags",
                    "description": "Content flags for this show."
                },
                "showRating": {
                    "description": "The rating used in unplugged",
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "youtubeSource": {
                    "$ref": "UnpluggedYoutubeSource",
                    "description": "For YT Series and originals indicates the channel that owns this content."
                }
            },
            "type": "object"
        },
        "UnpluggedSportsAthleteMetadata": {
            "id": "UnpluggedSportsAthleteMetadata",
            "properties": {
                "athlete": {
                    "$ref": "Athlete",
                    "description": "Athlete."
                },
                "schedule": {
                    "$ref": "Schedule",
                    "description": "Schedule."
                }
            },
            "type": "object"
        },
        "UnpluggedSportsEventMetadata": {
            "description": "Next tag: 8",
            "id": "UnpluggedSportsEventMetadata",
            "properties": {
                "entities": {
                    "description": "List of entities referenced inside the other fields. Should be ordered by\nthe Entity.id field.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "event": {
                    "$ref": "Event",
                    "description": "Information about the sports event."
                },
                "eventLeagueDetails": {
                    "description": "List of league/sports event group details.",
                    "items": {
                        "$ref": "UnpluggedLeagueDetails"
                    },
                    "type": "array"
                },
                "eventTeamDetails": {
                    "description": "List of team details.",
                    "items": {
                        "$ref": "UnpluggedTeamDetails"
                    },
                    "type": "array"
                },
                "schedule": {
                    "$ref": "Schedule",
                    "description": "Schedule. This field is being populated in UCS, but not in Channel Service!\nSee b/34683690"
                }
            },
            "type": "object"
        },
        "UnpluggedSportsLeagueMetadata": {
            "description": "Next Tag: 9",
            "id": "UnpluggedSportsLeagueMetadata",
            "properties": {
                "entities": {
                    "description": "List of entities referenced inside the other fields. Should be ordered by\nthe Entity.id field.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "league": {
                    "$ref": "League",
                    "description": "Entity."
                },
                "leagueDetails": {
                    "description": "List of all league details. It will contain the details for leagues\nreferenced in the other protos regardless of whether it's the child, parent\nor itself.",
                    "items": {
                        "$ref": "UnpluggedLeagueDetails"
                    },
                    "type": "array"
                },
                "schedule": {
                    "$ref": "Schedule",
                    "description": "Schedule. This field is being populated in UCS, but not in Channel Service!\nSee b/34683690"
                }
            },
            "type": "object"
        },
        "UnpluggedSportsTeamMetadata": {
            "description": "Next Tag: 7",
            "id": "UnpluggedSportsTeamMetadata",
            "properties": {
                "entities": {
                    "description": "List of entities referenced inside the other fields. Should be ordered by\nthe Entity.id field.",
                    "items": {
                        "$ref": "EntityEntity"
                    },
                    "type": "array"
                },
                "schedule": {
                    "$ref": "Schedule",
                    "description": "Schedule. This field is being populated in UCS, but not in Channel Service!\nSee b/34683690"
                },
                "stationChannelId": {
                    "description": "Channel id of station that corresponds to this team.\nThis is only present for NBA teams as of Q3 2018.",
                    "type": "string"
                },
                "team": {
                    "$ref": "Team",
                    "description": "Information about the team."
                }
            },
            "type": "object"
        },
        "UnpluggedStationIdSet": {
            "id": "UnpluggedStationIdSet",
            "properties": {
                "mid": {
                    "description": "Knowledge graph id.\n\nNote: There are some tv channels with dual feeds/stations (time shifted).\nAnd there isn't an entry in freebase for those individual feeds. In those\ncases, this entry will represent the high level channel. e.g for both\nshowtime-west, and showtime-east -- mid will represent the showtime entity.",
                    "type": "string"
                },
                "tmsId": {
                    "description": "TMS id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedStationInfo": {
            "id": "UnpluggedStationInfo",
            "properties": {
                "stationChannelId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedStationMetadata": {
            "description": "Next tag: 21",
            "id": "UnpluggedStationMetadata",
            "properties": {
                "activeBroadcastVideoIds": {
                    "description": "All active broadcast video ids. There may be two during a stream restart.\nDEPRECATED. Use active_broadcast_streams instead.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "blackAndWhiteLogo": {
                    "$ref": "Image"
                },
                "broadcastStreams": {
                    "description": "All broadcast streams for this station.\nThere may be two active streams during a stream restart.",
                    "items": {
                        "$ref": "UnpluggedBroadcastStream"
                    },
                    "type": "array"
                },
                "broadcastVideoId": {
                    "description": "Encrypted video id for the live stream\nThis is the video id of the most recently restarted stream instance.",
                    "type": "string"
                },
                "callSign": {
                    "description": "Station Call Sign.",
                    "type": "string"
                },
                "channelNumber": {
                    "description": "Used to rank channels on EPG.",
                    "format": "int32",
                    "type": "integer"
                },
                "contentRestricts": {
                    "$ref": "ContentRestricts",
                    "description": "Content restrictions. Used for displaying restricts on this particular\nchannel."
                },
                "idSet": {
                    "$ref": "UnpluggedStationIdSet",
                    "description": "Various Ids for this Station."
                },
                "images": {
                    "description": "Set of images for this station.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isMobileFeed": {
                    "description": "Whether this station refers to a mobile feed stream.\nNote: this only applies to NBA League Pass as of Q2 2018.",
                    "type": "boolean"
                },
                "networkMetadata": {
                    "$ref": "UnpluggedNetworkMetadata",
                    "description": "Network this station belongs to."
                },
                "networkMid": {
                    "description": "Corresponding network mid.",
                    "type": "string"
                },
                "networkTitle": {
                    "type": "string"
                },
                "onboardingChannelOrder": {
                    "description": "Used for ordering channels on the onboarding page.\nN.B.(cathyzhang): this data is published in content nodes.",
                    "format": "int32",
                    "type": "integer"
                },
                "promoBannerImages": {
                    "description": "Optional promotional images to display on the network page header.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "schedule": {
                    "$ref": "UnpluggedStationSchedule",
                    "description": "Station schedule"
                },
                "shortName": {
                    "description": "Station Call Sign.",
                    "type": "string"
                },
                "stationBroadcastType": {
                    "enum": [
                        "STATION_BROADCAST_TYPE_UNKNOWN",
                        "STATION_BROADCAST_TYPE_SINGLE_AND_NONSTOP",
                        "STATION_BROADCAST_TYPE_MULTIPLE_AND_INTERMITTENT"
                    ],
                    "enumDescriptions": [
                        "",
                        "Broadcast of this station's live stream is single and non-stop.\nAll unplugged stations except for ESPN3 should be this type.",
                        "This station sometimes has multiple simultaneous broadcasts, and sometimes\nhas none.\nESPN3 is the only station that applies to this type."
                    ],
                    "type": "string"
                },
                "teamChannelId": {
                    "description": "The external channel id of a team.\nOnly fill this in when a station refers to a feed of a league's team, such\nas NBA/MLB League Pass.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedStationRevenueContentOwner": {
            "description": "Next tag: 2",
            "id": "UnpluggedStationRevenueContentOwner",
            "properties": {
                "externalRevenueContentOwnerId": {
                    "description": "Commerce identifies each content owner with an id such that we can route\nthe correct revenue to each content owner. See go/ytv-sox for more info.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedStationSchedule": {
            "id": "UnpluggedStationSchedule",
            "properties": {
                "airings": {
                    "description": "List of airings",
                    "items": {
                        "$ref": "UnpluggedStationScheduleAiringAiring"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UnpluggedStationScheduleAiringAiring": {
            "id": "UnpluggedStationScheduleAiringAiring",
            "properties": {
                "broadcastVideoId": {
                    "description": "Broadcast video id for airing.\nIt should only be set when station broadcast type is\nSTATION_BROADCAST_TYPE_MULTIPLE_AND_INTERMITTENT.",
                    "type": "string"
                },
                "encryptedVideoId": {
                    "description": "Encrypted video id for the airing. It equals to yt external id of\nthis airing.",
                    "type": "string"
                },
                "endTimeSec": {
                    "format": "int64",
                    "type": "string"
                },
                "startTimeSec": {
                    "description": "Airing info.  Spans the interval [start, end).",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedTargetingData": {
            "description": "Next tag: 4",
            "id": "UnpluggedTargetingData",
            "properties": {
                "genre": {
                    "description": "Program genre. This is different from StationVertical because it can\nchange with each program.",
                    "enum": [
                        "UNKNOWN_GENRE",
                        "SPORTS_GENRE"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "stationVertical": {
                    "description": "Vertical info on a channel/station level.",
                    "enum": [
                        "UNKNOWN",
                        "SPORTS",
                        "NEWS"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "tvContentRating": {
                    "description": "Tv content rating for the program specified by metadata.",
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnpluggedTeamDetails": {
            "description": "Next tag: 10\nTeam information used by serving systems.",
            "id": "UnpluggedTeamDetails",
            "properties": {
                "abbreviationName": {
                    "$ref": "TranslationPack",
                    "description": "Three letter name of the team, it is different from short name.\nMock: https://screenshot.googleplex.com/AzJypyzHSHW"
                },
                "affiliationName": {
                    "$ref": "TranslationPack",
                    "description": "The name of the team's affiliation.\nFor example, the affiliation name of \"San Francisco 49ers\" is\n\"San Francisco\", and the affiliation name of \"Clemson Tigers Football\" is\n\"Clemson\"."
                },
                "baseName": {
                    "$ref": "TranslationPack",
                    "description": "The base name of the team,\nFor example, the base name of \"San Francisco 49ers\" is \"49ers\". and the\nbase name of \"Clemson Tigers Football\" is \"Tigers\"."
                },
                "id": {
                    "description": "The UMS ID for the entity.",
                    "type": "string"
                },
                "images": {
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "name": {
                    "$ref": "TranslationPack"
                },
                "primaryTeamColor": {
                    "$ref": "Color",
                    "description": "The primary color for the team.\nMock: https://screenshot.googleplex.com/yoWp07k6pg3"
                },
                "shortName": {
                    "$ref": "TranslationPack",
                    "description": "For professional teams, it is most probably the same as base name, while\nfor school teams, it is most probably the same as affiliation name."
                },
                "ytExternalId": {
                    "$ref": "YTExternalId",
                    "description": "External channel ID of the team."
                }
            },
            "type": "object"
        },
        "UnpluggedYoutubeSource": {
            "id": "UnpluggedYoutubeSource",
            "properties": {
                "externalChannelId": {
                    "description": "The channel id of the YT channel that owns this content\ne.g. For a YT Red Original Series like \"Prank Academy\" this will be\nJesse's Channel.",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_CREATOR_YT_SERIES",
                        "TYPE_YTO_SERIES",
                        "TYPE_YTO_MOVIE",
                        "TYPE_CREATOR_YT_MOVIE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateStationAttributesRequest": {
            "id": "UpdateStationAttributesRequest",
            "properties": {
                "attributeValues": {
                    "items": {
                        "$ref": "AttributeValue"
                    },
                    "type": "array"
                },
                "stationId": {
                    "description": "Station ID for which to update Attributes, for example \"STxxxxx=\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UpdateStationAttributesResponse": {
            "id": "UpdateStationAttributesResponse",
            "properties": {},
            "type": "object"
        },
        "UpdateStationsIncidentInfoResponse": {
            "id": "UpdateStationsIncidentInfoResponse",
            "properties": {},
            "type": "object"
        },
        "UrsaIdSet": {
            "description": "Next tag: 2",
            "id": "UrsaIdSet",
            "properties": {
                "acquisitionStreamId": {
                    "description": "Represents the ID that identifies a row in Ursa AcquisitionStreams table.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserAvailability": {
            "description": "To whom the content is available.",
            "id": "UserAvailability",
            "properties": {
                "accessGroup": {
                    "enum": [
                        "UNKNOWN_ACCESS_GROUP",
                        "ACCESS_GROUP_PUBLIC",
                        "ACCESS_GROUP_DOGFOOD",
                        "ACCESS_GROUP_FISHFOOD",
                        "ACCESS_GROUP_OPS",
                        "ACCESS_GROUP_TEST",
                        "ACCESS_GROUP_TEST_TURNDOWN"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserControl": {
            "description": "UserControl contains information on the users of a document.",
            "id": "UserControl",
            "properties": {
                "liableGaiaId": {
                    "description": "A gaia id designated for wipeout, tracing and filtering (Dasher,\nwhitelists) purposes.\n\nAll documents that belong to this gaia id are automatically removed when\nit's suspended or deleted (account-level wipeout).\n\nThis can be any valid gaia resource: a gaia user, a gaia group, a robot\naccount, etc. If your corpus doesn't have a natural liable owner (e.g. you\nindex only public documents), you can create a robot account and use it in\nall your documents.\n\nThis owner is completely independent from the ACL. It does not need to\nhave access to the document; in fact, unless it's explictly listed in the\nACL, it won't.\n\nThis field is required.\n\nUpdates to the liable_gaia_id aren't supported. In this case, the client\nis responsible for sending both a deletion and an index request,\nappropriately versioned.",
                    "format": "int64",
                    "type": "string"
                },
                "zanzibarAcl": {
                    "$ref": "ZanzibarAcl",
                    "description": "All the documents must have an ACL. They are accessible only to users and\ngroups listed in it.\n\nWARNING: Documents with ACLs that allow public access (e.g., public/ALL)\ncan be retrieved by all users (including external) even without providing\nend-user credentials.\n\nACLs are enforced as soon as they are written to Zanzibar. If a user is\nremoved from an ACL, it's guaranteed that they won't have access to the\ndocument as soon as the ACL is written to Zanzibar. However, if a user is\nadded to an ACL, they may still not have access until the document is\nreprocessed (either by sending a new index request or by our internal\nreprocessing). That is, there are no privacy issues, but there may be\ntemporary quality ones.\n\nThis field is required."
                }
            },
            "type": "object"
        },
        "UserInfo": {
            "description": "*\nGeneral User information. Contains user ID, last location info and general\ninfo about user's subscription.",
            "id": "UserInfo",
            "properties": {
                "email": {
                    "description": "Primary user email. Used to lookup for user and contact user back.",
                    "type": "string"
                },
                "homeLocation": {
                    "$ref": "Location",
                    "description": "Place set by user as his Home area."
                },
                "lastPlaybackLocation": {
                    "$ref": "Location",
                    "description": "Place of last user's playbacks."
                },
                "packages": {
                    "description": "List of services in user's subscription.",
                    "items": {
                        "$ref": "Package"
                    },
                    "type": "array"
                },
                "startTime": {
                    "description": "When YT TV subscription started.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "userId": {
                    "description": "Main user identification. Obfuscated gaia id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserVideo": {
            "description": "Individual videos (airing or vod) of the program in user library.",
            "id": "UserVideo",
            "properties": {
                "airing": {
                    "$ref": "YoutubeUnpluggedAiring",
                    "description": "Airing that represent user video."
                },
                "blackoutReason": {
                    "description": "Reason for blackout.",
                    "enum": [
                        "DVR_BLACKOUT_REASON_UNKNOWN",
                        "DVR_BLACKOUT_REASON_MOBILE",
                        "DVR_BLACKOUT_REASON_TRAVEL",
                        "DVR_BLACKOUT_REASON_LOCATION",
                        "DVR_BLACKOUT_REASON_HOME_LOCATION",
                        "DVR_BLACKOUT_REASON_MLB_CHECK_IN",
                        "DVR_BLACKOUT_REASON_PARTIAL",
                        "DVR_BLACKOUT_REASON_LOCKED_BY_LOCATION",
                        "DVR_BLACKOUT_REASON_LOCKED_BY_FOP",
                        "DVR_BLACKOUT_REASON_LOCKED_BY_NBA_LP_PAYWALL",
                        "DVR_BLACKOUT_REASON_LOCKED_BY_UPSELL"
                    ],
                    "enumDescriptions": [
                        "",
                        "Video is fully blacked out on mobile. Not playable.",
                        "Video is blacked out because the user is traveling. Not playable.",
                        "Video is blacked out because user's current location cannot be determined\nor blacked out. Not playable.",
                        "Video is blacked out because user's home location is blacked out.\nNot playable.",
                        "Video is blacked out because user is in MLB delinquent state. Not playable.",
                        "Video is partially blacked out. Currently only applies to DVR videos.",
                        "Video is locked from watching because user is in U.S. but we can not\nresolve user's precise current location with good confidence.",
                        "Video is locked from watching because user has not provided form of\npayment.",
                        "Video is locked from watching because user has not purchased NBA LP.",
                        "Video is locked because we are showing it for upsell purposes."
                    ],
                    "type": "string"
                },
                "dvrReported": {
                    "description": "How may times this video has been flagged by users.",
                    "format": "int32",
                    "type": "integer"
                },
                "expirationDate": {
                    "description": "Time when this recording become unavailabe to user.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "isDefault": {
                    "description": "Whether this video is displayed as default in client.",
                    "type": "boolean"
                },
                "startDate": {
                    "description": "Time when this recording become available to user.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "station": {
                    "$ref": "Station",
                    "description": "Station that displayed airing."
                },
                "status": {
                    "description": "Status or recording like PENDING, COMPLETED, DELETED or BLACKOUTED.",
                    "enum": [
                        "DVR_VIDEO_STATUS_UNKNOWN",
                        "DVR_VIDEO_STATUS_UPCOMMING",
                        "DVR_VIDEO_STATUS_PROCESSED",
                        "DVR_VIDEO_STATUS_LIVE",
                        "DVR_VIDEO_STATUS_DELETED",
                        "DVR_VIDEO_STATUS_BLACKOUT",
                        "DVR_VIDEO_STATUS_ERROR",
                        "DVR_VIDEO_STATUS_EXPIRED",
                        "DVR_VIDEO_STATUS_PROCESSING"
                    ],
                    "enumDescriptions": [
                        "",
                        "Copy id assigned and dvr process started.",
                        "Per user copy created and dvr process finished.",
                        "Dvr handled while airing..",
                        "Airing was deleted.",
                        "Dvr can't be processed because of blackout condition.",
                        "Dvr has been failed.",
                        "Dvr has been expired.",
                        "Venom encoding is scheduled."
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "Type of airing from entity details typing. May be DVR, VOD, LIVE etc.",
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_VIDEO_AIRING",
                        "TYPE_VIDEO_VOD",
                        "TYPE_VIDEO_LIVE",
                        "TYPE_VIDEO_FREE_YOUTUBE",
                        "TYPE_VIDEO_PARTIAL_AIRING"
                    ],
                    "enumDescriptions": [
                        "",
                        "Airing.",
                        "Video on demand.",
                        "Live event.",
                        "Video from Youtube.",
                        "This indicates the video is a partial dvr video."
                    ],
                    "type": "string"
                },
                "video": {
                    "$ref": "YTExternalId",
                    "description": "Video id of video."
                }
            },
            "type": "object"
        },
        "UstCellValue": {
            "description": "Next tag: 22",
            "id": "UstCellValue",
            "properties": {
                "availabilityDerivedSignal": {
                    "$ref": "AvailabilityDerivedSignal",
                    "description": "Field that holds data of type AvailabilityDerivedSignal."
                },
                "channelSignals": {
                    "$ref": "ChannelSignals",
                    "description": "Field that holds data of type ChannelSignals."
                },
                "chips": {
                    "$ref": "Chips",
                    "description": "Field that holds data of type Chips."
                },
                "contentSafety": {
                    "$ref": "ContentSafety",
                    "description": "Field that holds data of type ContentSafety."
                },
                "deletionStatus": {
                    "$ref": "DeletionStatus",
                    "description": "Field that holds data of type DeletionStatus."
                },
                "entityAvailability": {
                    "$ref": "EntityAvailability",
                    "description": "Field that holds data of type EntityAvailability."
                },
                "entityMicrogenreDetails": {
                    "$ref": "EntityMicrogenreDetails",
                    "description": "Field that holds data of type EntityMicrogenreDetails."
                },
                "entityTagDetails": {
                    "$ref": "EntityTagDetails",
                    "description": "Field that holds data of type EntityTagDetails."
                },
                "ingestionMetadata": {
                    "$ref": "IngestionMetadata",
                    "description": "Field that holds data of type IngestionMetadata."
                },
                "lensFlags": {
                    "$ref": "LensFlags",
                    "description": "Field that holds data of type LensFlags."
                },
                "processorLog": {
                    "$ref": "ProcessorLog",
                    "description": "Field that holds data of type ProcessorLog."
                },
                "rankingInfo": {
                    "$ref": "RankingInfo",
                    "description": "Field that holds data of type RankingInfo."
                },
                "tensorProto": {
                    "$ref": "TensorProto",
                    "description": "Field that holds data of type TensorProto."
                },
                "text": {
                    "description": "Field that holds data of type string.",
                    "type": "string"
                },
                "uniqueContentCandidatesMetadata": {
                    "$ref": "UniqueContentCandidatesMetadata",
                    "description": "Field that holds data of type UniqueContentCandidatesMetadata."
                },
                "uniqueEpisodeSignals": {
                    "$ref": "UniqueEpisodeSignals",
                    "description": "Field that holds data of type UniqueEpisodeSignals."
                },
                "unpluggedIdWrapper": {
                    "$ref": "UnpluggedIdWrapper",
                    "description": "Field that holds data of type UnpluggedIdWrapper."
                },
                "unpluggedIndexArtifacts": {
                    "$ref": "UnpluggedIndexArtifacts",
                    "description": "Field that holds data of type UnpluggedIndexArtifacts."
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata",
                    "description": "Field that holds data of type UnpluggedIndexMetadata."
                },
                "videoAvailability": {
                    "$ref": "VideoAvailability",
                    "description": "Field that holds data of type VideoAvailability."
                }
            },
            "type": "object"
        },
        "Value": {
            "id": "Value",
            "properties": {
                "doubleValue": {
                    "format": "double",
                    "type": "number"
                },
                "intValue": {
                    "format": "int32",
                    "type": "integer"
                },
                "stringValue": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VariantTensorDataProto": {
            "description": "Protocol buffer representing the serialization format of DT_VARIANT tensors.",
            "id": "VariantTensorDataProto",
            "properties": {
                "metadata": {
                    "description": "Portions of the object that are not Tensors.",
                    "format": "byte",
                    "type": "string"
                },
                "tensors": {
                    "description": "Tensors contained within objects being serialized.",
                    "items": {
                        "$ref": "TensorProto"
                    },
                    "type": "array"
                },
                "typeName": {
                    "description": "Name of the type of objects being serialized.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Venue": {
            "description": "Generic Venue information.",
            "id": "Venue",
            "properties": {
                "city": {
                    "$ref": "EntityEntity"
                },
                "name": {
                    "$ref": "EntityEntity"
                }
            },
            "type": "object"
        },
        "VenueDetails": {
            "id": "VenueDetails",
            "properties": {
                "tmsVenueId": {
                    "description": "TMS venue brand ID.",
                    "type": "string"
                },
                "venueName": {
                    "description": "Full name of the venue.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Version": {
            "description": "Version of a document.\n\nThis is used to handle out-of-order requests. Requests whose version is older\nthan that of the last processed request are silently dropped and the RPC\nreturns OK. Requests to the same document with the same version published\nwithin a few seconds are applied in an undefined order.",
            "id": "Version",
            "properties": {
                "timestampUs": {
                    "description": "Timestamp in microseconds indicating when the document was last updated. It\nmust be walltime comparable (see RequestType for restrictions) and must be\nmonotonically increasing.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VersionLabelSnapshot": {
            "description": "Specifies the version with the given label at a snapshot time. Both the\n|version_label| and the |snapshot_time| fields must be specified.",
            "id": "VersionLabelSnapshot",
            "properties": {
                "snapshotTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "versionLabel": {
                    "enum": [
                        "VERSION_LABEL_UNKNOWN",
                        "VERSION_LABEL_PUSHED_TO_UMS",
                        "VERSION_LABEL_PUBLISHED_TO_UCS",
                        "VERSION_LABEL_PUBLISHED_TO_YTMS",
                        "VERSION_LABEL_PUBLISHED_TO_UAS",
                        "VERSION_LABEL_SCHEDULE_ACTIVATED",
                        "VERSION_LABEL_PUSH_TO_UMS_AFTER_PICK_IMAGE_GROUPS",
                        "VERSION_LABEL_PUSH_TO_UMS_AFTER_COMPUTE_PRIMARY_NETWORK_ID",
                        "VERSION_LABEL_PUBLISHED_TO_USS",
                        "VERSION_LABEL_SCHEDULE_VIDEO_METADATA_PUBLISHED_TO_USS",
                        "VERSION_LABEL_SET_DVR_INIT",
                        "VERSION_LABEL_PUBLISHED_TO_YOUTUBE",
                        "VERSION_LABEL_PUBLISHED_TO_KG_ADAPTER",
                        "VERSION_LABEL_PUBLISHED_TO_BLACKOUTS",
                        "VERSION_LABEL_PUBLISHED_TO_URSA"
                    ],
                    "enumDescriptions": [
                        "",
                        "For all entities.",
                        "For show, movie, event, station and network.",
                        "For airing, station and video metadata.",
                        "For airing and station.",
                        "For schedule.",
                        "For episode, event, movie, network, person, show, and station.",
                        "For event, movie, and show.",
                        "For schedule and video metatada.",
                        "For schedule, added to differentiate from VERSION_LABEL_PUBLISHED_TO_USS\nfor schedule.\nThis represents that a schedule's diffed airings' video metadata entities\nare successfully published to USS.",
                        "Indicates whether DVR init has already been triggered for this airing\nversion.",
                        "Indicates that airing video was successfully pushed to youtube.",
                        "Indicates that airing was successfully published to KG adapter.",
                        "Indicates that the blackouts corresponding to the airings in the\ndiffset(Diff set has the airings in the version currently activated and\nlast version marked as published to Blackouts) have been updated.",
                        "For ursa entities, including acquisition stream.\nIndicates that entity has been successfully published to ursa."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VideoAsset": {
            "description": "Video asset info. We assume that all the videos would be hosted on youtube.",
            "id": "VideoAsset",
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "PREVIEW",
                        "HIGHLIGHTS",
                        "RECAP",
                        "IN_GAME"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "youtubeVideoId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VideoAvailability": {
            "description": "Video availability data.",
            "id": "VideoAvailability",
            "properties": {
                "availabilityFilteringStatus": {
                    "description": "Some videos are of STATUS_BLACKLISTED, such as paid programming. UNKNOWN\nand not set are equivalent to DEFAULT.",
                    "enum": [
                        "STATUS_UNKNOWN",
                        "STATUS_WHITELISTED",
                        "STATUS_BLACKLISTED",
                        "STATUS_OUTSIDE_INGESTION_WINDOW"
                    ],
                    "enumDescriptions": [
                        "",
                        "Whitelisted in across all packages. Available to all users.",
                        "Blacklisted across all packages.",
                        "Whitelisted for all users, we don't know if the user have the access to the\nprimary network of the entity yet."
                    ],
                    "type": "string"
                },
                "availabilityWindow": {
                    "$ref": "TimeRange",
                    "description": "Time ranges the content is available in. For VOD, these are based on\navailability windows. For airings, these are based on airing schedules."
                },
                "contentNodes": {
                    "description": "The list of ContentNode that contain the entity.",
                    "items": {
                        "$ref": "ContentNode"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "VideoInfo": {
            "id": "VideoInfo",
            "properties": {
                "endTimeSecs": {
                    "format": "int64",
                    "type": "string"
                },
                "externalVideoId": {
                    "description": "Youtube video id.",
                    "type": "string"
                },
                "startTimeSecs": {
                    "description": "When to end, and leave the video.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VideoWithAvailabilityDetails": {
            "id": "VideoWithAvailabilityDetails",
            "properties": {
                "details": {
                    "$ref": "EntityDetails"
                },
                "entity": {
                    "$ref": "Entity",
                    "description": "Entity of a video."
                },
                "timeRange": {
                    "$ref": "TimeRange",
                    "description": "Time ranges the content is available in. For VOD, these are based\navailability windows. For airings, these are based on airing schedules."
                }
            },
            "type": "object"
        },
        "VodDetails": {
            "id": "VodDetails",
            "properties": {
                "hasVodContent": {
                    "type": "boolean"
                },
                "vodPartnerCategories": {
                    "items": {
                        "$ref": "VodPartnerCategory"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "VodIdSet": {
            "description": "Describes the details for a given VOD program.\nNext tag: 2\nDeprecated do not add to this.  Use the vod idset in partner_idsets.",
            "id": "VodIdSet",
            "properties": {
                "videoFileAssetId": {
                    "description": "An ID for the program's video asset.  Stored/Updated when Unplugged\nreceives a new video for a VOD program.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VodPartnerCategory": {
            "description": "Category for VOD content. Ex: \"TV/Drama\"",
            "id": "VodPartnerCategory",
            "properties": {
                "category": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VyvxInfo": {
            "id": "VyvxInfo",
            "properties": {
                "vyvxReservationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "vyvxSourceIpAddress": {
                    "type": "string"
                },
                "vyvxSourcePortNumber": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "YTExternalId": {
            "description": "Proto used in entity ID to YT ID sstable.",
            "id": "YTExternalId",
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "CHANNEL",
                        "PLAYLIST",
                        "VIDEO",
                        "SHOW_CHANNEL"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "Show channels are a special type of channel"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YTSeriesIdSet": {
            "id": "YTSeriesIdSet",
            "properties": {
                "creatorId": {
                    "$ref": "YTExternalId"
                },
                "seriesId": {
                    "$ref": "YTExternalId"
                }
            },
            "type": "object"
        },
        "YoutubeUnpluggedAiring": {
            "description": "Next tag: 8",
            "id": "YoutubeUnpluggedAiring",
            "properties": {
                "details": {
                    "$ref": "YoutubeUnpluggedAiringDetails"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this airing. This id may or may not be\nsame as id from other environments (e.g KG, YouTube etc.) for the same\nairing.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet"
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                }
            },
            "type": "object"
        },
        "YoutubeUnpluggedAiringDetails": {
            "description": "Next tag: 13",
            "id": "YoutubeUnpluggedAiringDetails",
            "properties": {
                "actuality": {
                    "description": "Program actuality in increasing level of actuality.",
                    "enum": [
                        "ACTUALITY_UNKNOWN",
                        "ACTUALITY_NEW",
                        "ACTUALITY_DELAYED",
                        "ACTUALITY_LIVE"
                    ],
                    "enumDescriptions": [
                        "",
                        "New or first airing but may be recorded.",
                        "Almost live. Time shifter, e.g. to compensate for different\ntime zone.",
                        "Live. The content is happening at the time of the airing (e.g.\na live sport event).\n\nNOTE(tal): the term 'live' should not be confused with 'is aired now'."
                    ],
                    "type": "string"
                },
                "airingType": {
                    "enum": [
                        "AIRING_TYPE_UNKNOWN",
                        "AIRING_TYPE_VIDEO",
                        "AIRING_TYPE_BROADCAST"
                    ],
                    "enumDescriptions": [
                        "",
                        "The airing is a chunk of a 24/7 station live stream.",
                        "The airing itself is a single broadcast.\nEach ESPN3 airing has a unique live broadcast."
                    ],
                    "type": "string"
                },
                "broadcastVideoId": {
                    "description": "The broadcast video id of this airing.\nIt should only be set when station of this airing has broadcast type\nSTATION_BROADCAST_TYPE_MULTIPLE_AND_INTERMITTENT.",
                    "type": "string"
                },
                "dvrActions": {
                    "description": "Logs dvr actions performed by ops on this airing.\nThis is a one-off hacky way of auditing actions. Don't copy this approach\nwhen we want to audit things in the future. We should come up with a better\ngeneric approach to logging ops actions instead.",
                    "items": {
                        "$ref": "OpsDvrAction"
                    },
                    "type": "array"
                },
                "endTimeSeconds": {
                    "format": "int64",
                    "type": "string"
                },
                "language": {
                    "description": "Language to be used in the Airing metadata, if set, it will overwrite\nany value that comes in the program. Should be in a valid Google language\ncode (which is based on BCP 47).",
                    "type": "string"
                },
                "programId": {
                    "description": "The ID of the program of this airing. Corresponds to Program.id.",
                    "type": "string"
                },
                "programmingEvent": {
                    "description": "Defines special events for some programs aired on live TV.",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "items": {
                        "enum": [
                            "EVENT_UNKNOWN",
                            "EVENT_SEASON_FINALE",
                            "EVENT_SEASON_PREMIERE",
                            "EVENT_SERIES_FINALE",
                            "EVENT_SERIES_PREMIERE"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "rating": {
                    "enum": [
                        "RATING_UNKNOWN",
                        "RATING_MOVIE_G",
                        "RATING_MOVIE_PG",
                        "RATING_MOVIE_PG_13",
                        "RATING_MOVIE_R",
                        "RATING_MOVIE_NC_17",
                        "RATING_TV_Y",
                        "RATING_TV_Y7",
                        "RATING_TV_Y7FV",
                        "RATING_TV_G",
                        "RATING_TV_PG",
                        "RATING_TV_14",
                        "RATING_TV_MA",
                        "RATING_DV_Y",
                        "RATING_DV_G",
                        "RATING_DV_PG",
                        "RATING_DV_TEEN",
                        "RATING_DV_MA",
                        "RATING_DV_X",
                        "RATING_NOT_PROVIDED"
                    ],
                    "enumDescriptions": [
                        "",
                        "Movie ratings\nGeneral Audiences",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Restricted",
                        "No One 17 and Under Admitted",
                        "TV ratings\nAll Children",
                        "Directed to Older Children",
                        "Directed to Older Children - Fantasy Violence",
                        "General Audience",
                        "Parental Guidance Suggested",
                        "Parents Strongly Cautioned",
                        "Mature Audience Only",
                        "VIA ContentLabels\nsee google3/video/youtube/video_metadata/content_label.proto",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "For anything which does not have a provided rating."
                    ],
                    "type": "string"
                },
                "startTimeSeconds": {
                    "description": "The event interval is closed at the beginning and open at the\nend [start_time_seconds .. end_time_seconds).\n\nThe duration of the showing in secs is exactly the value\nend_time_seconds - start_time_seconds.",
                    "format": "int64",
                    "type": "string"
                },
                "stationId": {
                    "description": "The ID of the station of this airing. Corresponds to Station.id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YoutubeUnpluggedBroadcastDetails": {
            "description": "Next tag: 6",
            "id": "YoutubeUnpluggedBroadcastDetails",
            "properties": {
                "boundIngestion": {
                    "items": {
                        "$ref": "BoundIngestion"
                    },
                    "type": "array"
                },
                "broadcastContentId": {
                    "description": "YouTube Content Id - Video Id including the minor version number.",
                    "type": "string"
                },
                "broadcastEndTimeSec": {
                    "description": "Time in sec when the broadcast ended. This is only set when the\nStation Publisher deletes an active broadcast. This time may overlap with\nthe start of the next broadcast in order to allow DVR to be completed.",
                    "format": "int64",
                    "type": "string"
                },
                "broadcastScheduledStartTimeSec": {
                    "description": "Broadcast scheduled start time in sec for the assigned livestream.",
                    "format": "int64",
                    "type": "string"
                },
                "broadcastVideoId": {
                    "description": "YouTube Video Id where the live feed to station is being broadcasted.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YoutubeUnpluggedEntity": {
            "id": "YoutubeUnpluggedEntity",
            "properties": {
                "autoGenerated": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "UnpluggedId"
                }
            },
            "type": "object"
        },
        "YoutubeUnpluggedEvent": {
            "description": "Next tag: 10",
            "id": "YoutubeUnpluggedEvent",
            "properties": {
                "details": {
                    "$ref": "EventDetails"
                },
                "discoveryMetadata": {
                    "$ref": "DiscoveryMetadata",
                    "description": "DiscoveryMetadata Info"
                },
                "flags": {
                    "$ref": "ContentFlags"
                },
                "id": {
                    "description": "Unplugged assigned stable ID for this event. This may, or may not be same\nas id from other environments (e.g KG, YouTube etc.) for the same event.",
                    "type": "string"
                },
                "idSet": {
                    "$ref": "IdSet"
                },
                "publishingStatus": {
                    "$ref": "PublishingStatus"
                },
                "restricts": {
                    "$ref": "ContentRestricts"
                },
                "stagingUnpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                },
                "unpluggedIndexMetadata": {
                    "$ref": "UnpluggedIndexMetadata"
                }
            },
            "type": "object"
        },
        "YoutubeUnpluggedOpsVodIdSet": {
            "description": "Next id: 8",
            "id": "YoutubeUnpluggedOpsVodIdSet",
            "properties": {
                "deliveryIds": {
                    "description": "List of delivery ids.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "imageAssetId": {
                    "type": "string"
                },
                "metadataAssetId": {
                    "type": "string"
                },
                "packageAssetId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "videoFileAssetId": {
                    "type": "string"
                },
                "workflowIds": {
                    "description": "List of workflow ids.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "YoutubeUnpluggedStationDetails": {
            "description": "Next tag: 39",
            "id": "YoutubeUnpluggedStationDetails",
            "properties": {
                "accessState": {
                    "enum": [
                        "ACCESS_STATE_UNKNOWN",
                        "ACCESS_STATE_NO_CONTENT_NODE",
                        "ACCESS_STATE_HAS_CONTENT_NODE"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "availabilityArea": {
                    "$ref": "AvailabilityArea",
                    "description": "List of availabiliy areas. Specifically used for RSNs to map\nto a list of zip codes where the station is available."
                },
                "broadcastUpdate": {
                    "$ref": "BroadcastUpdate",
                    "description": "Broadcast updating state. Set active_state to UPDATE_STATE_NEW_BROADCAST to\ntrigger a new broadcast being created."
                },
                "broadcastVideoId": {
                    "description": "YouTube Video Id where the live feed to station is being broadcasted.",
                    "type": "string"
                },
                "channelNumber": {
                    "description": "Used for ordering channels in the EPG.",
                    "format": "int32",
                    "type": "integer"
                },
                "cmsScheduleReference": {
                    "$ref": "EntityReference",
                    "description": "The reference of the latest refresh schedule created for this station.\nThis should be consistent with latest_cms_schedule_refresh_id."
                },
                "creationTime": {
                    "format": "google-datetime",
                    "type": "string"
                },
                "defaultLocationSource": {
                    "description": "Specifies how UAS fetches the user's location. Sets the default value for\nblackouts to serve unless some ingested metadata overrides it. If not set,\ndefault to USER_LOCATION_SOURCE_CURRENT_DEVICE_LOCATION.",
                    "enum": [
                        "USER_LOCATION_SOURCE_UNKNOWN",
                        "USER_LOCATION_SOURCE_HOME_ZIP",
                        "USER_LOCATION_SOURCE_CURRENT_DEVICE_LOCATION"
                    ],
                    "enumDescriptions": [
                        "Unknown or unspecified user location source.",
                        "When checking a user's location, use their home zipcode.",
                        "When checking a user's location, use their current device location."
                    ],
                    "type": "string"
                },
                "enableHfr": {
                    "description": "Ingestion ID should be created with is_hfr flag set to enable 60fps\nbroadcasts.",
                    "type": "boolean"
                },
                "fifeImages": {
                    "description": "Set of fife images, with aspect ratio and fife url filled, for the station.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "hideFromOnboarding": {
                    "type": "boolean"
                },
                "historicBroadcastDetails": {
                    "description": "List of historic broadcast details including the current one. Will be\nappended every time a station is assigned with a new livestream.",
                    "items": {
                        "$ref": "YoutubeUnpluggedBroadcastDetails"
                    },
                    "type": "array"
                },
                "historicBroadcastUpdates": {
                    "description": "Broadcast updating history. broadcast_update field will be cleared upon\ncompletion of updating and all information will be appended to\nhistoric_broadcast_updates.",
                    "items": {
                        "$ref": "BroadcastUpdate"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "Set of ingestion images, converted directly from external sources, for the\nstation.",
                    "items": {
                        "$ref": "Image"
                    },
                    "type": "array"
                },
                "isMobileFeed": {
                    "description": "Whether this station refers to a mobile feed stream.\nNote: this only applies to NBA League Pass as of Q2 2018.",
                    "type": "boolean"
                },
                "jobset": {
                    "description": "Live Pipeline selector.",
                    "enum": [
                        "JOBSET_UNKNOWN",
                        "JOBSET_UGC",
                        "JOBSET_UNPLUGGED",
                        "JOBSET_SUPER_PREMIUM"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "latestCmsScheduleRefreshId": {
                    "description": "For CMS migration -- CMS will update this field when a new schedule is\ncreated.",
                    "type": "string"
                },
                "latestScheduleRefreshId": {
                    "description": "The id of the latest refresh schedule created for this station.\nNote that this will be different from the schedule_refresh_id until it gets\nactivated (or could remain different for a longer time, if the validation\nor the activation fails).",
                    "type": "string"
                },
                "liveStationType": {
                    "description": "This is only used for ums protos -> ups MasterData() now.\nUse with caution.",
                    "enum": [
                        "LIVE_STATION_TYPE_UNKNOWN",
                        "LIVE_STATION_AFFILIATE_STATION",
                        "LIVE_STATION_REGIONAL_SPORTS_STATION"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "networkId": {
                    "description": "The upg network id, if this station is associated with a network.",
                    "type": "string"
                },
                "onboardingNodeRank": {
                    "description": "Used for ordering channels on the onboarding page.",
                    "format": "int32",
                    "type": "integer"
                },
                "owner": {
                    "description": "Field to be set by ops for each station to track affiliate ownership.",
                    "enum": [
                        "STATION_OWNER_UNKNOWN",
                        "STATION_OWNER_TEGNA",
                        "STATION_OWNER_GRAHAM",
                        "STATION_OWNER_COX",
                        "STATION_OWNER_HEARST",
                        "STATION_OWNER_HUBBARD",
                        "STATION_OWNER_SCRIPPS",
                        "STATION_OWNER_BERKSHIRE_HATHAWAY",
                        "STATION_OWNER_SINCLAIR",
                        "STATION_OWNER_BONTEN",
                        "STATION_OWNER_NEXSTAR",
                        "STATION_OWNER_MEREDITH",
                        "STATION_OWNER_RAYCOM",
                        "STATION_OWNER_BAYSHORE",
                        "STATION_OWNER_TRIBUNE",
                        "STATION_OWNER_SUNBEAM",
                        "STATION_OWNER_CITADEL",
                        "STATION_OWNER_DISPATCH",
                        "STATION_OWNER_CUNNINGHAM",
                        "STATION_OWNER_SUPER_TOWERS",
                        "STATION_OWNER_CAPITOL",
                        "STATION_OWNER_BLOCK",
                        "STATION_OWNER_MIDWEST_TELEVISION",
                        "STATION_OWNER_BONNEVILLE",
                        "STATION_OWNER_WEIGEL",
                        "STATION_OWNER_GRIFFIN",
                        "STATION_OWNER_BAHAKEL_COMMUNICATIONS",
                        "STATION_OWNER_LOCKWOOD_BROADCAST",
                        "STATION_OWNER_DREAMCATCHER",
                        "STATION_OWNER_TENNESSEE",
                        "STATION_OWNER_LOUISIANA_MEDIA",
                        "STATION_OWNER_VAUGHAN_MEDIA",
                        "STATION_OWNER_DEERFIELD_MEDIA",
                        "STATION_OWNER_LM_COMMUNICATIONS",
                        "STATION_OWNER_WINSTON",
                        "STATION_OWNER_MANHAM",
                        "STATION_OWNER_TAMER_MEDIA",
                        "STATION_OWNER_OTA_BROADCASTING",
                        "STATION_OWNER_AMERICAN_SPIRIT",
                        "STATION_OWNER_MISSION",
                        "STATION_OWNER_SEDGWICK",
                        "STATION_OWNER_MPS_MEDIA",
                        "STATION_OWNER_SHIELD_MEDIA",
                        "STATION_OWNER_MONTCLAIR",
                        "STATION_OWNER_FORT_MYERS_BROADCASTING",
                        "STATION_OWNER_WATERMAN",
                        "STATION_OWNER_SUN_BROADCASTING",
                        "STATION_OWNER_GRAY_TELEVISION",
                        "STATION_OWNER_MORRIS",
                        "STATION_OWNER_EPI_GROUP",
                        "STATION_OWNER_KITV",
                        "STATION_OWNER_HOWARD_STIRK_HOLDINGS",
                        "STATION_OWNER_MORGAN_MURPHY",
                        "STATION_OWNER_NBI_HOLDINGS",
                        "STATION_OWNER_COWLES",
                        "STATION_OWNER_MITTS_TELECASTING",
                        "STATION_OWNER_KOPLAR",
                        "STATION_OWNER_WBHQ_COLUMBIA",
                        "STATION_OWNER_HEARTLAND_MEDIA",
                        "STATION_OWNER_QUINCY_NEWSPAPERS",
                        "STATION_OWNER_IRONWOOD_COMMUNICATIONS",
                        "STATION_OWNER_KTBS",
                        "STATION_OWNER_MARSHALL_BROADCASTING",
                        "STATION_OWNER_MEL_WHEELER",
                        "STATION_OWNER_PAXTON_MEDIA",
                        "STATION_OWNER_MOBILE_VIDEO_TAPES",
                        "STATION_OWNER_ENTRAVISION_COMMUNICATIONS",
                        "STATION_OWNER_GRANITE_BROADCASTING",
                        "STATION_OWNER_NORTHWEST_BROADCASTING",
                        "STATION_OWNER_GOCOM_MEDIA",
                        "STATION_OWNER_NEWS_PRESS_GAZETTE",
                        "STATION_OWNER_SARKES_TARZIAN",
                        "STATION_OWNER_SECOND_GENERATION",
                        "STATION_OWNER_MANSHIP",
                        "STATION_OWNER_MALARA_ENTERPRISES",
                        "STATION_OWNER_ESTEEM_BROADCASTING",
                        "STATION_OWNER_BAYOU_CITY_BROADCASTING",
                        "STATION_OWNER_INTERMOUNTAIN_WEST",
                        "STATION_OWNER_PALM_TELEVISION",
                        "STATION_OWNER_INDEPENDENT_COMMUNICATIONS",
                        "STATION_OWNER_CURTIS_SQUIRE",
                        "STATION_OWNER_FORUM_COMMUNICATIONS",
                        "STATION_OWNER_RED_RIVER_BROADCAST",
                        "STATION_OWNER_VINDICATOR_PRINTING",
                        "STATION_OWNER_MICI",
                        "STATION_OWNER_CADILLAC_TELECASTING",
                        "STATION_OWNER_CALIFORNIA_OREGON_BROADCASTING",
                        "STATION_OWNER_ROBERTS_MEDIA",
                        "STATION_OWNER_CORDILLERA",
                        "STATION_OWNER_SAGAMOREHILL",
                        "STATION_OWNER_WOODS_COMMUNICATIONS",
                        "STATION_OWNER_QNI",
                        "STATION_OWNER_MAXAIR_MEDIA",
                        "STATION_OWNER_COASTAL_TELEVISION_BROADCASTING",
                        "STATION_OWNER_USA_TELEVISION_HOLDINGS",
                        "STATION_OWNER_ROCKFLEET_BROADCASTING",
                        "STATION_OWNER_CURATORS_UNIVERSITY_MISSOURI",
                        "STATION_OWNER_MARQUEE_BROADCASTING",
                        "STATION_OWNER_RAMAR_COMMUNICATIONS",
                        "STATION_OWNER_VISION_ALASKA",
                        "STATION_OWNER_GCI_LIBERTY",
                        "STATION_OWNER_LILLY_BROADCASTING",
                        "STATION_OWNER_SURTSEY",
                        "STATION_OWNER_IDAHO",
                        "STATION_OWNER_THOMAS_BROADCASTING",
                        "STATION_OWNER_WEST_VIRGINIA",
                        "STATION_OWNER_MEDIA_GENERAL",
                        "STATION_OWNER_MIKE_REED_GROUP",
                        "STATION_OWNER_RAPID_BROADCASTING",
                        "STATION_OWNER_VISION_COMMUNICATIONS",
                        "STATION_OWNER_POLLACK_BROADCASTING",
                        "STATION_OWNER_UNITED_COMMUNICATIONS",
                        "STATION_OWNER_THUNDER_BAY_BROADCASTING",
                        "STATION_OWNER_MAX_MEDIA",
                        "STATION_OWNER_TELEPHONE_DATA_SYSTEMS",
                        "STATION_OWNER_STAR_CITY",
                        "STATION_OWNER_WAYPOINT_MEDIA",
                        "STATION_OWNER_WEST_CENTRAL_OHIO",
                        "STATION_OWNER_MERIDIAN_MEDIA",
                        "STATION_OWNER_CALA",
                        "STATION_OWNER_SILVERTON_BROADCASTING",
                        "STATION_OWNER_WYOMEDIA",
                        "STATION_OWNER_MARK_III_MEDIA",
                        "STATION_OWNER_CHENA",
                        "STATION_OWNER_SOUTHEASTERN_OHIO",
                        "STATION_OWNER_DENALI_MEDIA",
                        "STATION_OWNER_LAKE_SUPERIOR_COMMUNITY",
                        "STATION_OWNER_GLENDIVE",
                        "STATION_OWNER_WFMJ_TELEVISION",
                        "STATION_OWNER_COASTAL_BROADCASTING"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "revenueContentOwner": {
                    "$ref": "UnpluggedStationRevenueContentOwner",
                    "description": "Field to be set by ops for each station. See go/ytv-sox for details."
                },
                "scheduleRefreshId": {
                    "description": "The schedule refresh id for the current schedule.",
                    "type": "string"
                },
                "shortDisplayName": {
                    "description": "A short name for display. For example, this will be something like \"A&E\"\nor \"Comedy Central\".\nALUSCO: Put anything you had here in short_name.",
                    "type": "string"
                },
                "shortName": {
                    "description": "Contains short name for this station (e.g. 'ABC').",
                    "type": "string"
                },
                "stationBroadcastType": {
                    "description": "Describe the type of station broadcast.\nIf type is STATION_BROADCAST_TYPE_MULTIPLE_AND_INTERMITTENT, we don't keep\nbroadcast_video_id in station, it is stored with airing instead.",
                    "enum": [
                        "STATION_BROADCAST_TYPE_UNKNOWN",
                        "STATION_BROADCAST_TYPE_SINGLE_AND_NONSTOP",
                        "STATION_BROADCAST_TYPE_MULTIPLE_AND_INTERMITTENT"
                    ],
                    "enumDescriptions": [
                        "",
                        "Broadcast of this station's live stream is single and non-stop.\nAll unplugged stations except for ESPN3 should be this type.",
                        "This station sometimes has multiple simultaneous broadcasts, and sometimes\nhas none.\nESPN3 is the only station that applies to this type."
                    ],
                    "type": "string"
                },
                "stationCallSign": {
                    "description": "The call sign of this station (e.g. 'KGO').",
                    "type": "string"
                },
                "stationType": {
                    "enum": [
                        "STATION_TYPE_UNKNOWN",
                        "STATION_TYPE_LIVE",
                        "STATION_TYPE_YTLC",
                        "STATION_TYPE_LIVE_SWITCHED"
                    ],
                    "enumDescriptions": [
                        "",
                        "They have a live stream coming in from the source.\nCurrently these are traditional broadcast stations. e.g KGO, CW etc.",
                        "Curated youtube content presented as a linear stream.",
                        "Live streams that are synthetically composed of various input streams.\nUsed for RSNs and the like."
                    ],
                    "type": "string"
                },
                "teamId": {
                    "description": "The upg id of a team. As of Q2 2018, we are using MID as upg id for\nteam.\nOnly fill this in when a station refers to a feed of a league's team,\nsuch as NBA/MLB League Pass.",
                    "type": "string"
                },
                "thirdPartyTargetingData": {
                    "$ref": "ThirdPartyTargetingData"
                },
                "timezone": {
                    "description": "CLDR timezone name. E.g. \"America/Los_Angeles\".",
                    "type": "string"
                },
                "tveStationCallSign": {
                    "description": "Deprecated and in the process of removal",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YtvIncident": {
            "id": "YtvIncident",
            "properties": {
                "incidentInfo": {
                    "$ref": "IncidentInfo"
                },
                "stationIds": {
                    "description": "station ids related to this incident.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "YtvMcStreamyAttributes": {
            "id": "YtvMcStreamyAttributes",
            "properties": {
                "stationAttributes": {
                    "description": "Attribute names and values for the specified station.",
                    "items": {
                        "$ref": "YtvStationAttribute"
                    },
                    "type": "array"
                },
                "stationId": {
                    "description": "Station for which these attributes apply.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YtvMetricDataStream": {
            "description": "Stream that contains metric data points.",
            "id": "YtvMetricDataStream",
            "properties": {
                "copyId": {
                    "description": "copy id of this stream if it is for a stream copy.",
                    "type": "string"
                },
                "dataPoints": {
                    "description": "all data points in this stream",
                    "items": {
                        "$ref": "DataPoint"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "YtvSchedule": {
            "description": "Airings or blackouts schedule of specific station.",
            "id": "YtvSchedule",
            "properties": {
                "entries": {
                    "description": "Entries this object contains. Ordered by start time.",
                    "items": {
                        "$ref": "ScheduleEntry"
                    },
                    "type": "array"
                },
                "scheduleSource": {
                    "description": "Source of the airings being fetched from. For airings schedule only.",
                    "enum": [
                        "SOURCE_UNKNOWN",
                        "SOURCE_BLACKOUT",
                        "SOURCE_UMS",
                        "SOURCE_CMS_CANONICAL",
                        "SOURCE_CMS_MANUAL",
                        "SOURCE_TMS",
                        "SOURCE_KG",
                        "SOURCE_GROUND_TRUTH",
                        "SOURCE_SCTE224"
                    ],
                    "enumDescriptions": [
                        "Unknown schedule source.",
                        "Blackout Schedule.",
                        "Schedule fetch from ums.",
                        "Canonical schedule from cms.",
                        "Manual schedule from cms.",
                        "Schedule fetch from tms.",
                        "Knowledge Graph.",
                        "Ground Truth from CMS",
                        "SCTE 224 schedule that contains source station info"
                    ],
                    "type": "string"
                },
                "stationId": {
                    "description": "ums id of the station it belongs to",
                    "type": "string"
                },
                "status": {
                    "$ref": "ScheduleStatus",
                    "description": "Status of schedule."
                },
                "versionTimestamp": {
                    "description": "Version timestamp of schedule. Only for certain schedules.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YtvStation": {
            "description": "Fields representing a YTV station.",
            "id": "YtvStation",
            "properties": {
                "broadcastVideoId": {
                    "description": "The video id of the station's broadcast, if there is one.",
                    "type": "string"
                },
                "callSign": {
                    "description": "The callsign of the station\ne.g. BRAVOHD",
                    "type": "string"
                },
                "historicBroadcastDetails": {
                    "description": "List of historic broadcast details including the current one. Contains\ndetails start in last 7 days.",
                    "items": {
                        "$ref": "BroadcastDetails"
                    },
                    "type": "array"
                },
                "ingestionDetails": {
                    "$ref": "IngestionDetails",
                    "description": "Ingestion details of station, only set when view mode is\nVIEW_INGESTION_METADATA"
                },
                "launchState": {
                    "description": "The launch state of station. e.g.STATION_LAUNCH_STATE_FISHFOOD.",
                    "enum": [
                        "STATION_LAUNCH_STATE_UNSPECIFIED",
                        "STATION_LAUNCH_STATE_TEST",
                        "STATION_LAUNCH_STATE_OPS",
                        "STATION_LAUNCH_STATE_FISHFOOD",
                        "STATION_LAUNCH_STATE_DOGFOOD",
                        "STATION_LAUNCH_STATE_PUBLIC"
                    ],
                    "enumDescriptions": [
                        "Unspecified station launch",
                        "State is just for testing.",
                        "State is launched to ops",
                        "State is launched to fishfood",
                        "State is launched to dogfood",
                        "State is launched to public"
                    ],
                    "type": "string"
                },
                "logoThumbnail": {
                    "$ref": "ThumbnailDetails",
                    "description": "The thumbnail of station logo."
                },
                "name": {
                    "description": "The API resource name\ne.g. stations/ST123456",
                    "type": "string"
                },
                "networkId": {
                    "description": "The network id of station",
                    "type": "string"
                },
                "networkTitle": {
                    "description": "The title of network the station belongs to.",
                    "type": "string"
                },
                "shortName": {
                    "description": "The short name of the station.",
                    "type": "string"
                },
                "stationId": {
                    "description": "The unplugged station id\ne.g. ST123456",
                    "type": "string"
                },
                "stationType": {
                    "description": "Type of station.",
                    "enum": [
                        "TYPE_UNKNOWN",
                        "TYPE_NORMAL_USER_STATION",
                        "TYPE_STREAM_SWITCHED_USER_STATION",
                        "TYPE_SOURCE_ONLY_STATION"
                    ],
                    "enumDescriptions": [
                        "",
                        "normal user-facing station",
                        "user-facing station used for stream switching",
                        "station used as source in stream switching only"
                    ],
                    "type": "string"
                },
                "streamSwitchingDetails": {
                    "$ref": "StreamSwitchingDetails",
                    "description": "Stream switching details of station"
                },
                "videoThumbnail": {
                    "$ref": "ThumbnailDetails",
                    "description": "The thumbnail of station video."
                },
                "viewerCount": {
                    "description": "number of latest viewership of this station",
                    "format": "int64",
                    "type": "string"
                },
                "ytChannelId": {
                    "description": "YT Channel ID",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YtvStationAcquisitionStreamsInfo": {
            "id": "YtvStationAcquisitionStreamsInfo",
            "properties": {
                "acquisitionStreams": {
                    "description": "information of acquisition streams of this station.",
                    "items": {
                        "$ref": "StationAcquisitionStreamInfo"
                    },
                    "type": "array"
                },
                "stationId": {
                    "description": "id of the station",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "YtvStationAttribute": {
            "description": "attribute entity.",
            "id": "YtvStationAttribute",
            "properties": {
                "name": {
                    "description": "full name of this attribute\ne.g.\n\"/youtube/unplugged/linear/slurp/input_m2ts/errored_packets{copy_id=0}\"",
                    "type": "string"
                },
                "shortName": {
                    "description": "short name of this attribute e.g. Bitrate",
                    "type": "string"
                },
                "value": {
                    "description": "Stringified value of this attribute",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ZanzibarAcl": {
            "description": "Document ACL.\n\nSee g3doc/indexing/moonshine/generic/g3doc/doc/zanzibar.md for details,\nrequirements and examples.",
            "id": "ZanzibarAcl",
            "properties": {
                "resourceId": {
                    "$ref": "ResourceIdProto",
                    "description": "The resource ID of the ACL'd object.\n\nThis field is required."
                },
                "zookie": {
                    "description": "An opaque token for an ACL stored in Zanzibar.\n\nThe zookie must be a write zookie; in fact, read zookies should not be\npersisted.\n\nThis field is optional, but it's strongly recommended to ensure correctness\nand privacy.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "YouTube TV Ops Private API (test)",
    "version": "v1",
    "version_module": true
}